Shader "Curved/Standard" {
	Properties {
		_Color ("Color", Vector) = (1,1,1,1)
		_SEGIColor ("SEGI Tint", Vector) = (1,1,1,1)
		_MainTex ("Albedo", 2D) = "white" {}
		_Cutoff ("Alpha Cutoff", Range(0, 1)) = 0.5
		_Glossiness ("Smoothness", Range(0, 1)) = 0.5
		_GlossMapScale ("Smoothness Scale", Range(0, 1)) = 1
		[Enum(Metallic Alpha,0,Albedo Alpha,1)] _SmoothnessTextureChannel ("Smoothness texture channel", Float) = 0
		[Gamma] _Metallic ("Metallic", Range(0, 1)) = 0
		_MetallicGlossMap ("Metallic", 2D) = "white" {}
		[ToggleOff] _SpecularHighlights ("Specular Highlights", Float) = 1
		[ToggleOff] _GlossyReflections ("Glossy Reflections", Float) = 1
		_BumpScale ("Scale", Float) = 1
		_BumpMap ("Normal Map", 2D) = "bump" {}
		_Parallax ("Height Scale", Range(0.005, 0.08)) = 0.02
		_ParallaxMap ("Height Map", 2D) = "black" {}
		_OcclusionStrength ("Strength", Range(0, 1)) = 1
		_OcclusionMap ("Occlusion", 2D) = "white" {}
		_EmissionColor ("Color", Vector) = (0,0,0,1)
		_EmissionMap ("Emission", 2D) = "white" {}
		_DetailMask ("Detail Mask", 2D) = "white" {}
		_DetailAlbedoMap ("Detail Albedo x2", 2D) = "grey" {}
		_DetailNormalMapScale ("Scale", Float) = 1
		_DetailNormalMap ("Normal Map", 2D) = "bump" {}
		[Enum(UV0,0,UV1,1)] _UVSec ("UV Set for secondary textures", Float) = 0
		[HideInInspector] _Mode ("__mode", Float) = 0
		[HideInInspector] _SrcBlend ("__src", Float) = 1
		[HideInInspector] _DstBlend ("__dst", Float) = 0
		[HideInInspector] _ZWrite ("__zw", Float) = 1
		[HideInInspector] _ZTest ("__zt", Float) = 2
	}
	SubShader {
		LOD 300
		Tags { "PerformanceChecks" = "False" "RenderType" = "Opaque" }
		Pass {
			Name "FORWARD"
			LOD 300
			Tags { "LIGHTMODE" = "FORWARDBASE" "PerformanceChecks" = "False" "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" }
			Blend Zero Zero, Zero Zero
			ZWrite Off
			GpuProgramID 51996
			Program "vp" {
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD4.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yzx * u_xlat0.zxy;
					    u_xlat1.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat12 = u_xlat0.y * u_xlat0.y;
					    u_xlat12 = u_xlat0.x * u_xlat0.x + (-u_xlat12);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat12) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat12 = u_xlat0.y * u_xlat0.y;
					    u_xlat12 = u_xlat0.x * u_xlat0.x + (-u_xlat12);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat12) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat6 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat6);
					    u_xlat3.x = cos(u_xlat6);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD4.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3.x = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat0.zxy;
					    u_xlat2.xyz = u_xlat0.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat12 = u_xlat0.y * u_xlat0.y;
					    u_xlat12 = u_xlat0.x * u_xlat0.x + (-u_xlat12);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat2);
					    u_xlat0.y = dot(unity_SHBg, u_xlat2);
					    u_xlat0.z = dot(unity_SHBb, u_xlat2);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat12) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat12 = u_xlat0.y * u_xlat0.y;
					    u_xlat12 = u_xlat0.x * u_xlat0.x + (-u_xlat12);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat2);
					    u_xlat0.y = dot(unity_SHBg, u_xlat2);
					    u_xlat0.z = dot(unity_SHBb, u_xlat2);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat12) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3.x = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD4.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_11[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat6;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat6 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat6);
					    u_xlat3.x = cos(u_xlat6);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat15 = u_xlat2.y * u_xlat2.y;
					    u_xlat15 = u_xlat2.x * u_xlat2.x + (-u_xlat15);
					    u_xlat2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_11[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat6;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat6 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat6);
					    u_xlat3.x = cos(u_xlat6);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat15 = u_xlat1.y * u_xlat1.y;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + (-u_xlat15);
					    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat1);
					    u_xlat3.y = dot(unity_SHBg, u_xlat1);
					    u_xlat3.z = dot(unity_SHBb, u_xlat1);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat6 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat6);
					    u_xlat3.x = cos(u_xlat6);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD4.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_11[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat7 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat7);
					    u_xlat3.x = cos(u_xlat7);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat18 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat3.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat4 = u_xlat2 * u_xlat2 + u_xlat4;
					    u_xlat2 = u_xlat2 * u_xlat3.xxxx + u_xlat5;
					    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat18 = u_xlat3.y * u_xlat3.y;
					    u_xlat18 = u_xlat3.x * u_xlat3.x + (-u_xlat18);
					    u_xlat3 = u_xlat3.yzzx * u_xlat3.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_11[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat7 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat7);
					    u_xlat3.x = cos(u_xlat7);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat2.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat4 = u_xlat3 * u_xlat3 + u_xlat4;
					    u_xlat3 = u_xlat3 * u_xlat2.xxxx + u_xlat5;
					    u_xlat3 = u_xlat0 * u_xlat2.zzzz + u_xlat3;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat3 = u_xlat3 * u_xlat4;
					    u_xlat3 = max(u_xlat3, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat3;
					    u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat3.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat18 = u_xlat2.y * u_xlat2.y;
					    u_xlat18 = u_xlat2.x * u_xlat2.x + (-u_xlat18);
					    u_xlat2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat2);
					    u_xlat4.y = dot(unity_SHBg, u_xlat2);
					    u_xlat4.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3.x = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_3_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    gl_Position = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "LIGHTPROBE_SH" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    gl_Position = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yzx * u_xlat0.zxy;
					    u_xlat1.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat0.y * u_xlat0.y;
					    u_xlat21 = u_xlat0.x * u_xlat0.x + (-u_xlat21);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "LIGHTPROBE_SH" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    gl_Position = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat0.y * u_xlat0.y;
					    u_xlat21 = u_xlat0.x * u_xlat0.x + (-u_xlat21);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "SHADOWS_SCREEN" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_3_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    u_xlat0 = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "SHADOWS_SCREEN" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_3_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    u_xlat0 = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat1.w = 0.0;
					    vs_TEXCOORD2 = u_xlat1.wwwx;
					    vs_TEXCOORD3 = u_xlat1.wwwy;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    vs_TEXCOORD4.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    u_xlat0 = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat1.zxy;
					    u_xlat2.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat22 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat22 = u_xlat1.y * u_xlat1.y;
					    u_xlat22 = u_xlat1.x * u_xlat1.x + (-u_xlat22);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat1.x = dot(unity_SHBr, u_xlat2);
					    u_xlat1.y = dot(unity_SHBg, u_xlat2);
					    u_xlat1.z = dot(unity_SHBb, u_xlat2);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat22) + u_xlat1.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    u_xlat0 = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat1.w = 0.0;
					    vs_TEXCOORD2 = u_xlat1.wwwx;
					    vs_TEXCOORD3 = u_xlat1.wwwy;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat22 = u_xlat1.y * u_xlat1.y;
					    u_xlat22 = u_xlat1.x * u_xlat1.x + (-u_xlat22);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat1.x = dot(unity_SHBr, u_xlat2);
					    u_xlat1.y = dot(unity_SHBg, u_xlat2);
					    u_xlat1.z = dot(unity_SHBb, u_xlat2);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat22) + u_xlat1.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_3_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    gl_Position = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_3_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    gl_Position = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_11[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    gl_Position = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat21 = u_xlat2.y * u_xlat2.y;
					    u_xlat21 = u_xlat2.x * u_xlat2.x + (-u_xlat21);
					    u_xlat2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat21) + u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_11[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    gl_Position = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat21 = u_xlat1.y * u_xlat1.y;
					    u_xlat21 = u_xlat1.x * u_xlat1.x + (-u_xlat21);
					    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat1);
					    u_xlat3.y = dot(unity_SHBg, u_xlat1);
					    u_xlat3.z = dot(unity_SHBb, u_xlat1);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat21) + u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_3_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    u_xlat0 = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_3_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    u_xlat0 = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat1.w = 0.0;
					    vs_TEXCOORD2 = u_xlat1.wwwx;
					    vs_TEXCOORD3 = u_xlat1.wwwy;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    vs_TEXCOORD4.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_11[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    u_xlat0 = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat3.xyz = vec3(u_xlat22) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat22 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat2 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat3.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat4 = u_xlat2 * u_xlat2 + u_xlat4;
					    u_xlat2 = u_xlat2 * u_xlat3.xxxx + u_xlat5;
					    u_xlat2 = u_xlat1 * u_xlat3.zzzz + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat4;
					    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat2 = u_xlat2 * u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat22 = u_xlat3.y * u_xlat3.y;
					    u_xlat22 = u_xlat3.x * u_xlat3.x + (-u_xlat22);
					    u_xlat3 = u_xlat3.yzzx * u_xlat3.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat22) + u_xlat4.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_11[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    u_xlat0 = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat1.w = 0.0;
					    vs_TEXCOORD2 = u_xlat1.wwwx;
					    vs_TEXCOORD3 = u_xlat1.wwwy;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat2.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat4 = u_xlat3 * u_xlat3 + u_xlat4;
					    u_xlat3 = u_xlat3 * u_xlat2.xxxx + u_xlat5;
					    u_xlat3 = u_xlat1 * u_xlat2.zzzz + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat4;
					    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat3 = u_xlat3 * u_xlat4;
					    u_xlat3 = max(u_xlat3, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat3.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
					    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat22 = u_xlat2.y * u_xlat2.y;
					    u_xlat22 = u_xlat2.x * u_xlat2.x + (-u_xlat22);
					    u_xlat2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat2);
					    u_xlat4.y = dot(unity_SHBg, u_xlat2);
					    u_xlat4.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat22) + u_xlat4.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_3_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    gl_Position = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD4.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yzx * u_xlat0.zxy;
					    u_xlat1.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat12 = u_xlat0.y * u_xlat0.y;
					    u_xlat12 = u_xlat0.x * u_xlat0.x + (-u_xlat12);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat12) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat12 = u_xlat0.y * u_xlat0.y;
					    u_xlat12 = u_xlat0.x * u_xlat0.x + (-u_xlat12);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat12) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "SHADOWS_SCREEN" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat6 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat6);
					    u_xlat3.x = cos(u_xlat6);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "SHADOWS_SCREEN" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD4.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "SHADOWS_SCREEN" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3.x = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat0.zxy;
					    u_xlat2.xyz = u_xlat0.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat12 = u_xlat0.y * u_xlat0.y;
					    u_xlat12 = u_xlat0.x * u_xlat0.x + (-u_xlat12);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat2);
					    u_xlat0.y = dot(unity_SHBg, u_xlat2);
					    u_xlat0.z = dot(unity_SHBb, u_xlat2);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat12) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "SHADOWS_SCREEN" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat12 = u_xlat0.y * u_xlat0.y;
					    u_xlat12 = u_xlat0.x * u_xlat0.x + (-u_xlat12);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat2);
					    u_xlat0.y = dot(unity_SHBg, u_xlat2);
					    u_xlat0.z = dot(unity_SHBb, u_xlat2);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat12) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3.x = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD4.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_11[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat6;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat6 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat6);
					    u_xlat3.x = cos(u_xlat6);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat15 = u_xlat2.y * u_xlat2.y;
					    u_xlat15 = u_xlat2.x * u_xlat2.x + (-u_xlat15);
					    u_xlat2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_11[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat6;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat6 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat6);
					    u_xlat3.x = cos(u_xlat6);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat15 = u_xlat1.y * u_xlat1.y;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + (-u_xlat15);
					    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat1);
					    u_xlat3.y = dot(unity_SHBg, u_xlat1);
					    u_xlat3.z = dot(unity_SHBb, u_xlat1);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat6 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat6);
					    u_xlat3.x = cos(u_xlat6);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD4.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_11[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat7 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat7);
					    u_xlat3.x = cos(u_xlat7);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat18 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat3.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat4 = u_xlat2 * u_xlat2 + u_xlat4;
					    u_xlat2 = u_xlat2 * u_xlat3.xxxx + u_xlat5;
					    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat18 = u_xlat3.y * u_xlat3.y;
					    u_xlat18 = u_xlat3.x * u_xlat3.x + (-u_xlat18);
					    u_xlat3 = u_xlat3.yzzx * u_xlat3.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_11[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat7 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat7);
					    u_xlat3.x = cos(u_xlat7);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat2.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat4 = u_xlat3 * u_xlat3 + u_xlat4;
					    u_xlat3 = u_xlat3 * u_xlat2.xxxx + u_xlat5;
					    u_xlat3 = u_xlat0 * u_xlat2.zzzz + u_xlat3;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat3 = u_xlat3 * u_xlat4;
					    u_xlat3 = max(u_xlat3, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat3;
					    u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat3.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat18 = u_xlat2.y * u_xlat2.y;
					    u_xlat18 = u_xlat2.x * u_xlat2.x + (-u_xlat18);
					    u_xlat2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat2);
					    u_xlat4.y = dot(unity_SHBg, u_xlat2);
					    u_xlat4.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						float _WorldRadius;
						vec4 _WorldCenter;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_5;
						float _UVSec;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3.x = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_3;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[4];
						vec4 unity_IndirectSpecColor;
						vec4 unused_2_2[18];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat9;
					vec3 u_xlat12;
					float u_xlat16;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					bool u_xlatb23;
					float u_xlat24;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat21 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat22 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * vs_TEXCOORD4.xyz;
					    u_xlat22 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat3.xyz = vec3(u_xlat22) * vs_TEXCOORD1.xyz;
					    u_xlatb23 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb23){
					        u_xlatb23 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat12.x = vs_TEXCOORD2.w;
					        u_xlat12.y = vs_TEXCOORD3.w;
					        u_xlat12.z = vs_TEXCOORD4.w;
					        u_xlat4.xyz = (bool(u_xlatb23)) ? u_xlat4.xyz : u_xlat12.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat23 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat24 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat23, u_xlat24);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat23 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat4 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat24 = (-_OcclusionStrength) + 1.0;
					    u_xlat24 = u_xlat4.y * _OcclusionStrength + u_xlat24;
					    u_xlat4.xyz = vec3(u_xlat23) * _LightColor0.xyz;
					    u_xlat5.xyz = vec3(u_xlat24) * unity_IndirectSpecColor.xyz;
					    u_xlat23 = (-_Glossiness) + 1.0;
					    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat22 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat22 = max(u_xlat22, 0.00100000005);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat6.xyz = vec3(u_xlat22) * u_xlat6.xyz;
					    u_xlat22 = dot(u_xlat2.xyz, (-u_xlat3.xyz));
					    u_xlat2.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat9 = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat9 = dot(vec2(u_xlat9), vec2(u_xlat23));
					    u_xlat9 = u_xlat9 + -0.5;
					    u_xlat16 = (-u_xlat2.x) + 1.0;
					    u_xlat3.x = u_xlat16 * u_xlat16;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat16 = u_xlat16 * u_xlat3.x;
					    u_xlat16 = u_xlat9 * u_xlat16 + 1.0;
					    u_xlat22 = -abs(u_xlat22) + 1.0;
					    u_xlat3.x = u_xlat22 * u_xlat22;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat22 = u_xlat22 * u_xlat3.x;
					    u_xlat9 = u_xlat9 * u_xlat22 + 1.0;
					    u_xlat9 = u_xlat9 * u_xlat16;
					    u_xlat2.x = u_xlat2.x * u_xlat9;
					    u_xlat9 = u_xlat23 * u_xlat23;
					    u_xlat9 = max(u_xlat9, 0.00200000009);
					    u_xlat9 = u_xlat9 * 0.280000001;
					    u_xlat9 = (-u_xlat9) * u_xlat23 + 1.0;
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat21 = u_xlat21 + _Glossiness;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat2.xzw = u_xlat2.xxx * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat9);
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat22) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xzw + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _BumpScale;
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_5[4];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_7;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[4];
						vec4 unity_IndirectSpecColor;
						vec4 unused_2_2[18];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					bool u_xlatb4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					bool u_xlatb13;
					vec3 u_xlat15;
					vec3 u_xlat16;
					float u_xlat20;
					float u_xlat22;
					float u_xlat27;
					float u_xlat29;
					float u_xlat31;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat27 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat2.xy = u_xlat2.xy * vec2(_BumpScale);
					    u_xlat20 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat20 = min(u_xlat20, 1.0);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat20 = sqrt(u_xlat20);
					    u_xlat3.xyz = u_xlat2.yyy * vs_TEXCOORD3.xyz;
					    u_xlat2.xyw = vs_TEXCOORD2.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat20) + u_xlat2.xyw;
					    u_xlat29 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat29 = inversesqrt(u_xlat29);
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat12.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlatb4 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb4){
					        u_xlatb13 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat15.x = vs_TEXCOORD2.w;
					        u_xlat15.y = vs_TEXCOORD3.w;
					        u_xlat15.z = vs_TEXCOORD4.w;
					        u_xlat13.xyz = (bool(u_xlatb13)) ? u_xlat5.xyz : u_xlat15.xyz;
					        u_xlat13.xyz = u_xlat13.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat5.yzw = u_xlat13.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat13.x = u_xlat5.y * 0.25 + 0.75;
					        u_xlat22 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat5.x = max(u_xlat22, u_xlat13.x);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					    } else {
					        u_xlat5.x = float(1.0);
					        u_xlat5.y = float(1.0);
					        u_xlat5.z = float(1.0);
					        u_xlat5.w = float(1.0);
					    }
					    u_xlat13.x = dot(u_xlat5, unity_OcclusionMaskSelector);
					    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
					    u_xlat5 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat22 = (-_OcclusionStrength) + 1.0;
					    u_xlat22 = u_xlat5.y * _OcclusionStrength + u_xlat22;
					    u_xlat5.xyz = u_xlat13.xxx * _LightColor0.xyz;
					    if(u_xlatb4){
					        u_xlatb4 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat16.x = vs_TEXCOORD2.w;
					        u_xlat16.y = vs_TEXCOORD3.w;
					        u_xlat16.z = vs_TEXCOORD4.w;
					        u_xlat4.xyw = (bool(u_xlatb4)) ? u_xlat6.xyz : u_xlat16.xyz;
					        u_xlat4.xyw = u_xlat4.xyw + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat4.xyw * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat4.x = u_xlat6.y * 0.25;
					        u_xlat13.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat31 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat4.x = max(u_xlat13.x, u_xlat4.x);
					        u_xlat6.x = min(u_xlat31, u_xlat4.x);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					        u_xlat4.xyw = u_xlat6.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat8 = texture(unity_ProbeVolumeSH, u_xlat4.xyw);
					        u_xlat4.xyw = u_xlat6.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat4.xyw);
					        u_xlat2.w = 1.0;
					        u_xlat7.x = dot(u_xlat7, u_xlat2);
					        u_xlat7.y = dot(u_xlat8, u_xlat2);
					        u_xlat7.z = dot(u_xlat6, u_xlat2);
					    } else {
					        u_xlat2.w = 1.0;
					        u_xlat7.x = dot(unity_SHAr, u_xlat2);
					        u_xlat7.y = dot(unity_SHAg, u_xlat2);
					        u_xlat7.z = dot(unity_SHAb, u_xlat2);
					    }
					    u_xlat4.xyw = u_xlat7.xyz + vs_TEXCOORD5.xyz;
					    u_xlat4.xyw = max(u_xlat4.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyw = log2(u_xlat4.xyw);
					    u_xlat4.xyw = u_xlat4.xyw * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat4.xyw = exp2(u_xlat4.xyw);
					    u_xlat4.xyw = u_xlat4.xyw * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat4.xyw = max(u_xlat4.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat6.xyz = vec3(u_xlat22) * unity_IndirectSpecColor.xyz;
					    u_xlat29 = (-u_xlat1.w) * _GlossMapScale + 1.0;
					    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat3.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat3.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat3.x = max(u_xlat3.x, 0.00100000005);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat3.x = dot(u_xlat2.xyz, (-u_xlat12.xyz));
					    u_xlat2.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat11 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat11 = dot(vec2(u_xlat11), vec2(u_xlat29));
					    u_xlat11 = u_xlat11 + -0.5;
					    u_xlat20 = (-u_xlat2.x) + 1.0;
					    u_xlat12.x = u_xlat20 * u_xlat20;
					    u_xlat12.x = u_xlat12.x * u_xlat12.x;
					    u_xlat20 = u_xlat20 * u_xlat12.x;
					    u_xlat20 = u_xlat11 * u_xlat20 + 1.0;
					    u_xlat3.x = -abs(u_xlat3.x) + 1.0;
					    u_xlat12.x = u_xlat3.x * u_xlat3.x;
					    u_xlat12.x = u_xlat12.x * u_xlat12.x;
					    u_xlat3.x = u_xlat3.x * u_xlat12.x;
					    u_xlat11 = u_xlat11 * u_xlat3.x + 1.0;
					    u_xlat11 = u_xlat11 * u_xlat20;
					    u_xlat2.x = u_xlat2.x * u_xlat11;
					    u_xlat11 = u_xlat29 * u_xlat29;
					    u_xlat11 = max(u_xlat11, 0.00200000009);
					    u_xlat11 = u_xlat11 * 0.280000001;
					    u_xlat11 = (-u_xlat11) * u_xlat29 + 1.0;
					    u_xlat27 = u_xlat1.w * _GlossMapScale + (-u_xlat27);
					    u_xlat27 = u_xlat27 + 1.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.xzw = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat2.xzw = u_xlat4.xyw * vec3(u_xlat22) + u_xlat2.xzw;
					    u_xlat12.xyz = u_xlat6.xyz * vec3(u_xlat11);
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(u_xlat27);
					    u_xlat0.xyz = u_xlat3.xxx * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat12.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xzw + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_5[4];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_7;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[4];
						vec4 unity_IndirectSpecColor;
						vec4 unused_2_2[18];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					bool u_xlatb4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat10;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat14;
					float u_xlat18;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					bool u_xlatb27;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat24 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat25 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * vs_TEXCOORD4.xyz;
					    u_xlat25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat3.xyz = vec3(u_xlat25) * vs_TEXCOORD1.xyz;
					    u_xlatb27 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb27){
					        u_xlatb4 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat12.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat12.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat12.xyz;
					        u_xlat12.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat12.xyz;
					        u_xlat12.xyz = u_xlat12.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat13.x = vs_TEXCOORD2.w;
					        u_xlat13.y = vs_TEXCOORD3.w;
					        u_xlat13.z = vs_TEXCOORD4.w;
					        u_xlat4.xyz = (bool(u_xlatb4)) ? u_xlat12.xyz : u_xlat13.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat12.x = u_xlat4.y * 0.25 + 0.75;
					        u_xlat5.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat12.x, u_xlat5.x);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat4.x = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat5 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat12.x = (-_OcclusionStrength) + 1.0;
					    u_xlat12.x = u_xlat5.y * _OcclusionStrength + u_xlat12.x;
					    u_xlat4.xzw = u_xlat4.xxx * _LightColor0.xyz;
					    if(u_xlatb27){
					        u_xlatb27 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat14.x = vs_TEXCOORD2.w;
					        u_xlat14.y = vs_TEXCOORD3.w;
					        u_xlat14.z = vs_TEXCOORD4.w;
					        u_xlat5.xyz = (bool(u_xlatb27)) ? u_xlat5.xyz : u_xlat14.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat5.yzw = u_xlat5.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat27 = u_xlat5.y * 0.25;
					        u_xlat13.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat6.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat27 = max(u_xlat27, u_xlat13.x);
					        u_xlat5.x = min(u_xlat6.x, u_xlat27);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					        u_xlat7.xyz = u_xlat5.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat7.xyz);
					        u_xlat5.xyz = u_xlat5.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xyz);
					        u_xlat2.w = 1.0;
					        u_xlat6.x = dot(u_xlat6, u_xlat2);
					        u_xlat6.y = dot(u_xlat7, u_xlat2);
					        u_xlat6.z = dot(u_xlat5, u_xlat2);
					    } else {
					        u_xlat2.w = 1.0;
					        u_xlat6.x = dot(unity_SHAr, u_xlat2);
					        u_xlat6.y = dot(unity_SHAg, u_xlat2);
					        u_xlat6.z = dot(unity_SHAb, u_xlat2);
					    }
					    u_xlat5.xyz = u_xlat6.xyz + vs_TEXCOORD5.xyz;
					    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat5.xyz = log2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat6.xyz = u_xlat12.xxx * unity_IndirectSpecColor.xyz;
					    u_xlat26 = (-_Glossiness) + 1.0;
					    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;
					    u_xlat25 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat25 = max(u_xlat25, 0.00100000005);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat7.xyz = vec3(u_xlat25) * u_xlat7.xyz;
					    u_xlat25 = dot(u_xlat2.xyz, (-u_xlat3.xyz));
					    u_xlat2.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat10 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);
					    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
					    u_xlat10 = u_xlat10 * u_xlat10;
					    u_xlat10 = dot(vec2(u_xlat10), vec2(u_xlat26));
					    u_xlat10 = u_xlat10 + -0.5;
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat3.x = u_xlat18 * u_xlat18;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat18 = u_xlat18 * u_xlat3.x;
					    u_xlat18 = u_xlat10 * u_xlat18 + 1.0;
					    u_xlat25 = -abs(u_xlat25) + 1.0;
					    u_xlat3.x = u_xlat25 * u_xlat25;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat10 = u_xlat10 * u_xlat25 + 1.0;
					    u_xlat10 = u_xlat10 * u_xlat18;
					    u_xlat2.x = u_xlat2.x * u_xlat10;
					    u_xlat10 = u_xlat26 * u_xlat26;
					    u_xlat10 = max(u_xlat10, 0.00200000009);
					    u_xlat10 = u_xlat10 * 0.280000001;
					    u_xlat10 = (-u_xlat10) * u_xlat26 + 1.0;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 + _Glossiness;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat2.xzw = u_xlat2.xxx * u_xlat4.xzw;
					    u_xlat2.xzw = u_xlat5.xyz * u_xlat12.xxx + u_xlat2.xzw;
					    u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat10);
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xzw + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _BumpScale;
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[4];
						vec4 unity_IndirectSpecColor;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					bool u_xlatb4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat9;
					vec3 u_xlat11;
					float u_xlat16;
					float u_xlat21;
					float u_xlat23;
					float u_xlat24;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat21 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat2.xy = u_xlat2.xy * vec2(_BumpScale);
					    u_xlat16 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat16 = min(u_xlat16, 1.0);
					    u_xlat16 = (-u_xlat16) + 1.0;
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat3.xyz = u_xlat2.yyy * vs_TEXCOORD3.xyz;
					    u_xlat2.xyw = vs_TEXCOORD2.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat16) + u_xlat2.xyw;
					    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat2.xyz = vec3(u_xlat23) * u_xlat2.xyz;
					    u_xlat23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat3.xyz = vec3(u_xlat23) * vs_TEXCOORD1.xyz;
					    u_xlat11.x = vs_TEXCOORD2.w;
					    u_xlat11.y = vs_TEXCOORD3.w;
					    u_xlat11.z = vs_TEXCOORD4.w;
					    u_xlat5.xyz = (-u_xlat11.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6.x = unity_MatrixV[0].z;
					    u_xlat6.y = unity_MatrixV[1].z;
					    u_xlat6.z = unity_MatrixV[2].z;
					    u_xlat24 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat5.xyz = u_xlat11.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat4.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat4.x = (-u_xlat24) + u_xlat4.x;
					    u_xlat24 = unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat24;
					    u_xlat24 = u_xlat24 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlatb4 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb4){
					        u_xlatb4 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb4)) ? u_xlat5.xyz : u_xlat11.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat11.x = u_xlat4.y * 0.25 + 0.75;
					        u_xlat5.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat11.x, u_xlat5.x);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat4.x = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat11.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat5 = texture(_ShadowMapTexture, u_xlat11.xy);
					    u_xlat4.x = u_xlat4.x + (-u_xlat5.x);
					    u_xlat24 = u_xlat24 * u_xlat4.x + u_xlat5.x;
					    u_xlat4 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = (-_OcclusionStrength) + 1.0;
					    u_xlat4.x = u_xlat4.y * _OcclusionStrength + u_xlat4.x;
					    u_xlat11.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * unity_IndirectSpecColor.xyz;
					    u_xlat24 = (-u_xlat1.w) * _GlossMapScale + 1.0;
					    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat23) + _WorldSpaceLightPos0.xyz;
					    u_xlat23 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat23 = max(u_xlat23, 0.00100000005);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat6.xyz = vec3(u_xlat23) * u_xlat6.xyz;
					    u_xlat23 = dot(u_xlat2.xyz, (-u_xlat3.xyz));
					    u_xlat2.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat9 = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat9 = dot(vec2(u_xlat9), vec2(u_xlat24));
					    u_xlat9 = u_xlat9 + -0.5;
					    u_xlat16 = (-u_xlat2.x) + 1.0;
					    u_xlat3.x = u_xlat16 * u_xlat16;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat16 = u_xlat16 * u_xlat3.x;
					    u_xlat16 = u_xlat9 * u_xlat16 + 1.0;
					    u_xlat23 = -abs(u_xlat23) + 1.0;
					    u_xlat3.x = u_xlat23 * u_xlat23;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat23 = u_xlat23 * u_xlat3.x;
					    u_xlat9 = u_xlat9 * u_xlat23 + 1.0;
					    u_xlat9 = u_xlat9 * u_xlat16;
					    u_xlat2.x = u_xlat2.x * u_xlat9;
					    u_xlat9 = u_xlat24 * u_xlat24;
					    u_xlat9 = max(u_xlat9, 0.00200000009);
					    u_xlat9 = u_xlat9 * 0.280000001;
					    u_xlat9 = (-u_xlat9) * u_xlat24 + 1.0;
					    u_xlat21 = u_xlat1.w * _GlossMapScale + (-u_xlat21);
					    u_xlat21 = u_xlat21 + 1.0;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat11.xyz;
					    u_xlat2.xyz = u_xlat5.xyz * vec3(u_xlat9);
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat23) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[4];
						vec4 unity_IndirectSpecColor;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat9;
					vec3 u_xlat11;
					float u_xlat16;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					float u_xlat24;
					bool u_xlatb24;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat21 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat22 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * vs_TEXCOORD4.xyz;
					    u_xlat22 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat3.xyz = vec3(u_xlat22) * vs_TEXCOORD1.xyz;
					    u_xlat11.x = vs_TEXCOORD2.w;
					    u_xlat11.y = vs_TEXCOORD3.w;
					    u_xlat11.z = vs_TEXCOORD4.w;
					    u_xlat5.xyz = (-u_xlat11.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6.x = unity_MatrixV[0].z;
					    u_xlat6.y = unity_MatrixV[1].z;
					    u_xlat6.z = unity_MatrixV[2].z;
					    u_xlat23 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat5.xyz = u_xlat11.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = (-u_xlat23) + u_xlat24;
					    u_xlat23 = unity_ShadowFadeCenterAndType.w * u_xlat24 + u_xlat23;
					    u_xlat23 = u_xlat23 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlatb24 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb24){
					        u_xlatb24 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb24)) ? u_xlat5.xyz : u_xlat11.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat24 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat11.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat24, u_xlat11.x);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat24 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat4 = texture(_ShadowMapTexture, u_xlat4.xy);
					    u_xlat24 = u_xlat24 + (-u_xlat4.x);
					    u_xlat23 = u_xlat23 * u_xlat24 + u_xlat4.x;
					    u_xlat4 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat24 = (-_OcclusionStrength) + 1.0;
					    u_xlat24 = u_xlat4.y * _OcclusionStrength + u_xlat24;
					    u_xlat4.xyz = vec3(u_xlat23) * _LightColor0.xyz;
					    u_xlat5.xyz = vec3(u_xlat24) * unity_IndirectSpecColor.xyz;
					    u_xlat23 = (-_Glossiness) + 1.0;
					    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat22 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat22 = max(u_xlat22, 0.00100000005);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat6.xyz = vec3(u_xlat22) * u_xlat6.xyz;
					    u_xlat22 = dot(u_xlat2.xyz, (-u_xlat3.xyz));
					    u_xlat2.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat9 = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat9 = dot(vec2(u_xlat9), vec2(u_xlat23));
					    u_xlat9 = u_xlat9 + -0.5;
					    u_xlat16 = (-u_xlat2.x) + 1.0;
					    u_xlat3.x = u_xlat16 * u_xlat16;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat16 = u_xlat16 * u_xlat3.x;
					    u_xlat16 = u_xlat9 * u_xlat16 + 1.0;
					    u_xlat22 = -abs(u_xlat22) + 1.0;
					    u_xlat3.x = u_xlat22 * u_xlat22;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat22 = u_xlat22 * u_xlat3.x;
					    u_xlat9 = u_xlat9 * u_xlat22 + 1.0;
					    u_xlat9 = u_xlat9 * u_xlat16;
					    u_xlat2.x = u_xlat2.x * u_xlat9;
					    u_xlat9 = u_xlat23 * u_xlat23;
					    u_xlat9 = max(u_xlat9, 0.00200000009);
					    u_xlat9 = u_xlat9 * 0.280000001;
					    u_xlat9 = (-u_xlat9) * u_xlat23 + 1.0;
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat21 = u_xlat21 + _Glossiness;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat2.xzw = u_xlat2.xxx * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat9);
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat22) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xzw + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _BumpScale;
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[4];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_7;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[4];
						vec4 unity_IndirectSpecColor;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					bool u_xlatb4;
					vec4 u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat14;
					bool u_xlatb14;
					float u_xlat20;
					vec2 u_xlat23;
					float u_xlat27;
					float u_xlat29;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat27 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat2.xy = u_xlat2.xy * vec2(_BumpScale);
					    u_xlat20 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat20 = min(u_xlat20, 1.0);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat20 = sqrt(u_xlat20);
					    u_xlat3.xyz = u_xlat2.yyy * vs_TEXCOORD3.xyz;
					    u_xlat2.xyw = vs_TEXCOORD2.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat20) + u_xlat2.xyw;
					    u_xlat29 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat29 = inversesqrt(u_xlat29);
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat12.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat13.x = vs_TEXCOORD2.w;
					    u_xlat13.y = vs_TEXCOORD3.w;
					    u_xlat13.z = vs_TEXCOORD4.w;
					    u_xlat5.xyz = (-u_xlat13.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6.x = unity_MatrixV[0].z;
					    u_xlat6.y = unity_MatrixV[1].z;
					    u_xlat6.z = unity_MatrixV[2].z;
					    u_xlat4.x = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat5.xyz = u_xlat13.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat5.x = (-u_xlat4.x) + u_xlat5.x;
					    u_xlat4.x = unity_ShadowFadeCenterAndType.w * u_xlat5.x + u_xlat4.x;
					    u_xlat4.x = u_xlat4.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlatb5 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb5){
					        u_xlatb14 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat14.xyz = (bool(u_xlatb14)) ? u_xlat6.xyz : u_xlat13.xyz;
					        u_xlat14.xyz = u_xlat14.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat14.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat14.x = u_xlat6.y * 0.25 + 0.75;
					        u_xlat23.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat6.x = max(u_xlat23.x, u_xlat14.x);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					    } else {
					        u_xlat6.x = float(1.0);
					        u_xlat6.y = float(1.0);
					        u_xlat6.z = float(1.0);
					        u_xlat6.w = float(1.0);
					    }
					    u_xlat14.x = dot(u_xlat6, unity_OcclusionMaskSelector);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat23.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat6 = texture(_ShadowMapTexture, u_xlat23.xy);
					    u_xlat14.x = u_xlat14.x + (-u_xlat6.x);
					    u_xlat4.x = u_xlat4.x * u_xlat14.x + u_xlat6.x;
					    u_xlat6 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat14.x = (-_OcclusionStrength) + 1.0;
					    u_xlat14.x = u_xlat6.y * _OcclusionStrength + u_xlat14.x;
					    u_xlat6.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    if(u_xlatb5){
					        u_xlatb4 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xzw = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xzw = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat5.xzw;
					        u_xlat5.xzw = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat5.xzw;
					        u_xlat5.xzw = u_xlat5.xzw + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb4)) ? u_xlat5.xzw : u_xlat13.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat13.x = u_xlat4.y * 0.25;
					        u_xlat5.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat23.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat13.x = max(u_xlat13.x, u_xlat5.x);
					        u_xlat4.x = min(u_xlat23.x, u_xlat13.x);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					        u_xlat5.xzw = u_xlat4.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat8 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					        u_xlat4.xyz = u_xlat4.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat2.w = 1.0;
					        u_xlat7.x = dot(u_xlat7, u_xlat2);
					        u_xlat7.y = dot(u_xlat8, u_xlat2);
					        u_xlat7.z = dot(u_xlat4, u_xlat2);
					    } else {
					        u_xlat2.w = 1.0;
					        u_xlat7.x = dot(unity_SHAr, u_xlat2);
					        u_xlat7.y = dot(unity_SHAg, u_xlat2);
					        u_xlat7.z = dot(unity_SHAb, u_xlat2);
					    }
					    u_xlat4.xyz = u_xlat7.xyz + vs_TEXCOORD5.xyz;
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat5.xzw = u_xlat14.xxx * unity_IndirectSpecColor.xyz;
					    u_xlat29 = (-u_xlat1.w) * _GlossMapScale + 1.0;
					    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat3.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat3.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat3.x = max(u_xlat3.x, 0.00100000005);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat3.x = dot(u_xlat2.xyz, (-u_xlat12.xyz));
					    u_xlat2.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat11 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat11 = dot(vec2(u_xlat11), vec2(u_xlat29));
					    u_xlat11 = u_xlat11 + -0.5;
					    u_xlat20 = (-u_xlat2.x) + 1.0;
					    u_xlat12.x = u_xlat20 * u_xlat20;
					    u_xlat12.x = u_xlat12.x * u_xlat12.x;
					    u_xlat20 = u_xlat20 * u_xlat12.x;
					    u_xlat20 = u_xlat11 * u_xlat20 + 1.0;
					    u_xlat3.x = -abs(u_xlat3.x) + 1.0;
					    u_xlat12.x = u_xlat3.x * u_xlat3.x;
					    u_xlat12.x = u_xlat12.x * u_xlat12.x;
					    u_xlat3.x = u_xlat3.x * u_xlat12.x;
					    u_xlat11 = u_xlat11 * u_xlat3.x + 1.0;
					    u_xlat11 = u_xlat11 * u_xlat20;
					    u_xlat2.x = u_xlat2.x * u_xlat11;
					    u_xlat11 = u_xlat29 * u_xlat29;
					    u_xlat11 = max(u_xlat11, 0.00200000009);
					    u_xlat11 = u_xlat11 * 0.280000001;
					    u_xlat11 = (-u_xlat11) * u_xlat29 + 1.0;
					    u_xlat27 = u_xlat1.w * _GlossMapScale + (-u_xlat27);
					    u_xlat27 = u_xlat27 + 1.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.xzw = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat2.xzw = u_xlat4.xyz * u_xlat14.xxx + u_xlat2.xzw;
					    u_xlat12.xyz = u_xlat5.xzw * vec3(u_xlat11);
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(u_xlat27);
					    u_xlat0.xyz = u_xlat3.xxx * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat12.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xzw + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[4];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_7;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[4];
						vec4 unity_IndirectSpecColor;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					bool u_xlatb4;
					vec4 u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat10;
					vec3 u_xlat12;
					vec3 u_xlat13;
					float u_xlat18;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					bool u_xlatb27;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat24 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat25 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * vs_TEXCOORD4.xyz;
					    u_xlat25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat3.xyz = vec3(u_xlat25) * vs_TEXCOORD1.xyz;
					    u_xlat12.x = vs_TEXCOORD2.w;
					    u_xlat12.y = vs_TEXCOORD3.w;
					    u_xlat12.z = vs_TEXCOORD4.w;
					    u_xlat5.xyz = (-u_xlat12.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6.x = unity_MatrixV[0].z;
					    u_xlat6.y = unity_MatrixV[1].z;
					    u_xlat6.z = unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat5.xyz = u_xlat12.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat4.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat4.x = (-u_xlat27) + u_xlat4.x;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlatb4 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb4){
					        u_xlatb5 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat13.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat13.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat13.xyz;
					        u_xlat13.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat13.xyz;
					        u_xlat13.xyz = u_xlat13.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat5.xyz = (bool(u_xlatb5)) ? u_xlat13.xyz : u_xlat12.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat5.yzw = u_xlat5.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat13.x = u_xlat5.y * 0.25 + 0.75;
					        u_xlat6.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat5.x = max(u_xlat13.x, u_xlat6.x);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					    } else {
					        u_xlat5.x = float(1.0);
					        u_xlat5.y = float(1.0);
					        u_xlat5.z = float(1.0);
					        u_xlat5.w = float(1.0);
					    }
					    u_xlat5.x = dot(u_xlat5, unity_OcclusionMaskSelector);
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat13.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat6 = texture(_ShadowMapTexture, u_xlat13.xy);
					    u_xlat5.x = u_xlat5.x + (-u_xlat6.x);
					    u_xlat27 = u_xlat27 * u_xlat5.x + u_xlat6.x;
					    u_xlat5 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat5.x = (-_OcclusionStrength) + 1.0;
					    u_xlat5.x = u_xlat5.y * _OcclusionStrength + u_xlat5.x;
					    u_xlat13.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    if(u_xlatb4){
					        u_xlatb27 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb27)) ? u_xlat6.xyz : u_xlat12.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat27 = u_xlat4.y * 0.25;
					        u_xlat12.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat6.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat27 = max(u_xlat27, u_xlat12.x);
					        u_xlat4.x = min(u_xlat6.x, u_xlat27);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					        u_xlat7.xyz = u_xlat4.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat7.xyz);
					        u_xlat4.xyz = u_xlat4.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat2.w = 1.0;
					        u_xlat6.x = dot(u_xlat6, u_xlat2);
					        u_xlat6.y = dot(u_xlat7, u_xlat2);
					        u_xlat6.z = dot(u_xlat4, u_xlat2);
					    } else {
					        u_xlat2.w = 1.0;
					        u_xlat6.x = dot(unity_SHAr, u_xlat2);
					        u_xlat6.y = dot(unity_SHAg, u_xlat2);
					        u_xlat6.z = dot(unity_SHAb, u_xlat2);
					    }
					    u_xlat4.xyz = u_xlat6.xyz + vs_TEXCOORD5.xyz;
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat6.xyz = u_xlat5.xxx * unity_IndirectSpecColor.xyz;
					    u_xlat26 = (-_Glossiness) + 1.0;
					    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;
					    u_xlat25 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat25 = max(u_xlat25, 0.00100000005);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat7.xyz = vec3(u_xlat25) * u_xlat7.xyz;
					    u_xlat25 = dot(u_xlat2.xyz, (-u_xlat3.xyz));
					    u_xlat2.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat10 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);
					    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
					    u_xlat10 = u_xlat10 * u_xlat10;
					    u_xlat10 = dot(vec2(u_xlat10), vec2(u_xlat26));
					    u_xlat10 = u_xlat10 + -0.5;
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat3.x = u_xlat18 * u_xlat18;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat18 = u_xlat18 * u_xlat3.x;
					    u_xlat18 = u_xlat10 * u_xlat18 + 1.0;
					    u_xlat25 = -abs(u_xlat25) + 1.0;
					    u_xlat3.x = u_xlat25 * u_xlat25;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat10 = u_xlat10 * u_xlat25 + 1.0;
					    u_xlat10 = u_xlat10 * u_xlat18;
					    u_xlat2.x = u_xlat2.x * u_xlat10;
					    u_xlat10 = u_xlat26 * u_xlat26;
					    u_xlat10 = max(u_xlat10, 0.00200000009);
					    u_xlat10 = u_xlat10 * 0.280000001;
					    u_xlat10 = (-u_xlat10) * u_xlat26 + 1.0;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 + _Glossiness;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat2.xzw = u_xlat2.xxx * u_xlat13.xyz;
					    u_xlat2.xzw = u_xlat4.xyz * u_xlat5.xxx + u_xlat2.xzw;
					    u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat10);
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xzw + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _BumpScale;
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_3;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[4];
						vec4 unity_IndirectSpecColor;
						vec4 unused_2_2[18];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat9;
					vec3 u_xlat11;
					vec3 u_xlat12;
					float u_xlat16;
					float u_xlat21;
					float u_xlat23;
					float u_xlat24;
					bool u_xlatb24;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat21 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat2.xy = u_xlat2.xy * vec2(_BumpScale);
					    u_xlat16 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat16 = min(u_xlat16, 1.0);
					    u_xlat16 = (-u_xlat16) + 1.0;
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat3.xyz = u_xlat2.yyy * vs_TEXCOORD3.xyz;
					    u_xlat2.xyw = vs_TEXCOORD2.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat16) + u_xlat2.xyw;
					    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat2.xyz = vec3(u_xlat23) * u_xlat2.xyz;
					    u_xlat23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat3.xyz = vec3(u_xlat23) * vs_TEXCOORD1.xyz;
					    u_xlatb24 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb24){
					        u_xlatb24 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat12.x = vs_TEXCOORD2.w;
					        u_xlat12.y = vs_TEXCOORD3.w;
					        u_xlat12.z = vs_TEXCOORD4.w;
					        u_xlat4.xyz = (bool(u_xlatb24)) ? u_xlat4.xyz : u_xlat12.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat24 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat11.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat24, u_xlat11.x);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat24 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat4 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = (-_OcclusionStrength) + 1.0;
					    u_xlat4.x = u_xlat4.y * _OcclusionStrength + u_xlat4.x;
					    u_xlat11.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * unity_IndirectSpecColor.xyz;
					    u_xlat24 = (-u_xlat1.w) * _GlossMapScale + 1.0;
					    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat23) + _WorldSpaceLightPos0.xyz;
					    u_xlat23 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat23 = max(u_xlat23, 0.00100000005);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat6.xyz = vec3(u_xlat23) * u_xlat6.xyz;
					    u_xlat23 = dot(u_xlat2.xyz, (-u_xlat3.xyz));
					    u_xlat2.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat9 = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat9 = dot(vec2(u_xlat9), vec2(u_xlat24));
					    u_xlat9 = u_xlat9 + -0.5;
					    u_xlat16 = (-u_xlat2.x) + 1.0;
					    u_xlat3.x = u_xlat16 * u_xlat16;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat16 = u_xlat16 * u_xlat3.x;
					    u_xlat16 = u_xlat9 * u_xlat16 + 1.0;
					    u_xlat23 = -abs(u_xlat23) + 1.0;
					    u_xlat3.x = u_xlat23 * u_xlat23;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat23 = u_xlat23 * u_xlat3.x;
					    u_xlat9 = u_xlat9 * u_xlat23 + 1.0;
					    u_xlat9 = u_xlat9 * u_xlat16;
					    u_xlat2.x = u_xlat2.x * u_xlat9;
					    u_xlat9 = u_xlat24 * u_xlat24;
					    u_xlat9 = max(u_xlat9, 0.00200000009);
					    u_xlat9 = u_xlat9 * 0.280000001;
					    u_xlat9 = (-u_xlat9) * u_xlat24 + 1.0;
					    u_xlat21 = u_xlat1.w * _GlossMapScale + (-u_xlat21);
					    u_xlat21 = u_xlat21 + 1.0;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat11.xyz;
					    u_xlat2.xyz = u_xlat5.xyz * vec3(u_xlat9);
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat23) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_3;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[4];
						vec4 unity_IndirectSpecColor;
						vec4 unused_2_2[22];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat9;
					vec3 u_xlat12;
					float u_xlat16;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					bool u_xlatb23;
					float u_xlat24;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat21 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat22 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * vs_TEXCOORD4.xyz;
					    u_xlat22 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat3.xyz = vec3(u_xlat22) * vs_TEXCOORD1.xyz;
					    u_xlatb23 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb23){
					        u_xlatb23 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat12.x = vs_TEXCOORD2.w;
					        u_xlat12.y = vs_TEXCOORD3.w;
					        u_xlat12.z = vs_TEXCOORD4.w;
					        u_xlat4.xyz = (bool(u_xlatb23)) ? u_xlat4.xyz : u_xlat12.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat23 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat24 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat23, u_xlat24);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat23 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat4 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat24 = (-_OcclusionStrength) + 1.0;
					    u_xlat24 = u_xlat4.y * _OcclusionStrength + u_xlat24;
					    u_xlat4.xyz = vec3(u_xlat23) * _LightColor0.xyz;
					    u_xlat5.xyz = vec3(u_xlat24) * unity_IndirectSpecColor.xyz;
					    u_xlat23 = (-_Glossiness) + 1.0;
					    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat22 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat22 = max(u_xlat22, 0.00100000005);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat6.xyz = vec3(u_xlat22) * u_xlat6.xyz;
					    u_xlat22 = dot(u_xlat2.xyz, (-u_xlat3.xyz));
					    u_xlat2.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat9 = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat9 = dot(vec2(u_xlat9), vec2(u_xlat23));
					    u_xlat9 = u_xlat9 + -0.5;
					    u_xlat16 = (-u_xlat2.x) + 1.0;
					    u_xlat3.x = u_xlat16 * u_xlat16;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat16 = u_xlat16 * u_xlat3.x;
					    u_xlat16 = u_xlat9 * u_xlat16 + 1.0;
					    u_xlat22 = -abs(u_xlat22) + 1.0;
					    u_xlat3.x = u_xlat22 * u_xlat22;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat22 = u_xlat22 * u_xlat3.x;
					    u_xlat9 = u_xlat9 * u_xlat22 + 1.0;
					    u_xlat9 = u_xlat9 * u_xlat16;
					    u_xlat2.x = u_xlat2.x * u_xlat9;
					    u_xlat9 = u_xlat23 * u_xlat23;
					    u_xlat9 = max(u_xlat9, 0.00200000009);
					    u_xlat9 = u_xlat9 * 0.280000001;
					    u_xlat9 = (-u_xlat9) * u_xlat23 + 1.0;
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat21 = u_xlat21 + _Glossiness;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat2.xzw = u_xlat2.xxx * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat9);
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat22) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xzw + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "LIGHTPROBE_SH" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _BumpScale;
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_5[4];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_7;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[4];
						vec4 unity_IndirectSpecColor;
						vec4 unused_2_2[22];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					bool u_xlatb4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					bool u_xlatb13;
					vec3 u_xlat15;
					vec3 u_xlat16;
					float u_xlat20;
					float u_xlat22;
					float u_xlat27;
					float u_xlat29;
					float u_xlat31;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat27 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat2.xy = u_xlat2.xy * vec2(_BumpScale);
					    u_xlat20 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat20 = min(u_xlat20, 1.0);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat20 = sqrt(u_xlat20);
					    u_xlat3.xyz = u_xlat2.yyy * vs_TEXCOORD3.xyz;
					    u_xlat2.xyw = vs_TEXCOORD2.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat20) + u_xlat2.xyw;
					    u_xlat29 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat29 = inversesqrt(u_xlat29);
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat12.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlatb4 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb4){
					        u_xlatb13 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat15.x = vs_TEXCOORD2.w;
					        u_xlat15.y = vs_TEXCOORD3.w;
					        u_xlat15.z = vs_TEXCOORD4.w;
					        u_xlat13.xyz = (bool(u_xlatb13)) ? u_xlat5.xyz : u_xlat15.xyz;
					        u_xlat13.xyz = u_xlat13.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat5.yzw = u_xlat13.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat13.x = u_xlat5.y * 0.25 + 0.75;
					        u_xlat22 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat5.x = max(u_xlat22, u_xlat13.x);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					    } else {
					        u_xlat5.x = float(1.0);
					        u_xlat5.y = float(1.0);
					        u_xlat5.z = float(1.0);
					        u_xlat5.w = float(1.0);
					    }
					    u_xlat13.x = dot(u_xlat5, unity_OcclusionMaskSelector);
					    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
					    u_xlat5 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat22 = (-_OcclusionStrength) + 1.0;
					    u_xlat22 = u_xlat5.y * _OcclusionStrength + u_xlat22;
					    u_xlat5.xyz = u_xlat13.xxx * _LightColor0.xyz;
					    if(u_xlatb4){
					        u_xlatb4 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat16.x = vs_TEXCOORD2.w;
					        u_xlat16.y = vs_TEXCOORD3.w;
					        u_xlat16.z = vs_TEXCOORD4.w;
					        u_xlat4.xyw = (bool(u_xlatb4)) ? u_xlat6.xyz : u_xlat16.xyz;
					        u_xlat4.xyw = u_xlat4.xyw + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat4.xyw * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat4.x = u_xlat6.y * 0.25;
					        u_xlat13.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat31 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat4.x = max(u_xlat13.x, u_xlat4.x);
					        u_xlat6.x = min(u_xlat31, u_xlat4.x);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					        u_xlat4.xyw = u_xlat6.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat8 = texture(unity_ProbeVolumeSH, u_xlat4.xyw);
					        u_xlat4.xyw = u_xlat6.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat4.xyw);
					        u_xlat2.w = 1.0;
					        u_xlat7.x = dot(u_xlat7, u_xlat2);
					        u_xlat7.y = dot(u_xlat8, u_xlat2);
					        u_xlat7.z = dot(u_xlat6, u_xlat2);
					    } else {
					        u_xlat2.w = 1.0;
					        u_xlat7.x = dot(unity_SHAr, u_xlat2);
					        u_xlat7.y = dot(unity_SHAg, u_xlat2);
					        u_xlat7.z = dot(unity_SHAb, u_xlat2);
					    }
					    u_xlat4.xyw = u_xlat7.xyz + vs_TEXCOORD5.xyz;
					    u_xlat4.xyw = max(u_xlat4.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyw = log2(u_xlat4.xyw);
					    u_xlat4.xyw = u_xlat4.xyw * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat4.xyw = exp2(u_xlat4.xyw);
					    u_xlat4.xyw = u_xlat4.xyw * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat4.xyw = max(u_xlat4.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat6.xyz = vec3(u_xlat22) * unity_IndirectSpecColor.xyz;
					    u_xlat29 = (-u_xlat1.w) * _GlossMapScale + 1.0;
					    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat3.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat3.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat3.x = max(u_xlat3.x, 0.00100000005);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat3.x = dot(u_xlat2.xyz, (-u_xlat12.xyz));
					    u_xlat2.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat11 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat11 = dot(vec2(u_xlat11), vec2(u_xlat29));
					    u_xlat11 = u_xlat11 + -0.5;
					    u_xlat20 = (-u_xlat2.x) + 1.0;
					    u_xlat12.x = u_xlat20 * u_xlat20;
					    u_xlat12.x = u_xlat12.x * u_xlat12.x;
					    u_xlat20 = u_xlat20 * u_xlat12.x;
					    u_xlat20 = u_xlat11 * u_xlat20 + 1.0;
					    u_xlat3.x = -abs(u_xlat3.x) + 1.0;
					    u_xlat12.x = u_xlat3.x * u_xlat3.x;
					    u_xlat12.x = u_xlat12.x * u_xlat12.x;
					    u_xlat3.x = u_xlat3.x * u_xlat12.x;
					    u_xlat11 = u_xlat11 * u_xlat3.x + 1.0;
					    u_xlat11 = u_xlat11 * u_xlat20;
					    u_xlat2.x = u_xlat2.x * u_xlat11;
					    u_xlat11 = u_xlat29 * u_xlat29;
					    u_xlat11 = max(u_xlat11, 0.00200000009);
					    u_xlat11 = u_xlat11 * 0.280000001;
					    u_xlat11 = (-u_xlat11) * u_xlat29 + 1.0;
					    u_xlat27 = u_xlat1.w * _GlossMapScale + (-u_xlat27);
					    u_xlat27 = u_xlat27 + 1.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.xzw = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat2.xzw = u_xlat4.xyw * vec3(u_xlat22) + u_xlat2.xzw;
					    u_xlat12.xyz = u_xlat6.xyz * vec3(u_xlat11);
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(u_xlat27);
					    u_xlat0.xyz = u_xlat3.xxx * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat12.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xzw + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "LIGHTPROBE_SH" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_5[4];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_7;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[4];
						vec4 unity_IndirectSpecColor;
						vec4 unused_2_2[22];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					bool u_xlatb4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat10;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat14;
					float u_xlat18;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					bool u_xlatb27;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat24 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat25 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * vs_TEXCOORD4.xyz;
					    u_xlat25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat3.xyz = vec3(u_xlat25) * vs_TEXCOORD1.xyz;
					    u_xlatb27 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb27){
					        u_xlatb4 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat12.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat12.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat12.xyz;
					        u_xlat12.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat12.xyz;
					        u_xlat12.xyz = u_xlat12.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat13.x = vs_TEXCOORD2.w;
					        u_xlat13.y = vs_TEXCOORD3.w;
					        u_xlat13.z = vs_TEXCOORD4.w;
					        u_xlat4.xyz = (bool(u_xlatb4)) ? u_xlat12.xyz : u_xlat13.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat12.x = u_xlat4.y * 0.25 + 0.75;
					        u_xlat5.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat12.x, u_xlat5.x);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat4.x = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat5 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat12.x = (-_OcclusionStrength) + 1.0;
					    u_xlat12.x = u_xlat5.y * _OcclusionStrength + u_xlat12.x;
					    u_xlat4.xzw = u_xlat4.xxx * _LightColor0.xyz;
					    if(u_xlatb27){
					        u_xlatb27 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat14.x = vs_TEXCOORD2.w;
					        u_xlat14.y = vs_TEXCOORD3.w;
					        u_xlat14.z = vs_TEXCOORD4.w;
					        u_xlat5.xyz = (bool(u_xlatb27)) ? u_xlat5.xyz : u_xlat14.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat5.yzw = u_xlat5.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat27 = u_xlat5.y * 0.25;
					        u_xlat13.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat6.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat27 = max(u_xlat27, u_xlat13.x);
					        u_xlat5.x = min(u_xlat6.x, u_xlat27);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					        u_xlat7.xyz = u_xlat5.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat7.xyz);
					        u_xlat5.xyz = u_xlat5.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xyz);
					        u_xlat2.w = 1.0;
					        u_xlat6.x = dot(u_xlat6, u_xlat2);
					        u_xlat6.y = dot(u_xlat7, u_xlat2);
					        u_xlat6.z = dot(u_xlat5, u_xlat2);
					    } else {
					        u_xlat2.w = 1.0;
					        u_xlat6.x = dot(unity_SHAr, u_xlat2);
					        u_xlat6.y = dot(unity_SHAg, u_xlat2);
					        u_xlat6.z = dot(unity_SHAb, u_xlat2);
					    }
					    u_xlat5.xyz = u_xlat6.xyz + vs_TEXCOORD5.xyz;
					    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat5.xyz = log2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat6.xyz = u_xlat12.xxx * unity_IndirectSpecColor.xyz;
					    u_xlat26 = (-_Glossiness) + 1.0;
					    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;
					    u_xlat25 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat25 = max(u_xlat25, 0.00100000005);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat7.xyz = vec3(u_xlat25) * u_xlat7.xyz;
					    u_xlat25 = dot(u_xlat2.xyz, (-u_xlat3.xyz));
					    u_xlat2.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat10 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);
					    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
					    u_xlat10 = u_xlat10 * u_xlat10;
					    u_xlat10 = dot(vec2(u_xlat10), vec2(u_xlat26));
					    u_xlat10 = u_xlat10 + -0.5;
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat3.x = u_xlat18 * u_xlat18;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat18 = u_xlat18 * u_xlat3.x;
					    u_xlat18 = u_xlat10 * u_xlat18 + 1.0;
					    u_xlat25 = -abs(u_xlat25) + 1.0;
					    u_xlat3.x = u_xlat25 * u_xlat25;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat10 = u_xlat10 * u_xlat25 + 1.0;
					    u_xlat10 = u_xlat10 * u_xlat18;
					    u_xlat2.x = u_xlat2.x * u_xlat10;
					    u_xlat10 = u_xlat26 * u_xlat26;
					    u_xlat10 = max(u_xlat10, 0.00200000009);
					    u_xlat10 = u_xlat10 * 0.280000001;
					    u_xlat10 = (-u_xlat10) * u_xlat26 + 1.0;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 + _Glossiness;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat2.xzw = u_xlat2.xxx * u_xlat4.xzw;
					    u_xlat2.xzw = u_xlat5.xyz * u_xlat12.xxx + u_xlat2.xzw;
					    u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat10);
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xzw + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "SHADOWS_SCREEN" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _BumpScale;
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[4];
						vec4 unity_IndirectSpecColor;
						vec4 unused_4_2[8];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					bool u_xlatb4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat9;
					vec3 u_xlat11;
					float u_xlat16;
					float u_xlat21;
					float u_xlat23;
					float u_xlat24;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat21 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat2.xy = u_xlat2.xy * vec2(_BumpScale);
					    u_xlat16 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat16 = min(u_xlat16, 1.0);
					    u_xlat16 = (-u_xlat16) + 1.0;
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat3.xyz = u_xlat2.yyy * vs_TEXCOORD3.xyz;
					    u_xlat2.xyw = vs_TEXCOORD2.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat16) + u_xlat2.xyw;
					    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat2.xyz = vec3(u_xlat23) * u_xlat2.xyz;
					    u_xlat23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat3.xyz = vec3(u_xlat23) * vs_TEXCOORD1.xyz;
					    u_xlat11.x = vs_TEXCOORD2.w;
					    u_xlat11.y = vs_TEXCOORD3.w;
					    u_xlat11.z = vs_TEXCOORD4.w;
					    u_xlat5.xyz = (-u_xlat11.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6.x = unity_MatrixV[0].z;
					    u_xlat6.y = unity_MatrixV[1].z;
					    u_xlat6.z = unity_MatrixV[2].z;
					    u_xlat24 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat5.xyz = u_xlat11.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat4.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat4.x = (-u_xlat24) + u_xlat4.x;
					    u_xlat24 = unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat24;
					    u_xlat24 = u_xlat24 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlatb4 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb4){
					        u_xlatb4 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb4)) ? u_xlat5.xyz : u_xlat11.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat11.x = u_xlat4.y * 0.25 + 0.75;
					        u_xlat5.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat11.x, u_xlat5.x);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat4.x = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat11.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat5 = texture(_ShadowMapTexture, u_xlat11.xy);
					    u_xlat4.x = u_xlat4.x + (-u_xlat5.x);
					    u_xlat24 = u_xlat24 * u_xlat4.x + u_xlat5.x;
					    u_xlat4 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = (-_OcclusionStrength) + 1.0;
					    u_xlat4.x = u_xlat4.y * _OcclusionStrength + u_xlat4.x;
					    u_xlat11.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * unity_IndirectSpecColor.xyz;
					    u_xlat24 = (-u_xlat1.w) * _GlossMapScale + 1.0;
					    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat23) + _WorldSpaceLightPos0.xyz;
					    u_xlat23 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat23 = max(u_xlat23, 0.00100000005);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat6.xyz = vec3(u_xlat23) * u_xlat6.xyz;
					    u_xlat23 = dot(u_xlat2.xyz, (-u_xlat3.xyz));
					    u_xlat2.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat9 = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat9 = dot(vec2(u_xlat9), vec2(u_xlat24));
					    u_xlat9 = u_xlat9 + -0.5;
					    u_xlat16 = (-u_xlat2.x) + 1.0;
					    u_xlat3.x = u_xlat16 * u_xlat16;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat16 = u_xlat16 * u_xlat3.x;
					    u_xlat16 = u_xlat9 * u_xlat16 + 1.0;
					    u_xlat23 = -abs(u_xlat23) + 1.0;
					    u_xlat3.x = u_xlat23 * u_xlat23;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat23 = u_xlat23 * u_xlat3.x;
					    u_xlat9 = u_xlat9 * u_xlat23 + 1.0;
					    u_xlat9 = u_xlat9 * u_xlat16;
					    u_xlat2.x = u_xlat2.x * u_xlat9;
					    u_xlat9 = u_xlat24 * u_xlat24;
					    u_xlat9 = max(u_xlat9, 0.00200000009);
					    u_xlat9 = u_xlat9 * 0.280000001;
					    u_xlat9 = (-u_xlat9) * u_xlat24 + 1.0;
					    u_xlat21 = u_xlat1.w * _GlossMapScale + (-u_xlat21);
					    u_xlat21 = u_xlat21 + 1.0;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat11.xyz;
					    u_xlat2.xyz = u_xlat5.xyz * vec3(u_xlat9);
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat23) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "SHADOWS_SCREEN" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[4];
						vec4 unity_IndirectSpecColor;
						vec4 unused_4_2[8];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat9;
					vec3 u_xlat11;
					float u_xlat16;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					float u_xlat24;
					bool u_xlatb24;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat21 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat22 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * vs_TEXCOORD4.xyz;
					    u_xlat22 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat3.xyz = vec3(u_xlat22) * vs_TEXCOORD1.xyz;
					    u_xlat11.x = vs_TEXCOORD2.w;
					    u_xlat11.y = vs_TEXCOORD3.w;
					    u_xlat11.z = vs_TEXCOORD4.w;
					    u_xlat5.xyz = (-u_xlat11.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6.x = unity_MatrixV[0].z;
					    u_xlat6.y = unity_MatrixV[1].z;
					    u_xlat6.z = unity_MatrixV[2].z;
					    u_xlat23 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat5.xyz = u_xlat11.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = (-u_xlat23) + u_xlat24;
					    u_xlat23 = unity_ShadowFadeCenterAndType.w * u_xlat24 + u_xlat23;
					    u_xlat23 = u_xlat23 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlatb24 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb24){
					        u_xlatb24 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb24)) ? u_xlat5.xyz : u_xlat11.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat24 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat11.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat24, u_xlat11.x);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat24 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat4 = texture(_ShadowMapTexture, u_xlat4.xy);
					    u_xlat24 = u_xlat24 + (-u_xlat4.x);
					    u_xlat23 = u_xlat23 * u_xlat24 + u_xlat4.x;
					    u_xlat4 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat24 = (-_OcclusionStrength) + 1.0;
					    u_xlat24 = u_xlat4.y * _OcclusionStrength + u_xlat24;
					    u_xlat4.xyz = vec3(u_xlat23) * _LightColor0.xyz;
					    u_xlat5.xyz = vec3(u_xlat24) * unity_IndirectSpecColor.xyz;
					    u_xlat23 = (-_Glossiness) + 1.0;
					    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat22 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat22 = max(u_xlat22, 0.00100000005);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat6.xyz = vec3(u_xlat22) * u_xlat6.xyz;
					    u_xlat22 = dot(u_xlat2.xyz, (-u_xlat3.xyz));
					    u_xlat2.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat9 = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat9 = dot(vec2(u_xlat9), vec2(u_xlat23));
					    u_xlat9 = u_xlat9 + -0.5;
					    u_xlat16 = (-u_xlat2.x) + 1.0;
					    u_xlat3.x = u_xlat16 * u_xlat16;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat16 = u_xlat16 * u_xlat3.x;
					    u_xlat16 = u_xlat9 * u_xlat16 + 1.0;
					    u_xlat22 = -abs(u_xlat22) + 1.0;
					    u_xlat3.x = u_xlat22 * u_xlat22;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat22 = u_xlat22 * u_xlat3.x;
					    u_xlat9 = u_xlat9 * u_xlat22 + 1.0;
					    u_xlat9 = u_xlat9 * u_xlat16;
					    u_xlat2.x = u_xlat2.x * u_xlat9;
					    u_xlat9 = u_xlat23 * u_xlat23;
					    u_xlat9 = max(u_xlat9, 0.00200000009);
					    u_xlat9 = u_xlat9 * 0.280000001;
					    u_xlat9 = (-u_xlat9) * u_xlat23 + 1.0;
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat21 = u_xlat21 + _Glossiness;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat2.xzw = u_xlat2.xxx * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat9);
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat22) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xzw + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _BumpScale;
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[4];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_7;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[4];
						vec4 unity_IndirectSpecColor;
						vec4 unused_4_2[8];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					bool u_xlatb4;
					vec4 u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat14;
					bool u_xlatb14;
					float u_xlat20;
					vec2 u_xlat23;
					float u_xlat27;
					float u_xlat29;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat27 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat2.xy = u_xlat2.xy * vec2(_BumpScale);
					    u_xlat20 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat20 = min(u_xlat20, 1.0);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat20 = sqrt(u_xlat20);
					    u_xlat3.xyz = u_xlat2.yyy * vs_TEXCOORD3.xyz;
					    u_xlat2.xyw = vs_TEXCOORD2.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat20) + u_xlat2.xyw;
					    u_xlat29 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat29 = inversesqrt(u_xlat29);
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat12.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat13.x = vs_TEXCOORD2.w;
					    u_xlat13.y = vs_TEXCOORD3.w;
					    u_xlat13.z = vs_TEXCOORD4.w;
					    u_xlat5.xyz = (-u_xlat13.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6.x = unity_MatrixV[0].z;
					    u_xlat6.y = unity_MatrixV[1].z;
					    u_xlat6.z = unity_MatrixV[2].z;
					    u_xlat4.x = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat5.xyz = u_xlat13.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat5.x = (-u_xlat4.x) + u_xlat5.x;
					    u_xlat4.x = unity_ShadowFadeCenterAndType.w * u_xlat5.x + u_xlat4.x;
					    u_xlat4.x = u_xlat4.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlatb5 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb5){
					        u_xlatb14 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat14.xyz = (bool(u_xlatb14)) ? u_xlat6.xyz : u_xlat13.xyz;
					        u_xlat14.xyz = u_xlat14.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat14.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat14.x = u_xlat6.y * 0.25 + 0.75;
					        u_xlat23.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat6.x = max(u_xlat23.x, u_xlat14.x);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					    } else {
					        u_xlat6.x = float(1.0);
					        u_xlat6.y = float(1.0);
					        u_xlat6.z = float(1.0);
					        u_xlat6.w = float(1.0);
					    }
					    u_xlat14.x = dot(u_xlat6, unity_OcclusionMaskSelector);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat23.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat6 = texture(_ShadowMapTexture, u_xlat23.xy);
					    u_xlat14.x = u_xlat14.x + (-u_xlat6.x);
					    u_xlat4.x = u_xlat4.x * u_xlat14.x + u_xlat6.x;
					    u_xlat6 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat14.x = (-_OcclusionStrength) + 1.0;
					    u_xlat14.x = u_xlat6.y * _OcclusionStrength + u_xlat14.x;
					    u_xlat6.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    if(u_xlatb5){
					        u_xlatb4 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xzw = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xzw = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat5.xzw;
					        u_xlat5.xzw = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat5.xzw;
					        u_xlat5.xzw = u_xlat5.xzw + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb4)) ? u_xlat5.xzw : u_xlat13.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat13.x = u_xlat4.y * 0.25;
					        u_xlat5.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat23.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat13.x = max(u_xlat13.x, u_xlat5.x);
					        u_xlat4.x = min(u_xlat23.x, u_xlat13.x);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					        u_xlat5.xzw = u_xlat4.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat8 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					        u_xlat4.xyz = u_xlat4.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat2.w = 1.0;
					        u_xlat7.x = dot(u_xlat7, u_xlat2);
					        u_xlat7.y = dot(u_xlat8, u_xlat2);
					        u_xlat7.z = dot(u_xlat4, u_xlat2);
					    } else {
					        u_xlat2.w = 1.0;
					        u_xlat7.x = dot(unity_SHAr, u_xlat2);
					        u_xlat7.y = dot(unity_SHAg, u_xlat2);
					        u_xlat7.z = dot(unity_SHAb, u_xlat2);
					    }
					    u_xlat4.xyz = u_xlat7.xyz + vs_TEXCOORD5.xyz;
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat5.xzw = u_xlat14.xxx * unity_IndirectSpecColor.xyz;
					    u_xlat29 = (-u_xlat1.w) * _GlossMapScale + 1.0;
					    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat3.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat3.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat3.x = max(u_xlat3.x, 0.00100000005);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat3.x = dot(u_xlat2.xyz, (-u_xlat12.xyz));
					    u_xlat2.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat11 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat11 = dot(vec2(u_xlat11), vec2(u_xlat29));
					    u_xlat11 = u_xlat11 + -0.5;
					    u_xlat20 = (-u_xlat2.x) + 1.0;
					    u_xlat12.x = u_xlat20 * u_xlat20;
					    u_xlat12.x = u_xlat12.x * u_xlat12.x;
					    u_xlat20 = u_xlat20 * u_xlat12.x;
					    u_xlat20 = u_xlat11 * u_xlat20 + 1.0;
					    u_xlat3.x = -abs(u_xlat3.x) + 1.0;
					    u_xlat12.x = u_xlat3.x * u_xlat3.x;
					    u_xlat12.x = u_xlat12.x * u_xlat12.x;
					    u_xlat3.x = u_xlat3.x * u_xlat12.x;
					    u_xlat11 = u_xlat11 * u_xlat3.x + 1.0;
					    u_xlat11 = u_xlat11 * u_xlat20;
					    u_xlat2.x = u_xlat2.x * u_xlat11;
					    u_xlat11 = u_xlat29 * u_xlat29;
					    u_xlat11 = max(u_xlat11, 0.00200000009);
					    u_xlat11 = u_xlat11 * 0.280000001;
					    u_xlat11 = (-u_xlat11) * u_xlat29 + 1.0;
					    u_xlat27 = u_xlat1.w * _GlossMapScale + (-u_xlat27);
					    u_xlat27 = u_xlat27 + 1.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.xzw = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat2.xzw = u_xlat4.xyz * u_xlat14.xxx + u_xlat2.xzw;
					    u_xlat12.xyz = u_xlat5.xzw * vec3(u_xlat11);
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(u_xlat27);
					    u_xlat0.xyz = u_xlat3.xxx * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat12.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xzw + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[4];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_7;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[4];
						vec4 unity_IndirectSpecColor;
						vec4 unused_4_2[8];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					bool u_xlatb4;
					vec4 u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat10;
					vec3 u_xlat12;
					vec3 u_xlat13;
					float u_xlat18;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					bool u_xlatb27;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat24 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat25 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * vs_TEXCOORD4.xyz;
					    u_xlat25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat3.xyz = vec3(u_xlat25) * vs_TEXCOORD1.xyz;
					    u_xlat12.x = vs_TEXCOORD2.w;
					    u_xlat12.y = vs_TEXCOORD3.w;
					    u_xlat12.z = vs_TEXCOORD4.w;
					    u_xlat5.xyz = (-u_xlat12.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6.x = unity_MatrixV[0].z;
					    u_xlat6.y = unity_MatrixV[1].z;
					    u_xlat6.z = unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat5.xyz = u_xlat12.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat4.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat4.x = (-u_xlat27) + u_xlat4.x;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlatb4 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb4){
					        u_xlatb5 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat13.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat13.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat13.xyz;
					        u_xlat13.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat13.xyz;
					        u_xlat13.xyz = u_xlat13.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat5.xyz = (bool(u_xlatb5)) ? u_xlat13.xyz : u_xlat12.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat5.yzw = u_xlat5.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat13.x = u_xlat5.y * 0.25 + 0.75;
					        u_xlat6.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat5.x = max(u_xlat13.x, u_xlat6.x);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					    } else {
					        u_xlat5.x = float(1.0);
					        u_xlat5.y = float(1.0);
					        u_xlat5.z = float(1.0);
					        u_xlat5.w = float(1.0);
					    }
					    u_xlat5.x = dot(u_xlat5, unity_OcclusionMaskSelector);
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat13.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat6 = texture(_ShadowMapTexture, u_xlat13.xy);
					    u_xlat5.x = u_xlat5.x + (-u_xlat6.x);
					    u_xlat27 = u_xlat27 * u_xlat5.x + u_xlat6.x;
					    u_xlat5 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat5.x = (-_OcclusionStrength) + 1.0;
					    u_xlat5.x = u_xlat5.y * _OcclusionStrength + u_xlat5.x;
					    u_xlat13.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    if(u_xlatb4){
					        u_xlatb27 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb27)) ? u_xlat6.xyz : u_xlat12.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat27 = u_xlat4.y * 0.25;
					        u_xlat12.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat6.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat27 = max(u_xlat27, u_xlat12.x);
					        u_xlat4.x = min(u_xlat6.x, u_xlat27);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					        u_xlat7.xyz = u_xlat4.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat7.xyz);
					        u_xlat4.xyz = u_xlat4.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat2.w = 1.0;
					        u_xlat6.x = dot(u_xlat6, u_xlat2);
					        u_xlat6.y = dot(u_xlat7, u_xlat2);
					        u_xlat6.z = dot(u_xlat4, u_xlat2);
					    } else {
					        u_xlat2.w = 1.0;
					        u_xlat6.x = dot(unity_SHAr, u_xlat2);
					        u_xlat6.y = dot(unity_SHAg, u_xlat2);
					        u_xlat6.z = dot(unity_SHAb, u_xlat2);
					    }
					    u_xlat4.xyz = u_xlat6.xyz + vs_TEXCOORD5.xyz;
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat6.xyz = u_xlat5.xxx * unity_IndirectSpecColor.xyz;
					    u_xlat26 = (-_Glossiness) + 1.0;
					    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;
					    u_xlat25 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat25 = max(u_xlat25, 0.00100000005);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat7.xyz = vec3(u_xlat25) * u_xlat7.xyz;
					    u_xlat25 = dot(u_xlat2.xyz, (-u_xlat3.xyz));
					    u_xlat2.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat10 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);
					    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
					    u_xlat10 = u_xlat10 * u_xlat10;
					    u_xlat10 = dot(vec2(u_xlat10), vec2(u_xlat26));
					    u_xlat10 = u_xlat10 + -0.5;
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat3.x = u_xlat18 * u_xlat18;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat18 = u_xlat18 * u_xlat3.x;
					    u_xlat18 = u_xlat10 * u_xlat18 + 1.0;
					    u_xlat25 = -abs(u_xlat25) + 1.0;
					    u_xlat3.x = u_xlat25 * u_xlat25;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat10 = u_xlat10 * u_xlat25 + 1.0;
					    u_xlat10 = u_xlat10 * u_xlat18;
					    u_xlat2.x = u_xlat2.x * u_xlat10;
					    u_xlat10 = u_xlat26 * u_xlat26;
					    u_xlat10 = max(u_xlat10, 0.00200000009);
					    u_xlat10 = u_xlat10 * 0.280000001;
					    u_xlat10 = (-u_xlat10) * u_xlat26 + 1.0;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 + _Glossiness;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat2.xzw = u_xlat2.xxx * u_xlat13.xyz;
					    u_xlat2.xzw = u_xlat4.xyz * u_xlat5.xxx + u_xlat2.xzw;
					    u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat10);
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xzw + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _BumpScale;
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_3;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[4];
						vec4 unity_IndirectSpecColor;
						vec4 unused_2_2[22];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat9;
					vec3 u_xlat11;
					vec3 u_xlat12;
					float u_xlat16;
					float u_xlat21;
					float u_xlat23;
					float u_xlat24;
					bool u_xlatb24;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat21 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat2.xy = u_xlat2.xy * vec2(_BumpScale);
					    u_xlat16 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat16 = min(u_xlat16, 1.0);
					    u_xlat16 = (-u_xlat16) + 1.0;
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat3.xyz = u_xlat2.yyy * vs_TEXCOORD3.xyz;
					    u_xlat2.xyw = vs_TEXCOORD2.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat16) + u_xlat2.xyw;
					    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat2.xyz = vec3(u_xlat23) * u_xlat2.xyz;
					    u_xlat23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat3.xyz = vec3(u_xlat23) * vs_TEXCOORD1.xyz;
					    u_xlatb24 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb24){
					        u_xlatb24 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat12.x = vs_TEXCOORD2.w;
					        u_xlat12.y = vs_TEXCOORD3.w;
					        u_xlat12.z = vs_TEXCOORD4.w;
					        u_xlat4.xyz = (bool(u_xlatb24)) ? u_xlat4.xyz : u_xlat12.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat24 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat11.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat24, u_xlat11.x);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat24 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat4 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = (-_OcclusionStrength) + 1.0;
					    u_xlat4.x = u_xlat4.y * _OcclusionStrength + u_xlat4.x;
					    u_xlat11.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * unity_IndirectSpecColor.xyz;
					    u_xlat24 = (-u_xlat1.w) * _GlossMapScale + 1.0;
					    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat23) + _WorldSpaceLightPos0.xyz;
					    u_xlat23 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat23 = max(u_xlat23, 0.00100000005);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat6.xyz = vec3(u_xlat23) * u_xlat6.xyz;
					    u_xlat23 = dot(u_xlat2.xyz, (-u_xlat3.xyz));
					    u_xlat2.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat9 = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat9 = dot(vec2(u_xlat9), vec2(u_xlat24));
					    u_xlat9 = u_xlat9 + -0.5;
					    u_xlat16 = (-u_xlat2.x) + 1.0;
					    u_xlat3.x = u_xlat16 * u_xlat16;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat16 = u_xlat16 * u_xlat3.x;
					    u_xlat16 = u_xlat9 * u_xlat16 + 1.0;
					    u_xlat23 = -abs(u_xlat23) + 1.0;
					    u_xlat3.x = u_xlat23 * u_xlat23;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat23 = u_xlat23 * u_xlat3.x;
					    u_xlat9 = u_xlat9 * u_xlat23 + 1.0;
					    u_xlat9 = u_xlat9 * u_xlat16;
					    u_xlat2.x = u_xlat2.x * u_xlat9;
					    u_xlat9 = u_xlat24 * u_xlat24;
					    u_xlat9 = max(u_xlat9, 0.00200000009);
					    u_xlat9 = u_xlat9 * 0.280000001;
					    u_xlat9 = (-u_xlat9) * u_xlat24 + 1.0;
					    u_xlat21 = u_xlat1.w * _GlossMapScale + (-u_xlat21);
					    u_xlat21 = u_xlat21 + 1.0;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat11.xyz;
					    u_xlat2.xyz = u_xlat5.xyz * vec3(u_xlat9);
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat23) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_3;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[8];
						vec4 unity_LODFade;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[4];
						vec4 unity_IndirectSpecColor;
						vec4 unused_3_2[18];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _DitherMaskLOD2D;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat9;
					vec3 u_xlat12;
					float u_xlat16;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					bool u_xlatb23;
					float u_xlat24;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.yx * vec2(0.25, 0.25);
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.z = u_xlat0.x * 0.0625 + unity_LODFade.y;
					    u_xlat0 = texture(_DitherMaskLOD2D, u_xlat0.yz);
					    u_xlat0.x = u_xlat0.w + -0.5;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat21 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat22 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * vs_TEXCOORD4.xyz;
					    u_xlat22 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat3.xyz = vec3(u_xlat22) * vs_TEXCOORD1.xyz;
					    u_xlatb23 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb23){
					        u_xlatb23 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat12.x = vs_TEXCOORD2.w;
					        u_xlat12.y = vs_TEXCOORD3.w;
					        u_xlat12.z = vs_TEXCOORD4.w;
					        u_xlat4.xyz = (bool(u_xlatb23)) ? u_xlat4.xyz : u_xlat12.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat23 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat24 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat23, u_xlat24);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat23 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat4 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat24 = (-_OcclusionStrength) + 1.0;
					    u_xlat24 = u_xlat4.y * _OcclusionStrength + u_xlat24;
					    u_xlat4.xyz = vec3(u_xlat23) * _LightColor0.xyz;
					    u_xlat5.xyz = vec3(u_xlat24) * unity_IndirectSpecColor.xyz;
					    u_xlat23 = (-_Glossiness) + 1.0;
					    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat22 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat22 = max(u_xlat22, 0.00100000005);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat6.xyz = vec3(u_xlat22) * u_xlat6.xyz;
					    u_xlat22 = dot(u_xlat2.xyz, (-u_xlat3.xyz));
					    u_xlat2.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat9 = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat9 = dot(vec2(u_xlat9), vec2(u_xlat23));
					    u_xlat9 = u_xlat9 + -0.5;
					    u_xlat16 = (-u_xlat2.x) + 1.0;
					    u_xlat3.x = u_xlat16 * u_xlat16;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat16 = u_xlat16 * u_xlat3.x;
					    u_xlat16 = u_xlat9 * u_xlat16 + 1.0;
					    u_xlat22 = -abs(u_xlat22) + 1.0;
					    u_xlat3.x = u_xlat22 * u_xlat22;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat22 = u_xlat22 * u_xlat3.x;
					    u_xlat9 = u_xlat9 * u_xlat22 + 1.0;
					    u_xlat9 = u_xlat9 * u_xlat16;
					    u_xlat2.x = u_xlat2.x * u_xlat9;
					    u_xlat9 = u_xlat23 * u_xlat23;
					    u_xlat9 = max(u_xlat9, 0.00200000009);
					    u_xlat9 = u_xlat9 * 0.280000001;
					    u_xlat9 = (-u_xlat9) * u_xlat23 + 1.0;
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat21 = u_xlat21 + _Glossiness;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat2.xzw = u_xlat2.xxx * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat9);
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat22) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xzw + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _BumpScale;
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_5[4];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_7;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[8];
						vec4 unity_LODFade;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[4];
						vec4 unity_IndirectSpecColor;
						vec4 unused_3_2[18];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _DitherMaskLOD2D;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					bool u_xlatb4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					bool u_xlatb13;
					vec3 u_xlat15;
					vec3 u_xlat16;
					float u_xlat20;
					float u_xlat22;
					float u_xlat27;
					float u_xlat29;
					float u_xlat31;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.yx * vec2(0.25, 0.25);
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.z = u_xlat0.x * 0.0625 + unity_LODFade.y;
					    u_xlat0 = texture(_DitherMaskLOD2D, u_xlat0.yz);
					    u_xlat0.x = u_xlat0.w + -0.5;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat27 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat2.xy = u_xlat2.xy * vec2(_BumpScale);
					    u_xlat20 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat20 = min(u_xlat20, 1.0);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat20 = sqrt(u_xlat20);
					    u_xlat3.xyz = u_xlat2.yyy * vs_TEXCOORD3.xyz;
					    u_xlat2.xyw = vs_TEXCOORD2.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat20) + u_xlat2.xyw;
					    u_xlat29 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat29 = inversesqrt(u_xlat29);
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat12.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlatb4 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb4){
					        u_xlatb13 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat15.x = vs_TEXCOORD2.w;
					        u_xlat15.y = vs_TEXCOORD3.w;
					        u_xlat15.z = vs_TEXCOORD4.w;
					        u_xlat13.xyz = (bool(u_xlatb13)) ? u_xlat5.xyz : u_xlat15.xyz;
					        u_xlat13.xyz = u_xlat13.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat5.yzw = u_xlat13.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat13.x = u_xlat5.y * 0.25 + 0.75;
					        u_xlat22 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat5.x = max(u_xlat22, u_xlat13.x);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					    } else {
					        u_xlat5.x = float(1.0);
					        u_xlat5.y = float(1.0);
					        u_xlat5.z = float(1.0);
					        u_xlat5.w = float(1.0);
					    }
					    u_xlat13.x = dot(u_xlat5, unity_OcclusionMaskSelector);
					    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
					    u_xlat5 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat22 = (-_OcclusionStrength) + 1.0;
					    u_xlat22 = u_xlat5.y * _OcclusionStrength + u_xlat22;
					    u_xlat5.xyz = u_xlat13.xxx * _LightColor0.xyz;
					    if(u_xlatb4){
					        u_xlatb4 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat16.x = vs_TEXCOORD2.w;
					        u_xlat16.y = vs_TEXCOORD3.w;
					        u_xlat16.z = vs_TEXCOORD4.w;
					        u_xlat4.xyw = (bool(u_xlatb4)) ? u_xlat6.xyz : u_xlat16.xyz;
					        u_xlat4.xyw = u_xlat4.xyw + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat4.xyw * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat4.x = u_xlat6.y * 0.25;
					        u_xlat13.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat31 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat4.x = max(u_xlat13.x, u_xlat4.x);
					        u_xlat6.x = min(u_xlat31, u_xlat4.x);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					        u_xlat4.xyw = u_xlat6.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat8 = texture(unity_ProbeVolumeSH, u_xlat4.xyw);
					        u_xlat4.xyw = u_xlat6.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat4.xyw);
					        u_xlat2.w = 1.0;
					        u_xlat7.x = dot(u_xlat7, u_xlat2);
					        u_xlat7.y = dot(u_xlat8, u_xlat2);
					        u_xlat7.z = dot(u_xlat6, u_xlat2);
					    } else {
					        u_xlat2.w = 1.0;
					        u_xlat7.x = dot(unity_SHAr, u_xlat2);
					        u_xlat7.y = dot(unity_SHAg, u_xlat2);
					        u_xlat7.z = dot(unity_SHAb, u_xlat2);
					    }
					    u_xlat4.xyw = u_xlat7.xyz + vs_TEXCOORD5.xyz;
					    u_xlat4.xyw = max(u_xlat4.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyw = log2(u_xlat4.xyw);
					    u_xlat4.xyw = u_xlat4.xyw * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat4.xyw = exp2(u_xlat4.xyw);
					    u_xlat4.xyw = u_xlat4.xyw * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat4.xyw = max(u_xlat4.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat6.xyz = vec3(u_xlat22) * unity_IndirectSpecColor.xyz;
					    u_xlat29 = (-u_xlat1.w) * _GlossMapScale + 1.0;
					    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat3.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat3.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat3.x = max(u_xlat3.x, 0.00100000005);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat3.x = dot(u_xlat2.xyz, (-u_xlat12.xyz));
					    u_xlat2.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat11 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat11 = dot(vec2(u_xlat11), vec2(u_xlat29));
					    u_xlat11 = u_xlat11 + -0.5;
					    u_xlat20 = (-u_xlat2.x) + 1.0;
					    u_xlat12.x = u_xlat20 * u_xlat20;
					    u_xlat12.x = u_xlat12.x * u_xlat12.x;
					    u_xlat20 = u_xlat20 * u_xlat12.x;
					    u_xlat20 = u_xlat11 * u_xlat20 + 1.0;
					    u_xlat3.x = -abs(u_xlat3.x) + 1.0;
					    u_xlat12.x = u_xlat3.x * u_xlat3.x;
					    u_xlat12.x = u_xlat12.x * u_xlat12.x;
					    u_xlat3.x = u_xlat3.x * u_xlat12.x;
					    u_xlat11 = u_xlat11 * u_xlat3.x + 1.0;
					    u_xlat11 = u_xlat11 * u_xlat20;
					    u_xlat2.x = u_xlat2.x * u_xlat11;
					    u_xlat11 = u_xlat29 * u_xlat29;
					    u_xlat11 = max(u_xlat11, 0.00200000009);
					    u_xlat11 = u_xlat11 * 0.280000001;
					    u_xlat11 = (-u_xlat11) * u_xlat29 + 1.0;
					    u_xlat27 = u_xlat1.w * _GlossMapScale + (-u_xlat27);
					    u_xlat27 = u_xlat27 + 1.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.xzw = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat2.xzw = u_xlat4.xyw * vec3(u_xlat22) + u_xlat2.xzw;
					    u_xlat12.xyz = u_xlat6.xyz * vec3(u_xlat11);
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(u_xlat27);
					    u_xlat0.xyz = u_xlat3.xxx * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat12.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xzw + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_5[4];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_7;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[8];
						vec4 unity_LODFade;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[4];
						vec4 unity_IndirectSpecColor;
						vec4 unused_3_2[18];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _DitherMaskLOD2D;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					bool u_xlatb4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat10;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat14;
					float u_xlat18;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					bool u_xlatb27;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.yx * vec2(0.25, 0.25);
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.z = u_xlat0.x * 0.0625 + unity_LODFade.y;
					    u_xlat0 = texture(_DitherMaskLOD2D, u_xlat0.yz);
					    u_xlat0.x = u_xlat0.w + -0.5;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat24 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat25 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * vs_TEXCOORD4.xyz;
					    u_xlat25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat3.xyz = vec3(u_xlat25) * vs_TEXCOORD1.xyz;
					    u_xlatb27 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb27){
					        u_xlatb4 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat12.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat12.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat12.xyz;
					        u_xlat12.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat12.xyz;
					        u_xlat12.xyz = u_xlat12.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat13.x = vs_TEXCOORD2.w;
					        u_xlat13.y = vs_TEXCOORD3.w;
					        u_xlat13.z = vs_TEXCOORD4.w;
					        u_xlat4.xyz = (bool(u_xlatb4)) ? u_xlat12.xyz : u_xlat13.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat12.x = u_xlat4.y * 0.25 + 0.75;
					        u_xlat5.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat12.x, u_xlat5.x);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat4.x = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat5 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat12.x = (-_OcclusionStrength) + 1.0;
					    u_xlat12.x = u_xlat5.y * _OcclusionStrength + u_xlat12.x;
					    u_xlat4.xzw = u_xlat4.xxx * _LightColor0.xyz;
					    if(u_xlatb27){
					        u_xlatb27 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat14.x = vs_TEXCOORD2.w;
					        u_xlat14.y = vs_TEXCOORD3.w;
					        u_xlat14.z = vs_TEXCOORD4.w;
					        u_xlat5.xyz = (bool(u_xlatb27)) ? u_xlat5.xyz : u_xlat14.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat5.yzw = u_xlat5.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat27 = u_xlat5.y * 0.25;
					        u_xlat13.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat6.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat27 = max(u_xlat27, u_xlat13.x);
					        u_xlat5.x = min(u_xlat6.x, u_xlat27);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					        u_xlat7.xyz = u_xlat5.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat7.xyz);
					        u_xlat5.xyz = u_xlat5.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xyz);
					        u_xlat2.w = 1.0;
					        u_xlat6.x = dot(u_xlat6, u_xlat2);
					        u_xlat6.y = dot(u_xlat7, u_xlat2);
					        u_xlat6.z = dot(u_xlat5, u_xlat2);
					    } else {
					        u_xlat2.w = 1.0;
					        u_xlat6.x = dot(unity_SHAr, u_xlat2);
					        u_xlat6.y = dot(unity_SHAg, u_xlat2);
					        u_xlat6.z = dot(unity_SHAb, u_xlat2);
					    }
					    u_xlat5.xyz = u_xlat6.xyz + vs_TEXCOORD5.xyz;
					    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat5.xyz = log2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat6.xyz = u_xlat12.xxx * unity_IndirectSpecColor.xyz;
					    u_xlat26 = (-_Glossiness) + 1.0;
					    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;
					    u_xlat25 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat25 = max(u_xlat25, 0.00100000005);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat7.xyz = vec3(u_xlat25) * u_xlat7.xyz;
					    u_xlat25 = dot(u_xlat2.xyz, (-u_xlat3.xyz));
					    u_xlat2.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat10 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);
					    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
					    u_xlat10 = u_xlat10 * u_xlat10;
					    u_xlat10 = dot(vec2(u_xlat10), vec2(u_xlat26));
					    u_xlat10 = u_xlat10 + -0.5;
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat3.x = u_xlat18 * u_xlat18;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat18 = u_xlat18 * u_xlat3.x;
					    u_xlat18 = u_xlat10 * u_xlat18 + 1.0;
					    u_xlat25 = -abs(u_xlat25) + 1.0;
					    u_xlat3.x = u_xlat25 * u_xlat25;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat10 = u_xlat10 * u_xlat25 + 1.0;
					    u_xlat10 = u_xlat10 * u_xlat18;
					    u_xlat2.x = u_xlat2.x * u_xlat10;
					    u_xlat10 = u_xlat26 * u_xlat26;
					    u_xlat10 = max(u_xlat10, 0.00200000009);
					    u_xlat10 = u_xlat10 * 0.280000001;
					    u_xlat10 = (-u_xlat10) * u_xlat26 + 1.0;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 + _Glossiness;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat2.xzw = u_xlat2.xxx * u_xlat4.xzw;
					    u_xlat2.xzw = u_xlat5.xyz * u_xlat12.xxx + u_xlat2.xzw;
					    u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat10);
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xzw + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "SHADOWS_SCREEN" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _BumpScale;
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_4_0[8];
						vec4 unity_LODFade;
						vec4 unused_4_2;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_5_0[4];
						vec4 unity_IndirectSpecColor;
						vec4 unused_5_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_5_4[10];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _DitherMaskLOD2D;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					bool u_xlatb4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat9;
					vec3 u_xlat11;
					float u_xlat16;
					float u_xlat21;
					float u_xlat23;
					float u_xlat24;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.yx * vec2(0.25, 0.25);
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.z = u_xlat0.x * 0.0625 + unity_LODFade.y;
					    u_xlat0 = texture(_DitherMaskLOD2D, u_xlat0.yz);
					    u_xlat0.x = u_xlat0.w + -0.5;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat21 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat2.xy = u_xlat2.xy * vec2(_BumpScale);
					    u_xlat16 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat16 = min(u_xlat16, 1.0);
					    u_xlat16 = (-u_xlat16) + 1.0;
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat3.xyz = u_xlat2.yyy * vs_TEXCOORD3.xyz;
					    u_xlat2.xyw = vs_TEXCOORD2.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat16) + u_xlat2.xyw;
					    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat2.xyz = vec3(u_xlat23) * u_xlat2.xyz;
					    u_xlat23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat3.xyz = vec3(u_xlat23) * vs_TEXCOORD1.xyz;
					    u_xlat11.x = vs_TEXCOORD2.w;
					    u_xlat11.y = vs_TEXCOORD3.w;
					    u_xlat11.z = vs_TEXCOORD4.w;
					    u_xlat5.xyz = (-u_xlat11.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6.x = unity_MatrixV[0].z;
					    u_xlat6.y = unity_MatrixV[1].z;
					    u_xlat6.z = unity_MatrixV[2].z;
					    u_xlat24 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat5.xyz = u_xlat11.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat4.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat4.x = (-u_xlat24) + u_xlat4.x;
					    u_xlat24 = unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat24;
					    u_xlat24 = u_xlat24 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlatb4 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb4){
					        u_xlatb4 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb4)) ? u_xlat5.xyz : u_xlat11.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat11.x = u_xlat4.y * 0.25 + 0.75;
					        u_xlat5.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat11.x, u_xlat5.x);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat4.x = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat11.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat5 = texture(_ShadowMapTexture, u_xlat11.xy);
					    u_xlat4.x = u_xlat4.x + (-u_xlat5.x);
					    u_xlat24 = u_xlat24 * u_xlat4.x + u_xlat5.x;
					    u_xlat4 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = (-_OcclusionStrength) + 1.0;
					    u_xlat4.x = u_xlat4.y * _OcclusionStrength + u_xlat4.x;
					    u_xlat11.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * unity_IndirectSpecColor.xyz;
					    u_xlat24 = (-u_xlat1.w) * _GlossMapScale + 1.0;
					    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat23) + _WorldSpaceLightPos0.xyz;
					    u_xlat23 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat23 = max(u_xlat23, 0.00100000005);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat6.xyz = vec3(u_xlat23) * u_xlat6.xyz;
					    u_xlat23 = dot(u_xlat2.xyz, (-u_xlat3.xyz));
					    u_xlat2.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat9 = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat9 = dot(vec2(u_xlat9), vec2(u_xlat24));
					    u_xlat9 = u_xlat9 + -0.5;
					    u_xlat16 = (-u_xlat2.x) + 1.0;
					    u_xlat3.x = u_xlat16 * u_xlat16;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat16 = u_xlat16 * u_xlat3.x;
					    u_xlat16 = u_xlat9 * u_xlat16 + 1.0;
					    u_xlat23 = -abs(u_xlat23) + 1.0;
					    u_xlat3.x = u_xlat23 * u_xlat23;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat23 = u_xlat23 * u_xlat3.x;
					    u_xlat9 = u_xlat9 * u_xlat23 + 1.0;
					    u_xlat9 = u_xlat9 * u_xlat16;
					    u_xlat2.x = u_xlat2.x * u_xlat9;
					    u_xlat9 = u_xlat24 * u_xlat24;
					    u_xlat9 = max(u_xlat9, 0.00200000009);
					    u_xlat9 = u_xlat9 * 0.280000001;
					    u_xlat9 = (-u_xlat9) * u_xlat24 + 1.0;
					    u_xlat21 = u_xlat1.w * _GlossMapScale + (-u_xlat21);
					    u_xlat21 = u_xlat21 + 1.0;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat11.xyz;
					    u_xlat2.xyz = u_xlat5.xyz * vec3(u_xlat9);
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat23) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "SHADOWS_SCREEN" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_4_0[8];
						vec4 unity_LODFade;
						vec4 unused_4_2;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_5_0[4];
						vec4 unity_IndirectSpecColor;
						vec4 unused_5_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_5_4[10];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _DitherMaskLOD2D;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat9;
					vec3 u_xlat11;
					float u_xlat16;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					float u_xlat24;
					bool u_xlatb24;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.yx * vec2(0.25, 0.25);
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.z = u_xlat0.x * 0.0625 + unity_LODFade.y;
					    u_xlat0 = texture(_DitherMaskLOD2D, u_xlat0.yz);
					    u_xlat0.x = u_xlat0.w + -0.5;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat21 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat22 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * vs_TEXCOORD4.xyz;
					    u_xlat22 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat3.xyz = vec3(u_xlat22) * vs_TEXCOORD1.xyz;
					    u_xlat11.x = vs_TEXCOORD2.w;
					    u_xlat11.y = vs_TEXCOORD3.w;
					    u_xlat11.z = vs_TEXCOORD4.w;
					    u_xlat5.xyz = (-u_xlat11.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6.x = unity_MatrixV[0].z;
					    u_xlat6.y = unity_MatrixV[1].z;
					    u_xlat6.z = unity_MatrixV[2].z;
					    u_xlat23 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat5.xyz = u_xlat11.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = (-u_xlat23) + u_xlat24;
					    u_xlat23 = unity_ShadowFadeCenterAndType.w * u_xlat24 + u_xlat23;
					    u_xlat23 = u_xlat23 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlatb24 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb24){
					        u_xlatb24 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb24)) ? u_xlat5.xyz : u_xlat11.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat24 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat11.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat24, u_xlat11.x);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat24 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat4 = texture(_ShadowMapTexture, u_xlat4.xy);
					    u_xlat24 = u_xlat24 + (-u_xlat4.x);
					    u_xlat23 = u_xlat23 * u_xlat24 + u_xlat4.x;
					    u_xlat4 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat24 = (-_OcclusionStrength) + 1.0;
					    u_xlat24 = u_xlat4.y * _OcclusionStrength + u_xlat24;
					    u_xlat4.xyz = vec3(u_xlat23) * _LightColor0.xyz;
					    u_xlat5.xyz = vec3(u_xlat24) * unity_IndirectSpecColor.xyz;
					    u_xlat23 = (-_Glossiness) + 1.0;
					    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat22 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat22 = max(u_xlat22, 0.00100000005);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat6.xyz = vec3(u_xlat22) * u_xlat6.xyz;
					    u_xlat22 = dot(u_xlat2.xyz, (-u_xlat3.xyz));
					    u_xlat2.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat9 = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat9 = dot(vec2(u_xlat9), vec2(u_xlat23));
					    u_xlat9 = u_xlat9 + -0.5;
					    u_xlat16 = (-u_xlat2.x) + 1.0;
					    u_xlat3.x = u_xlat16 * u_xlat16;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat16 = u_xlat16 * u_xlat3.x;
					    u_xlat16 = u_xlat9 * u_xlat16 + 1.0;
					    u_xlat22 = -abs(u_xlat22) + 1.0;
					    u_xlat3.x = u_xlat22 * u_xlat22;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat22 = u_xlat22 * u_xlat3.x;
					    u_xlat9 = u_xlat9 * u_xlat22 + 1.0;
					    u_xlat9 = u_xlat9 * u_xlat16;
					    u_xlat2.x = u_xlat2.x * u_xlat9;
					    u_xlat9 = u_xlat23 * u_xlat23;
					    u_xlat9 = max(u_xlat9, 0.00200000009);
					    u_xlat9 = u_xlat9 * 0.280000001;
					    u_xlat9 = (-u_xlat9) * u_xlat23 + 1.0;
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat21 = u_xlat21 + _Glossiness;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat2.xzw = u_xlat2.xxx * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat9);
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat22) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xzw + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "SHADOWS_SCREEN" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _BumpScale;
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[4];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_7;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_4_0[8];
						vec4 unity_LODFade;
						vec4 unused_4_2;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_5_0[4];
						vec4 unity_IndirectSpecColor;
						vec4 unused_5_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_5_4[10];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _DitherMaskLOD2D;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					bool u_xlatb4;
					vec4 u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat14;
					bool u_xlatb14;
					float u_xlat20;
					vec2 u_xlat23;
					float u_xlat27;
					float u_xlat29;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.yx * vec2(0.25, 0.25);
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.z = u_xlat0.x * 0.0625 + unity_LODFade.y;
					    u_xlat0 = texture(_DitherMaskLOD2D, u_xlat0.yz);
					    u_xlat0.x = u_xlat0.w + -0.5;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat27 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat2.xy = u_xlat2.xy * vec2(_BumpScale);
					    u_xlat20 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat20 = min(u_xlat20, 1.0);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat20 = sqrt(u_xlat20);
					    u_xlat3.xyz = u_xlat2.yyy * vs_TEXCOORD3.xyz;
					    u_xlat2.xyw = vs_TEXCOORD2.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat20) + u_xlat2.xyw;
					    u_xlat29 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat29 = inversesqrt(u_xlat29);
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat12.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat13.x = vs_TEXCOORD2.w;
					    u_xlat13.y = vs_TEXCOORD3.w;
					    u_xlat13.z = vs_TEXCOORD4.w;
					    u_xlat5.xyz = (-u_xlat13.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6.x = unity_MatrixV[0].z;
					    u_xlat6.y = unity_MatrixV[1].z;
					    u_xlat6.z = unity_MatrixV[2].z;
					    u_xlat4.x = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat5.xyz = u_xlat13.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat5.x = (-u_xlat4.x) + u_xlat5.x;
					    u_xlat4.x = unity_ShadowFadeCenterAndType.w * u_xlat5.x + u_xlat4.x;
					    u_xlat4.x = u_xlat4.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlatb5 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb5){
					        u_xlatb14 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat14.xyz = (bool(u_xlatb14)) ? u_xlat6.xyz : u_xlat13.xyz;
					        u_xlat14.xyz = u_xlat14.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat14.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat14.x = u_xlat6.y * 0.25 + 0.75;
					        u_xlat23.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat6.x = max(u_xlat23.x, u_xlat14.x);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					    } else {
					        u_xlat6.x = float(1.0);
					        u_xlat6.y = float(1.0);
					        u_xlat6.z = float(1.0);
					        u_xlat6.w = float(1.0);
					    }
					    u_xlat14.x = dot(u_xlat6, unity_OcclusionMaskSelector);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat23.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat6 = texture(_ShadowMapTexture, u_xlat23.xy);
					    u_xlat14.x = u_xlat14.x + (-u_xlat6.x);
					    u_xlat4.x = u_xlat4.x * u_xlat14.x + u_xlat6.x;
					    u_xlat6 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat14.x = (-_OcclusionStrength) + 1.0;
					    u_xlat14.x = u_xlat6.y * _OcclusionStrength + u_xlat14.x;
					    u_xlat6.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    if(u_xlatb5){
					        u_xlatb4 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xzw = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xzw = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat5.xzw;
					        u_xlat5.xzw = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat5.xzw;
					        u_xlat5.xzw = u_xlat5.xzw + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb4)) ? u_xlat5.xzw : u_xlat13.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat13.x = u_xlat4.y * 0.25;
					        u_xlat5.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat23.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat13.x = max(u_xlat13.x, u_xlat5.x);
					        u_xlat4.x = min(u_xlat23.x, u_xlat13.x);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					        u_xlat5.xzw = u_xlat4.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat8 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					        u_xlat4.xyz = u_xlat4.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat2.w = 1.0;
					        u_xlat7.x = dot(u_xlat7, u_xlat2);
					        u_xlat7.y = dot(u_xlat8, u_xlat2);
					        u_xlat7.z = dot(u_xlat4, u_xlat2);
					    } else {
					        u_xlat2.w = 1.0;
					        u_xlat7.x = dot(unity_SHAr, u_xlat2);
					        u_xlat7.y = dot(unity_SHAg, u_xlat2);
					        u_xlat7.z = dot(unity_SHAb, u_xlat2);
					    }
					    u_xlat4.xyz = u_xlat7.xyz + vs_TEXCOORD5.xyz;
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat5.xzw = u_xlat14.xxx * unity_IndirectSpecColor.xyz;
					    u_xlat29 = (-u_xlat1.w) * _GlossMapScale + 1.0;
					    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat3.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat3.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat3.x = max(u_xlat3.x, 0.00100000005);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat3.x = dot(u_xlat2.xyz, (-u_xlat12.xyz));
					    u_xlat2.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat11 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat11 = dot(vec2(u_xlat11), vec2(u_xlat29));
					    u_xlat11 = u_xlat11 + -0.5;
					    u_xlat20 = (-u_xlat2.x) + 1.0;
					    u_xlat12.x = u_xlat20 * u_xlat20;
					    u_xlat12.x = u_xlat12.x * u_xlat12.x;
					    u_xlat20 = u_xlat20 * u_xlat12.x;
					    u_xlat20 = u_xlat11 * u_xlat20 + 1.0;
					    u_xlat3.x = -abs(u_xlat3.x) + 1.0;
					    u_xlat12.x = u_xlat3.x * u_xlat3.x;
					    u_xlat12.x = u_xlat12.x * u_xlat12.x;
					    u_xlat3.x = u_xlat3.x * u_xlat12.x;
					    u_xlat11 = u_xlat11 * u_xlat3.x + 1.0;
					    u_xlat11 = u_xlat11 * u_xlat20;
					    u_xlat2.x = u_xlat2.x * u_xlat11;
					    u_xlat11 = u_xlat29 * u_xlat29;
					    u_xlat11 = max(u_xlat11, 0.00200000009);
					    u_xlat11 = u_xlat11 * 0.280000001;
					    u_xlat11 = (-u_xlat11) * u_xlat29 + 1.0;
					    u_xlat27 = u_xlat1.w * _GlossMapScale + (-u_xlat27);
					    u_xlat27 = u_xlat27 + 1.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.xzw = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat2.xzw = u_xlat4.xyz * u_xlat14.xxx + u_xlat2.xzw;
					    u_xlat12.xyz = u_xlat5.xzw * vec3(u_xlat11);
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(u_xlat27);
					    u_xlat0.xyz = u_xlat3.xxx * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat12.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xzw + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "SHADOWS_SCREEN" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[4];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_7;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_4_0[8];
						vec4 unity_LODFade;
						vec4 unused_4_2;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_5_0[4];
						vec4 unity_IndirectSpecColor;
						vec4 unused_5_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_5_4[10];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _DitherMaskLOD2D;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					bool u_xlatb4;
					vec4 u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat10;
					vec3 u_xlat12;
					vec3 u_xlat13;
					float u_xlat18;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					bool u_xlatb27;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.yx * vec2(0.25, 0.25);
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.z = u_xlat0.x * 0.0625 + unity_LODFade.y;
					    u_xlat0 = texture(_DitherMaskLOD2D, u_xlat0.yz);
					    u_xlat0.x = u_xlat0.w + -0.5;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat24 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat25 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * vs_TEXCOORD4.xyz;
					    u_xlat25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat3.xyz = vec3(u_xlat25) * vs_TEXCOORD1.xyz;
					    u_xlat12.x = vs_TEXCOORD2.w;
					    u_xlat12.y = vs_TEXCOORD3.w;
					    u_xlat12.z = vs_TEXCOORD4.w;
					    u_xlat5.xyz = (-u_xlat12.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6.x = unity_MatrixV[0].z;
					    u_xlat6.y = unity_MatrixV[1].z;
					    u_xlat6.z = unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat5.xyz = u_xlat12.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat4.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat4.x = (-u_xlat27) + u_xlat4.x;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlatb4 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb4){
					        u_xlatb5 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat13.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat13.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat13.xyz;
					        u_xlat13.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat13.xyz;
					        u_xlat13.xyz = u_xlat13.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat5.xyz = (bool(u_xlatb5)) ? u_xlat13.xyz : u_xlat12.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat5.yzw = u_xlat5.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat13.x = u_xlat5.y * 0.25 + 0.75;
					        u_xlat6.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat5.x = max(u_xlat13.x, u_xlat6.x);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					    } else {
					        u_xlat5.x = float(1.0);
					        u_xlat5.y = float(1.0);
					        u_xlat5.z = float(1.0);
					        u_xlat5.w = float(1.0);
					    }
					    u_xlat5.x = dot(u_xlat5, unity_OcclusionMaskSelector);
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat13.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat6 = texture(_ShadowMapTexture, u_xlat13.xy);
					    u_xlat5.x = u_xlat5.x + (-u_xlat6.x);
					    u_xlat27 = u_xlat27 * u_xlat5.x + u_xlat6.x;
					    u_xlat5 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat5.x = (-_OcclusionStrength) + 1.0;
					    u_xlat5.x = u_xlat5.y * _OcclusionStrength + u_xlat5.x;
					    u_xlat13.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    if(u_xlatb4){
					        u_xlatb27 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb27)) ? u_xlat6.xyz : u_xlat12.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat27 = u_xlat4.y * 0.25;
					        u_xlat12.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat6.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat27 = max(u_xlat27, u_xlat12.x);
					        u_xlat4.x = min(u_xlat6.x, u_xlat27);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					        u_xlat7.xyz = u_xlat4.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat7.xyz);
					        u_xlat4.xyz = u_xlat4.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat2.w = 1.0;
					        u_xlat6.x = dot(u_xlat6, u_xlat2);
					        u_xlat6.y = dot(u_xlat7, u_xlat2);
					        u_xlat6.z = dot(u_xlat4, u_xlat2);
					    } else {
					        u_xlat2.w = 1.0;
					        u_xlat6.x = dot(unity_SHAr, u_xlat2);
					        u_xlat6.y = dot(unity_SHAg, u_xlat2);
					        u_xlat6.z = dot(unity_SHAb, u_xlat2);
					    }
					    u_xlat4.xyz = u_xlat6.xyz + vs_TEXCOORD5.xyz;
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat6.xyz = u_xlat5.xxx * unity_IndirectSpecColor.xyz;
					    u_xlat26 = (-_Glossiness) + 1.0;
					    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;
					    u_xlat25 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat25 = max(u_xlat25, 0.00100000005);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat7.xyz = vec3(u_xlat25) * u_xlat7.xyz;
					    u_xlat25 = dot(u_xlat2.xyz, (-u_xlat3.xyz));
					    u_xlat2.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat10 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);
					    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
					    u_xlat10 = u_xlat10 * u_xlat10;
					    u_xlat10 = dot(vec2(u_xlat10), vec2(u_xlat26));
					    u_xlat10 = u_xlat10 + -0.5;
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat3.x = u_xlat18 * u_xlat18;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat18 = u_xlat18 * u_xlat3.x;
					    u_xlat18 = u_xlat10 * u_xlat18 + 1.0;
					    u_xlat25 = -abs(u_xlat25) + 1.0;
					    u_xlat3.x = u_xlat25 * u_xlat25;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat10 = u_xlat10 * u_xlat25 + 1.0;
					    u_xlat10 = u_xlat10 * u_xlat18;
					    u_xlat2.x = u_xlat2.x * u_xlat10;
					    u_xlat10 = u_xlat26 * u_xlat26;
					    u_xlat10 = max(u_xlat10, 0.00200000009);
					    u_xlat10 = u_xlat10 * 0.280000001;
					    u_xlat10 = (-u_xlat10) * u_xlat26 + 1.0;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 + _Glossiness;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat2.xzw = u_xlat2.xxx * u_xlat13.xyz;
					    u_xlat2.xzw = u_xlat4.xyz * u_xlat5.xxx + u_xlat2.xzw;
					    u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat10);
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xzw + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _BumpScale;
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_3;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[8];
						vec4 unity_LODFade;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[4];
						vec4 unity_IndirectSpecColor;
						vec4 unused_3_2[18];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _DitherMaskLOD2D;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat9;
					vec3 u_xlat11;
					vec3 u_xlat12;
					float u_xlat16;
					float u_xlat21;
					float u_xlat23;
					float u_xlat24;
					bool u_xlatb24;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.yx * vec2(0.25, 0.25);
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.z = u_xlat0.x * 0.0625 + unity_LODFade.y;
					    u_xlat0 = texture(_DitherMaskLOD2D, u_xlat0.yz);
					    u_xlat0.x = u_xlat0.w + -0.5;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat21 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat2.xy = u_xlat2.xy * vec2(_BumpScale);
					    u_xlat16 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat16 = min(u_xlat16, 1.0);
					    u_xlat16 = (-u_xlat16) + 1.0;
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat3.xyz = u_xlat2.yyy * vs_TEXCOORD3.xyz;
					    u_xlat2.xyw = vs_TEXCOORD2.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat16) + u_xlat2.xyw;
					    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat2.xyz = vec3(u_xlat23) * u_xlat2.xyz;
					    u_xlat23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat3.xyz = vec3(u_xlat23) * vs_TEXCOORD1.xyz;
					    u_xlatb24 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb24){
					        u_xlatb24 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat12.x = vs_TEXCOORD2.w;
					        u_xlat12.y = vs_TEXCOORD3.w;
					        u_xlat12.z = vs_TEXCOORD4.w;
					        u_xlat4.xyz = (bool(u_xlatb24)) ? u_xlat4.xyz : u_xlat12.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat24 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat11.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat24, u_xlat11.x);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat24 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat4 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = (-_OcclusionStrength) + 1.0;
					    u_xlat4.x = u_xlat4.y * _OcclusionStrength + u_xlat4.x;
					    u_xlat11.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * unity_IndirectSpecColor.xyz;
					    u_xlat24 = (-u_xlat1.w) * _GlossMapScale + 1.0;
					    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat23) + _WorldSpaceLightPos0.xyz;
					    u_xlat23 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat23 = max(u_xlat23, 0.00100000005);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat6.xyz = vec3(u_xlat23) * u_xlat6.xyz;
					    u_xlat23 = dot(u_xlat2.xyz, (-u_xlat3.xyz));
					    u_xlat2.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat9 = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat9 = dot(vec2(u_xlat9), vec2(u_xlat24));
					    u_xlat9 = u_xlat9 + -0.5;
					    u_xlat16 = (-u_xlat2.x) + 1.0;
					    u_xlat3.x = u_xlat16 * u_xlat16;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat16 = u_xlat16 * u_xlat3.x;
					    u_xlat16 = u_xlat9 * u_xlat16 + 1.0;
					    u_xlat23 = -abs(u_xlat23) + 1.0;
					    u_xlat3.x = u_xlat23 * u_xlat23;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat23 = u_xlat23 * u_xlat3.x;
					    u_xlat9 = u_xlat9 * u_xlat23 + 1.0;
					    u_xlat9 = u_xlat9 * u_xlat16;
					    u_xlat2.x = u_xlat2.x * u_xlat9;
					    u_xlat9 = u_xlat24 * u_xlat24;
					    u_xlat9 = max(u_xlat9, 0.00200000009);
					    u_xlat9 = u_xlat9 * 0.280000001;
					    u_xlat9 = (-u_xlat9) * u_xlat24 + 1.0;
					    u_xlat21 = u_xlat1.w * _GlossMapScale + (-u_xlat21);
					    u_xlat21 = u_xlat21 + 1.0;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat11.xyz;
					    u_xlat2.xyz = u_xlat5.xyz * vec3(u_xlat9);
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat23) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat0.xyz;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "FORWARD_DELTA"
			LOD 300
			Tags { "LIGHTMODE" = "FORWARDADD" "PerformanceChecks" = "False" "RenderType" = "Opaque" }
			Blend Zero One, Zero One
			ZWrite Off
			GpuProgramID 115421
			Program "vp" {
				SubProgram "d3d11 " {
					Keywords { "POINT" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3.x = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1 = unity_ObjectToWorld[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    u_xlat2.w = 0.0;
					    vs_TEXCOORD2 = u_xlat2.wwwx;
					    vs_TEXCOORD3 = u_xlat2.wwwy;
					    vs_TEXCOORD4.w = u_xlat2.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD4.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = unity_WorldToLight[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat1.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3.x = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.yzx * u_xlat2.zxy;
					    u_xlat0.xyz = u_xlat2.yzx * u_xlat0.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    u_xlat1.w = 0.0;
					    vs_TEXCOORD2 = u_xlat1.wwwx;
					    vs_TEXCOORD3 = u_xlat1.wwwy;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD4.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat6;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat6 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat6);
					    u_xlat3.x = cos(u_xlat6);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1 = unity_ObjectToWorld[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat2.x;
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat0.yzx * u_xlat3.zxy;
					    u_xlat0.xyz = u_xlat3.yzx * u_xlat0.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD3.w = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat2.z;
					    u_xlat0 = u_xlat1.yyyy * unity_WorldToLight[1];
					    u_xlat0 = unity_WorldToLight[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_WorldToLight[2] * u_xlat1.zzzz + u_xlat0;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3.x = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1 = unity_ObjectToWorld[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    u_xlat2.w = 0.0;
					    vs_TEXCOORD2 = u_xlat2.wwwx;
					    vs_TEXCOORD3 = u_xlat2.wwwy;
					    vs_TEXCOORD4.w = u_xlat2.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD4.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_WorldToLight[1];
					    u_xlat0 = unity_WorldToLight[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_WorldToLight[2] * u_xlat1.zzzz + u_xlat0;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat6;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat6 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat6);
					    u_xlat3.x = cos(u_xlat6);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1 = unity_ObjectToWorld[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat2.x;
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat0.yzx * u_xlat3.zxy;
					    u_xlat0.xyz = u_xlat3.yzx * u_xlat0.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD3.w = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat2.z;
					    u_xlat0.xyz = u_xlat1.yyy * unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = unity_WorldToLight[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat1.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3.x = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1 = unity_ObjectToWorld[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    u_xlat2.w = 0.0;
					    vs_TEXCOORD2 = u_xlat2.wwwx;
					    vs_TEXCOORD3 = u_xlat2.wwwy;
					    vs_TEXCOORD4.w = u_xlat2.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD4.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = unity_WorldToLight[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat1.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec2 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat6;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat6 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat6);
					    u_xlat3.x = cos(u_xlat6);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1 = unity_ObjectToWorld[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat2.x;
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat0.yzx * u_xlat3.zxy;
					    u_xlat0.xyz = u_xlat3.yzx * u_xlat0.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD3.w = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat2.z;
					    u_xlat0.xy = u_xlat1.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec2 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3.x = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1 = unity_ObjectToWorld[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    u_xlat2.w = 0.0;
					    vs_TEXCOORD2 = u_xlat2.wwwx;
					    vs_TEXCOORD3 = u_xlat2.wwwy;
					    vs_TEXCOORD4.w = u_xlat2.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD4.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat6;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat6 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat6);
					    u_xlat3.x = cos(u_xlat6);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1 = unity_ObjectToWorld[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat2.x;
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat0.yzx * u_xlat3.zxy;
					    u_xlat0.xyz = u_xlat3.yzx * u_xlat0.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD3.w = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat2.z;
					    u_xlat0.xyz = u_xlat1.yyy * unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = unity_WorldToLight[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat1.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "POINT" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					float u_xlat13;
					float u_xlat24;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat2;
					    u_xlat3 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat3 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat3;
					    u_xlat3 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat3;
					    u_xlat3 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat3;
					    u_xlat4 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat4;
					    u_xlat4.xyz = u_xlat4.xyz + (-_WorldCenter.xyz);
					    u_xlat5.x = dot(u_xlat4.xz, u_xlat4.xz);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat13 = u_xlat5.x / _WorldRadius;
					    u_xlat6.x = sin(u_xlat13);
					    u_xlat7 = cos(u_xlat13);
					    u_xlat5.x = u_xlat6.x / u_xlat5.x;
					    u_xlat6.y = u_xlat7;
					    u_xlat6.xz = u_xlat4.xz * u_xlat5.xx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat4.yyy + _WorldCenter.xyz;
					    u_xlat5 = u_xlat4.yyyy * unity_WorldToObject[1];
					    u_xlat5 = unity_WorldToObject[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = unity_WorldToObject[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat4 = unity_WorldToObject[3] * u_xlat4.wwww + u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * unity_ObjectToWorld[1];
					    u_xlat5 = unity_ObjectToWorld[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = unity_ObjectToWorld[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat6 = u_xlat5 + unity_ObjectToWorld[3];
					    u_xlat5 = unity_ObjectToWorld[3] * u_xlat4.wwww + u_xlat5;
					    u_xlat3 = u_xlat3 * u_xlat6.yyyy;
					    u_xlat2 = u_xlat2 * u_xlat6.xxxx + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat6.zzzz + u_xlat2;
					    gl_Position = u_xlat0 * u_xlat6.wwww + u_xlat1;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat4.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat4.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat4.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat4.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    u_xlat1.w = 0.0;
					    vs_TEXCOORD2 = u_xlat1.wwwx;
					    vs_TEXCOORD3 = u_xlat1.wwwy;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    vs_TEXCOORD4.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = unity_WorldToLight[0].xyz * u_xlat5.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat5.zzz + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat5.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    gl_Position = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.yzx * u_xlat2.zxy;
					    u_xlat0.xyz = u_xlat2.yzx * u_xlat0.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    gl_Position = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    u_xlat1.w = 0.0;
					    vs_TEXCOORD2 = u_xlat1.wwwx;
					    vs_TEXCOORD3 = u_xlat1.wwwy;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "SPOT" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					float u_xlat13;
					float u_xlat24;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat2;
					    u_xlat3 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat3 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat3;
					    u_xlat3 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat3;
					    u_xlat3 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat3;
					    u_xlat4 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat4;
					    u_xlat4.xyz = u_xlat4.xyz + (-_WorldCenter.xyz);
					    u_xlat5.x = dot(u_xlat4.xz, u_xlat4.xz);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat13 = u_xlat5.x / _WorldRadius;
					    u_xlat6.x = sin(u_xlat13);
					    u_xlat7 = cos(u_xlat13);
					    u_xlat5.x = u_xlat6.x / u_xlat5.x;
					    u_xlat6.y = u_xlat7;
					    u_xlat6.xz = u_xlat4.xz * u_xlat5.xx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat4.yyy + _WorldCenter.xyz;
					    u_xlat5 = u_xlat4.yyyy * unity_WorldToObject[1];
					    u_xlat5 = unity_WorldToObject[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = unity_WorldToObject[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat4 = unity_WorldToObject[3] * u_xlat4.wwww + u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * unity_ObjectToWorld[1];
					    u_xlat5 = unity_ObjectToWorld[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = unity_ObjectToWorld[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat6 = u_xlat5 + unity_ObjectToWorld[3];
					    u_xlat5 = unity_ObjectToWorld[3] * u_xlat4.wwww + u_xlat5;
					    u_xlat3 = u_xlat3 * u_xlat6.yyyy;
					    u_xlat2 = u_xlat2 * u_xlat6.xxxx + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat6.zzzz + u_xlat2;
					    gl_Position = u_xlat0 * u_xlat6.wwww + u_xlat1;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat4.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat4.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat4.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat4.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.yzx * u_xlat2.zxy;
					    u_xlat0.xyz = u_xlat2.yzx * u_xlat0.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat0 = u_xlat5.yyyy * unity_WorldToLight[1];
					    u_xlat0 = unity_WorldToLight[0] * u_xlat5.xxxx + u_xlat0;
					    u_xlat0 = unity_WorldToLight[2] * u_xlat5.zzzz + u_xlat0;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat5.wwww + u_xlat0;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "SPOT" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					float u_xlat13;
					float u_xlat24;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat2;
					    u_xlat3 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat3 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat3;
					    u_xlat3 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat3;
					    u_xlat3 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat3;
					    u_xlat4 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat4;
					    u_xlat4.xyz = u_xlat4.xyz + (-_WorldCenter.xyz);
					    u_xlat5.x = dot(u_xlat4.xz, u_xlat4.xz);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat13 = u_xlat5.x / _WorldRadius;
					    u_xlat6.x = sin(u_xlat13);
					    u_xlat7 = cos(u_xlat13);
					    u_xlat5.x = u_xlat6.x / u_xlat5.x;
					    u_xlat6.y = u_xlat7;
					    u_xlat6.xz = u_xlat4.xz * u_xlat5.xx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat4.yyy + _WorldCenter.xyz;
					    u_xlat5 = u_xlat4.yyyy * unity_WorldToObject[1];
					    u_xlat5 = unity_WorldToObject[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = unity_WorldToObject[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat4 = unity_WorldToObject[3] * u_xlat4.wwww + u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * unity_ObjectToWorld[1];
					    u_xlat5 = unity_ObjectToWorld[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = unity_ObjectToWorld[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat6 = u_xlat5 + unity_ObjectToWorld[3];
					    u_xlat5 = unity_ObjectToWorld[3] * u_xlat4.wwww + u_xlat5;
					    u_xlat3 = u_xlat3 * u_xlat6.yyyy;
					    u_xlat2 = u_xlat2 * u_xlat6.xxxx + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat6.zzzz + u_xlat2;
					    gl_Position = u_xlat0 * u_xlat6.wwww + u_xlat1;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat4.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat4.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat4.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat4.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    u_xlat1.w = 0.0;
					    vs_TEXCOORD2 = u_xlat1.wwwx;
					    vs_TEXCOORD3 = u_xlat1.wwwy;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    vs_TEXCOORD4.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat0 = u_xlat5.yyyy * unity_WorldToLight[1];
					    u_xlat0 = unity_WorldToLight[0] * u_xlat5.xxxx + u_xlat0;
					    u_xlat0 = unity_WorldToLight[2] * u_xlat5.zzzz + u_xlat0;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat5.wwww + u_xlat0;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "POINT_COOKIE" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					float u_xlat13;
					float u_xlat24;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat2;
					    u_xlat3 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat3 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat3;
					    u_xlat3 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat3;
					    u_xlat3 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat3;
					    u_xlat4 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat4;
					    u_xlat4.xyz = u_xlat4.xyz + (-_WorldCenter.xyz);
					    u_xlat5.x = dot(u_xlat4.xz, u_xlat4.xz);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat13 = u_xlat5.x / _WorldRadius;
					    u_xlat6.x = sin(u_xlat13);
					    u_xlat7 = cos(u_xlat13);
					    u_xlat5.x = u_xlat6.x / u_xlat5.x;
					    u_xlat6.y = u_xlat7;
					    u_xlat6.xz = u_xlat4.xz * u_xlat5.xx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat4.yyy + _WorldCenter.xyz;
					    u_xlat5 = u_xlat4.yyyy * unity_WorldToObject[1];
					    u_xlat5 = unity_WorldToObject[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = unity_WorldToObject[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat4 = unity_WorldToObject[3] * u_xlat4.wwww + u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * unity_ObjectToWorld[1];
					    u_xlat5 = unity_ObjectToWorld[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = unity_ObjectToWorld[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat6 = u_xlat5 + unity_ObjectToWorld[3];
					    u_xlat5 = unity_ObjectToWorld[3] * u_xlat4.wwww + u_xlat5;
					    u_xlat3 = u_xlat3 * u_xlat6.yyyy;
					    u_xlat2 = u_xlat2 * u_xlat6.xxxx + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat6.zzzz + u_xlat2;
					    gl_Position = u_xlat0 * u_xlat6.wwww + u_xlat1;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat4.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat4.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat4.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat4.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.yzx * u_xlat2.zxy;
					    u_xlat0.xyz = u_xlat2.yzx * u_xlat0.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat0.xyz = u_xlat5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = unity_WorldToLight[0].xyz * u_xlat5.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat5.zzz + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat5.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "POINT_COOKIE" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					float u_xlat13;
					float u_xlat24;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat2;
					    u_xlat3 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat3 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat3;
					    u_xlat3 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat3;
					    u_xlat3 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat3;
					    u_xlat4 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat4;
					    u_xlat4.xyz = u_xlat4.xyz + (-_WorldCenter.xyz);
					    u_xlat5.x = dot(u_xlat4.xz, u_xlat4.xz);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat13 = u_xlat5.x / _WorldRadius;
					    u_xlat6.x = sin(u_xlat13);
					    u_xlat7 = cos(u_xlat13);
					    u_xlat5.x = u_xlat6.x / u_xlat5.x;
					    u_xlat6.y = u_xlat7;
					    u_xlat6.xz = u_xlat4.xz * u_xlat5.xx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat4.yyy + _WorldCenter.xyz;
					    u_xlat5 = u_xlat4.yyyy * unity_WorldToObject[1];
					    u_xlat5 = unity_WorldToObject[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = unity_WorldToObject[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat4 = unity_WorldToObject[3] * u_xlat4.wwww + u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * unity_ObjectToWorld[1];
					    u_xlat5 = unity_ObjectToWorld[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = unity_ObjectToWorld[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat6 = u_xlat5 + unity_ObjectToWorld[3];
					    u_xlat5 = unity_ObjectToWorld[3] * u_xlat4.wwww + u_xlat5;
					    u_xlat3 = u_xlat3 * u_xlat6.yyyy;
					    u_xlat2 = u_xlat2 * u_xlat6.xxxx + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat6.zzzz + u_xlat2;
					    gl_Position = u_xlat0 * u_xlat6.wwww + u_xlat1;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat4.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat4.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat4.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat4.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    u_xlat1.w = 0.0;
					    vs_TEXCOORD2 = u_xlat1.wwwx;
					    vs_TEXCOORD3 = u_xlat1.wwwy;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    vs_TEXCOORD4.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = unity_WorldToLight[0].xyz * u_xlat5.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat5.zzz + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat5.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "FIRSTPERSONVIEW" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec2 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					float u_xlat13;
					float u_xlat24;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat2;
					    u_xlat3 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat3 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat3;
					    u_xlat3 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat3;
					    u_xlat3 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat3;
					    u_xlat4 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat4;
					    u_xlat4.xyz = u_xlat4.xyz + (-_WorldCenter.xyz);
					    u_xlat5.x = dot(u_xlat4.xz, u_xlat4.xz);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat13 = u_xlat5.x / _WorldRadius;
					    u_xlat6.x = sin(u_xlat13);
					    u_xlat7 = cos(u_xlat13);
					    u_xlat5.x = u_xlat6.x / u_xlat5.x;
					    u_xlat6.y = u_xlat7;
					    u_xlat6.xz = u_xlat4.xz * u_xlat5.xx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat4.yyy + _WorldCenter.xyz;
					    u_xlat5 = u_xlat4.yyyy * unity_WorldToObject[1];
					    u_xlat5 = unity_WorldToObject[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = unity_WorldToObject[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat4 = unity_WorldToObject[3] * u_xlat4.wwww + u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * unity_ObjectToWorld[1];
					    u_xlat5 = unity_ObjectToWorld[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = unity_ObjectToWorld[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat6 = u_xlat5 + unity_ObjectToWorld[3];
					    u_xlat5 = unity_ObjectToWorld[3] * u_xlat4.wwww + u_xlat5;
					    u_xlat3 = u_xlat3 * u_xlat6.yyyy;
					    u_xlat2 = u_xlat2 * u_xlat6.xxxx + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat6.zzzz + u_xlat2;
					    gl_Position = u_xlat0 * u_xlat6.wwww + u_xlat1;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat4.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat4.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat4.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat4.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.yzx * u_xlat2.zxy;
					    u_xlat0.xyz = u_xlat2.yzx * u_xlat0.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat0.xy = u_xlat5.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat5.xx + u_xlat0.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat5.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = unity_WorldToLight[3].xy * u_xlat5.ww + u_xlat0.xy;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "FIRSTPERSONVIEW" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec2 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					float u_xlat13;
					float u_xlat24;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat2;
					    u_xlat3 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat3 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat3;
					    u_xlat3 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat3;
					    u_xlat3 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat3;
					    u_xlat4 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat4;
					    u_xlat4.xyz = u_xlat4.xyz + (-_WorldCenter.xyz);
					    u_xlat5.x = dot(u_xlat4.xz, u_xlat4.xz);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat13 = u_xlat5.x / _WorldRadius;
					    u_xlat6.x = sin(u_xlat13);
					    u_xlat7 = cos(u_xlat13);
					    u_xlat5.x = u_xlat6.x / u_xlat5.x;
					    u_xlat6.y = u_xlat7;
					    u_xlat6.xz = u_xlat4.xz * u_xlat5.xx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat4.yyy + _WorldCenter.xyz;
					    u_xlat5 = u_xlat4.yyyy * unity_WorldToObject[1];
					    u_xlat5 = unity_WorldToObject[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = unity_WorldToObject[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat4 = unity_WorldToObject[3] * u_xlat4.wwww + u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * unity_ObjectToWorld[1];
					    u_xlat5 = unity_ObjectToWorld[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = unity_ObjectToWorld[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat6 = u_xlat5 + unity_ObjectToWorld[3];
					    u_xlat5 = unity_ObjectToWorld[3] * u_xlat4.wwww + u_xlat5;
					    u_xlat3 = u_xlat3 * u_xlat6.yyyy;
					    u_xlat2 = u_xlat2 * u_xlat6.xxxx + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat6.zzzz + u_xlat2;
					    gl_Position = u_xlat0 * u_xlat6.wwww + u_xlat1;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat4.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat4.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat4.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat4.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    u_xlat1.w = 0.0;
					    vs_TEXCOORD2 = u_xlat1.wwwx;
					    vs_TEXCOORD3 = u_xlat1.wwwy;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    vs_TEXCOORD4.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat0.xy = u_xlat5.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat5.xx + u_xlat0.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat5.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = unity_WorldToLight[3].xy * u_xlat5.ww + u_xlat0.xy;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "POINT" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					float u_xlat13;
					float u_xlat24;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat2;
					    u_xlat3 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat3 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat3;
					    u_xlat3 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat3;
					    u_xlat3 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat3;
					    u_xlat4 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat4;
					    u_xlat4.xyz = u_xlat4.xyz + (-_WorldCenter.xyz);
					    u_xlat5.x = dot(u_xlat4.xz, u_xlat4.xz);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat13 = u_xlat5.x / _WorldRadius;
					    u_xlat6.x = sin(u_xlat13);
					    u_xlat7 = cos(u_xlat13);
					    u_xlat5.x = u_xlat6.x / u_xlat5.x;
					    u_xlat6.y = u_xlat7;
					    u_xlat6.xz = u_xlat4.xz * u_xlat5.xx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat4.yyy + _WorldCenter.xyz;
					    u_xlat5 = u_xlat4.yyyy * unity_WorldToObject[1];
					    u_xlat5 = unity_WorldToObject[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = unity_WorldToObject[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat4 = unity_WorldToObject[3] * u_xlat4.wwww + u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * unity_ObjectToWorld[1];
					    u_xlat5 = unity_ObjectToWorld[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = unity_ObjectToWorld[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat6 = u_xlat5 + unity_ObjectToWorld[3];
					    u_xlat5 = unity_ObjectToWorld[3] * u_xlat4.wwww + u_xlat5;
					    u_xlat3 = u_xlat3 * u_xlat6.yyyy;
					    u_xlat2 = u_xlat2 * u_xlat6.xxxx + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat6.zzzz + u_xlat2;
					    gl_Position = u_xlat0 * u_xlat6.wwww + u_xlat1;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat4.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat4.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat4.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat4.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.yzx * u_xlat2.zxy;
					    u_xlat0.xyz = u_xlat2.yzx * u_xlat0.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat0.xyz = u_xlat5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = unity_WorldToLight[0].xyz * u_xlat5.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat5.zzz + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat5.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3.x = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1 = unity_ObjectToWorld[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    u_xlat2.w = 0.0;
					    vs_TEXCOORD2 = u_xlat2.wwwx;
					    vs_TEXCOORD3 = u_xlat2.wwwy;
					    vs_TEXCOORD4.w = u_xlat2.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD4.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = unity_WorldToLight[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat1.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3.x = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.yzx * u_xlat2.zxy;
					    u_xlat0.xyz = u_xlat2.yzx * u_xlat0.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    u_xlat1.w = 0.0;
					    vs_TEXCOORD2 = u_xlat1.wwwx;
					    vs_TEXCOORD3 = u_xlat1.wwwy;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD4.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LOD_FADE_CROSSFADE" "SPOT" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat6;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat6 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat6);
					    u_xlat3.x = cos(u_xlat6);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1 = unity_ObjectToWorld[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat2.x;
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat0.yzx * u_xlat3.zxy;
					    u_xlat0.xyz = u_xlat3.yzx * u_xlat0.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD3.w = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat2.z;
					    u_xlat0 = u_xlat1.yyyy * unity_WorldToLight[1];
					    u_xlat0 = unity_WorldToLight[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_WorldToLight[2] * u_xlat1.zzzz + u_xlat0;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LOD_FADE_CROSSFADE" "SPOT" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3.x = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1 = unity_ObjectToWorld[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    u_xlat2.w = 0.0;
					    vs_TEXCOORD2 = u_xlat2.wwwx;
					    vs_TEXCOORD3 = u_xlat2.wwwy;
					    vs_TEXCOORD4.w = u_xlat2.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD4.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_WorldToLight[1];
					    u_xlat0 = unity_WorldToLight[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_WorldToLight[2] * u_xlat1.zzzz + u_xlat0;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT_COOKIE" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat6;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat6 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat6);
					    u_xlat3.x = cos(u_xlat6);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1 = unity_ObjectToWorld[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat2.x;
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat0.yzx * u_xlat3.zxy;
					    u_xlat0.xyz = u_xlat3.yzx * u_xlat0.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD3.w = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat2.z;
					    u_xlat0.xyz = u_xlat1.yyy * unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = unity_WorldToLight[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat1.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT_COOKIE" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3.x = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1 = unity_ObjectToWorld[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    u_xlat2.w = 0.0;
					    vs_TEXCOORD2 = u_xlat2.wwwx;
					    vs_TEXCOORD3 = u_xlat2.wwwy;
					    vs_TEXCOORD4.w = u_xlat2.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD4.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = unity_WorldToLight[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat1.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec2 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat6;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat6 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat6);
					    u_xlat3.x = cos(u_xlat6);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1 = unity_ObjectToWorld[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat2.x;
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat0.yzx * u_xlat3.zxy;
					    u_xlat0.xyz = u_xlat3.yzx * u_xlat0.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD3.w = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat2.z;
					    u_xlat0.xy = u_xlat1.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec2 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3.x = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1 = unity_ObjectToWorld[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    u_xlat2.w = 0.0;
					    vs_TEXCOORD2 = u_xlat2.wwwx;
					    vs_TEXCOORD3 = u_xlat2.wwwy;
					    vs_TEXCOORD4.w = u_xlat2.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD4.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat6;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat6 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat6);
					    u_xlat3.x = cos(u_xlat6);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1 = unity_ObjectToWorld[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat2.x;
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat0.yzx * u_xlat3.zxy;
					    u_xlat0.xyz = u_xlat3.yzx * u_xlat0.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD3.w = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat2.z;
					    u_xlat0.xyz = u_xlat1.yyy * unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = unity_WorldToLight[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat1.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					Keywords { "POINT" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_7[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_9[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat3.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat3.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb18 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb18){
					        u_xlatb18 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb18)) ? u_xlat4.xyz : vs_TEXCOORD5.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat18 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat19 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat18, u_xlat19);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat18 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat3 = texture(_LightTexture0, vec2(u_xlat19));
					    u_xlat18 = u_xlat18 * u_xlat3.x;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat5.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat18 = (-_Glossiness) + 1.0;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat19) + (-u_xlat2.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.00100000005);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat18 = dot(vec2(u_xlat7), vec2(u_xlat18));
					    u_xlat18 = u_xlat18 + -0.5;
					    u_xlat7 = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7 = u_xlat7 * u_xlat13;
					    u_xlat7 = u_xlat18 * u_xlat7 + 1.0;
					    u_xlat13 = -abs(u_xlat19) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat13 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat7;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _BumpScale;
						float _GlossMapScale;
						vec4 unused_0_7[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat9;
					float u_xlat13;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					bool u_xlatb20;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat18 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat1.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpScale);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = vs_TEXCOORD2.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlatb20 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb20){
					        u_xlatb20 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat3.xyz = (bool(u_xlatb20)) ? u_xlat3.xyz : vs_TEXCOORD5.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat20 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat9 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat20, u_xlat9);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat20 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat3.xyz = vec3(u_xlat20) * _LightColor0.xyz;
					    u_xlat19 = (-u_xlat1.w) * _GlossMapScale + 1.0;
					    u_xlat4.x = vs_TEXCOORD2.w;
					    u_xlat4.y = vs_TEXCOORD3.w;
					    u_xlat4.z = vs_TEXCOORD4.w;
					    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat18) + u_xlat4.xyz;
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat5.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7 = dot(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat7 = dot(vec2(u_xlat7), vec2(u_xlat19));
					    u_xlat7 = u_xlat7 + -0.5;
					    u_xlat13 = (-u_xlat1.x) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat13 = u_xlat7 * u_xlat13 + 1.0;
					    u_xlat18 = -abs(u_xlat18) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_7[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat13;
					float u_xlat18;
					float u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlatb19 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb19){
					        u_xlatb19 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat3.xyz = (bool(u_xlatb19)) ? u_xlat3.xyz : vs_TEXCOORD5.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat19 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat20 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat19, u_xlat20);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat19 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat19 = (-_Glossiness) + 1.0;
					    u_xlat4.x = vs_TEXCOORD2.w;
					    u_xlat4.y = vs_TEXCOORD3.w;
					    u_xlat4.z = vs_TEXCOORD4.w;
					    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat18) + u_xlat4.xyz;
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat5.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7 = dot(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat7 = dot(vec2(u_xlat7), vec2(u_xlat19));
					    u_xlat7 = u_xlat7 + -0.5;
					    u_xlat13 = (-u_xlat1.x) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat13 = u_xlat7 * u_xlat13 + 1.0;
					    u_xlat18 = -abs(u_xlat18) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _BumpScale;
						float _GlossMapScale;
						vec4 unused_0_7;
						mat4x4 unity_WorldToLight;
						vec4 unused_0_9[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					bool u_xlatb20;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat18 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat1.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpScale);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = vs_TEXCOORD2.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat3 = vs_TEXCOORD5.yyyy * unity_WorldToLight[1];
					    u_xlat3 = unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat3;
					    u_xlat3 = unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat3;
					    u_xlat3 = u_xlat3 + unity_WorldToLight[3];
					    u_xlatb18 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb18){
					        u_xlatb18 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb18)) ? u_xlat4.xyz : vs_TEXCOORD5.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat18 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat20 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat18, u_xlat20);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat18 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlatb20 = 0.0<u_xlat3.z;
					    u_xlat20 = u_xlatb20 ? 1.0 : float(0.0);
					    u_xlat4.xy = u_xlat3.xy / u_xlat3.ww;
					    u_xlat4.xy = u_xlat4.xy + vec2(0.5, 0.5);
					    u_xlat4 = texture(_LightTexture0, u_xlat4.xy);
					    u_xlat20 = u_xlat20 * u_xlat4.w;
					    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat3 = texture(_LightTextureB0, u_xlat3.xx);
					    u_xlat20 = u_xlat20 * u_xlat3.x;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * u_xlat3.xyz;
					    u_xlat5.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat18 = (-u_xlat1.w) * _GlossMapScale + 1.0;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat20) + (-u_xlat2.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.00100000005);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat18 = dot(vec2(u_xlat7), vec2(u_xlat18));
					    u_xlat18 = u_xlat18 + -0.5;
					    u_xlat7 = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7 = u_xlat7 * u_xlat13;
					    u_xlat7 = u_xlat18 * u_xlat7 + 1.0;
					    u_xlat13 = -abs(u_xlat19) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat13 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat7;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_7[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_9[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat3 = vs_TEXCOORD5.yyyy * unity_WorldToLight[1];
					    u_xlat3 = unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat3;
					    u_xlat3 = unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat3;
					    u_xlat3 = u_xlat3 + unity_WorldToLight[3];
					    u_xlatb18 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb18){
					        u_xlatb18 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb18)) ? u_xlat4.xyz : vs_TEXCOORD5.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat18 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat19 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat18, u_xlat19);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat18 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlatb19 = 0.0<u_xlat3.z;
					    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
					    u_xlat4.xy = u_xlat3.xy / u_xlat3.ww;
					    u_xlat4.xy = u_xlat4.xy + vec2(0.5, 0.5);
					    u_xlat4 = texture(_LightTexture0, u_xlat4.xy);
					    u_xlat19 = u_xlat19 * u_xlat4.w;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat3 = texture(_LightTextureB0, vec2(u_xlat20));
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat5.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat18 = (-_Glossiness) + 1.0;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat19) + (-u_xlat2.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.00100000005);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat18 = dot(vec2(u_xlat7), vec2(u_xlat18));
					    u_xlat18 = u_xlat18 + -0.5;
					    u_xlat7 = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7 = u_xlat7 * u_xlat13;
					    u_xlat7 = u_xlat18 * u_xlat7 + 1.0;
					    u_xlat13 = -abs(u_xlat19) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat13 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat7;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _BumpScale;
						float _GlossMapScale;
						vec4 unused_0_7;
						mat4x4 unity_WorldToLight;
						vec4 unused_0_9[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat18 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat1.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpScale);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = vs_TEXCOORD2.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat3.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat3.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb18 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb18){
					        u_xlatb18 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb18)) ? u_xlat4.xyz : vs_TEXCOORD5.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat18 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat20 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat18, u_xlat20);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat18 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat20));
					    u_xlat3 = texture(_LightTexture0, u_xlat3.xyz);
					    u_xlat20 = u_xlat3.w * u_xlat4.x;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * u_xlat3.xyz;
					    u_xlat5.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat18 = (-u_xlat1.w) * _GlossMapScale + 1.0;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat20) + (-u_xlat2.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.00100000005);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat18 = dot(vec2(u_xlat7), vec2(u_xlat18));
					    u_xlat18 = u_xlat18 + -0.5;
					    u_xlat7 = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7 = u_xlat7 * u_xlat13;
					    u_xlat7 = u_xlat18 * u_xlat7 + 1.0;
					    u_xlat13 = -abs(u_xlat19) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat13 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat7;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_7[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_9[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat3.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat3.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb18 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb18){
					        u_xlatb18 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb18)) ? u_xlat4.xyz : vs_TEXCOORD5.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat18 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat19 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat18, u_xlat19);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat18 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat19));
					    u_xlat3 = texture(_LightTexture0, u_xlat3.xyz);
					    u_xlat19 = u_xlat3.w * u_xlat4.x;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat5.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat18 = (-_Glossiness) + 1.0;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat19) + (-u_xlat2.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.00100000005);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat18 = dot(vec2(u_xlat7), vec2(u_xlat18));
					    u_xlat18 = u_xlat18 + -0.5;
					    u_xlat7 = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7 = u_xlat7 * u_xlat13;
					    u_xlat7 = u_xlat18 * u_xlat7 + 1.0;
					    u_xlat13 = -abs(u_xlat19) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat13 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat7;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _BumpScale;
						float _GlossMapScale;
						vec4 unused_0_7;
						mat4x4 unity_WorldToLight;
						vec4 unused_0_9[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat13;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					bool u_xlatb20;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat18 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat1.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpScale);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = vs_TEXCOORD2.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.yy * unity_WorldToLight[1].xy;
					    u_xlat3.xy = unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat3.xy;
					    u_xlat3.xy = unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat3.xy + unity_WorldToLight[3].xy;
					    u_xlatb20 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb20){
					        u_xlatb20 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb20)) ? u_xlat4.xyz : vs_TEXCOORD5.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat20 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat15 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat20, u_xlat15);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat20 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat3 = texture(_LightTexture0, u_xlat3.xy);
					    u_xlat20 = u_xlat20 * u_xlat3.w;
					    u_xlat3.xyz = vec3(u_xlat20) * _LightColor0.xyz;
					    u_xlat19 = (-u_xlat1.w) * _GlossMapScale + 1.0;
					    u_xlat4.x = vs_TEXCOORD2.w;
					    u_xlat4.y = vs_TEXCOORD3.w;
					    u_xlat4.z = vs_TEXCOORD4.w;
					    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat18) + u_xlat4.xyz;
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat5.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7 = dot(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat7 = dot(vec2(u_xlat7), vec2(u_xlat19));
					    u_xlat7 = u_xlat7 + -0.5;
					    u_xlat13 = (-u_xlat1.x) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat13 = u_xlat7 * u_xlat13 + 1.0;
					    u_xlat18 = -abs(u_xlat18) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_7[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_9[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat13;
					float u_xlat18;
					float u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.yy * unity_WorldToLight[1].xy;
					    u_xlat3.xy = unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat3.xy;
					    u_xlat3.xy = unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat3.xy + unity_WorldToLight[3].xy;
					    u_xlatb19 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb19){
					        u_xlatb19 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb19)) ? u_xlat4.xyz : vs_TEXCOORD5.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat19 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat20 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat19, u_xlat20);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat19 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat3 = texture(_LightTexture0, u_xlat3.xy);
					    u_xlat19 = u_xlat19 * u_xlat3.w;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat19 = (-_Glossiness) + 1.0;
					    u_xlat4.x = vs_TEXCOORD2.w;
					    u_xlat4.y = vs_TEXCOORD3.w;
					    u_xlat4.z = vs_TEXCOORD4.w;
					    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat18) + u_xlat4.xyz;
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat5.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7 = dot(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat7 = dot(vec2(u_xlat7), vec2(u_xlat19));
					    u_xlat7 = u_xlat7 + -0.5;
					    u_xlat13 = (-u_xlat1.x) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat13 = u_xlat7 * u_xlat13 + 1.0;
					    u_xlat18 = -abs(u_xlat18) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _BumpScale;
						float _GlossMapScale;
						vec4 unused_0_7;
						mat4x4 unity_WorldToLight;
						vec4 unused_0_9[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat18 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat1.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpScale);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = vs_TEXCOORD2.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat3.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat3.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb18 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb18){
					        u_xlatb18 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb18)) ? u_xlat4.xyz : vs_TEXCOORD5.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat18 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat20 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat18, u_xlat20);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat18 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat3 = texture(_LightTexture0, vec2(u_xlat20));
					    u_xlat18 = u_xlat18 * u_xlat3.x;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * u_xlat3.xyz;
					    u_xlat5.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat18 = (-u_xlat1.w) * _GlossMapScale + 1.0;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat20) + (-u_xlat2.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.00100000005);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat18 = dot(vec2(u_xlat7), vec2(u_xlat18));
					    u_xlat18 = u_xlat18 + -0.5;
					    u_xlat7 = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7 = u_xlat7 * u_xlat13;
					    u_xlat7 = u_xlat18 * u_xlat7 + 1.0;
					    u_xlat13 = -abs(u_xlat19) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat13 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat7;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "POINT" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_7[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_9[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat3.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat3.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb18 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb18){
					        u_xlatb18 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb18)) ? u_xlat4.xyz : vs_TEXCOORD5.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat18 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat19 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat18, u_xlat19);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat18 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat3 = texture(_LightTexture0, vec2(u_xlat19));
					    u_xlat18 = u_xlat18 * u_xlat3.x;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat5.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat18 = (-_Glossiness) + 1.0;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat19) + (-u_xlat2.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.00100000005);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat18 = dot(vec2(u_xlat7), vec2(u_xlat18));
					    u_xlat18 = u_xlat18 + -0.5;
					    u_xlat7 = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7 = u_xlat7 * u_xlat13;
					    u_xlat7 = u_xlat18 * u_xlat7 + 1.0;
					    u_xlat13 = -abs(u_xlat19) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat13 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat7;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _BumpScale;
						float _GlossMapScale;
						vec4 unused_0_7[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat9;
					float u_xlat13;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					bool u_xlatb20;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat18 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat1.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpScale);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = vs_TEXCOORD2.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlatb20 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb20){
					        u_xlatb20 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat3.xyz = (bool(u_xlatb20)) ? u_xlat3.xyz : vs_TEXCOORD5.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat20 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat9 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat20, u_xlat9);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat20 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat3.xyz = vec3(u_xlat20) * _LightColor0.xyz;
					    u_xlat19 = (-u_xlat1.w) * _GlossMapScale + 1.0;
					    u_xlat4.x = vs_TEXCOORD2.w;
					    u_xlat4.y = vs_TEXCOORD3.w;
					    u_xlat4.z = vs_TEXCOORD4.w;
					    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat18) + u_xlat4.xyz;
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat5.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7 = dot(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat7 = dot(vec2(u_xlat7), vec2(u_xlat19));
					    u_xlat7 = u_xlat7 + -0.5;
					    u_xlat13 = (-u_xlat1.x) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat13 = u_xlat7 * u_xlat13 + 1.0;
					    u_xlat18 = -abs(u_xlat18) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_7[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat13;
					float u_xlat18;
					float u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlatb19 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb19){
					        u_xlatb19 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat3.xyz = (bool(u_xlatb19)) ? u_xlat3.xyz : vs_TEXCOORD5.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat19 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat20 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat19, u_xlat20);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat19 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat19 = (-_Glossiness) + 1.0;
					    u_xlat4.x = vs_TEXCOORD2.w;
					    u_xlat4.y = vs_TEXCOORD3.w;
					    u_xlat4.z = vs_TEXCOORD4.w;
					    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat18) + u_xlat4.xyz;
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat5.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7 = dot(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat7 = dot(vec2(u_xlat7), vec2(u_xlat19));
					    u_xlat7 = u_xlat7 + -0.5;
					    u_xlat13 = (-u_xlat1.x) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat13 = u_xlat7 * u_xlat13 + 1.0;
					    u_xlat18 = -abs(u_xlat18) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "SPOT" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _BumpScale;
						float _GlossMapScale;
						vec4 unused_0_7;
						mat4x4 unity_WorldToLight;
						vec4 unused_0_9[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					bool u_xlatb20;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat18 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat1.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpScale);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = vs_TEXCOORD2.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat3 = vs_TEXCOORD5.yyyy * unity_WorldToLight[1];
					    u_xlat3 = unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat3;
					    u_xlat3 = unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat3;
					    u_xlat3 = u_xlat3 + unity_WorldToLight[3];
					    u_xlatb18 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb18){
					        u_xlatb18 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb18)) ? u_xlat4.xyz : vs_TEXCOORD5.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat18 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat20 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat18, u_xlat20);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat18 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlatb20 = 0.0<u_xlat3.z;
					    u_xlat20 = u_xlatb20 ? 1.0 : float(0.0);
					    u_xlat4.xy = u_xlat3.xy / u_xlat3.ww;
					    u_xlat4.xy = u_xlat4.xy + vec2(0.5, 0.5);
					    u_xlat4 = texture(_LightTexture0, u_xlat4.xy);
					    u_xlat20 = u_xlat20 * u_xlat4.w;
					    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat3 = texture(_LightTextureB0, u_xlat3.xx);
					    u_xlat20 = u_xlat20 * u_xlat3.x;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * u_xlat3.xyz;
					    u_xlat5.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat18 = (-u_xlat1.w) * _GlossMapScale + 1.0;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat20) + (-u_xlat2.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.00100000005);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat18 = dot(vec2(u_xlat7), vec2(u_xlat18));
					    u_xlat18 = u_xlat18 + -0.5;
					    u_xlat7 = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7 = u_xlat7 * u_xlat13;
					    u_xlat7 = u_xlat18 * u_xlat7 + 1.0;
					    u_xlat13 = -abs(u_xlat19) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat13 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat7;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "SPOT" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_7[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_9[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat3 = vs_TEXCOORD5.yyyy * unity_WorldToLight[1];
					    u_xlat3 = unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat3;
					    u_xlat3 = unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat3;
					    u_xlat3 = u_xlat3 + unity_WorldToLight[3];
					    u_xlatb18 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb18){
					        u_xlatb18 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb18)) ? u_xlat4.xyz : vs_TEXCOORD5.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat18 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat19 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat18, u_xlat19);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat18 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlatb19 = 0.0<u_xlat3.z;
					    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
					    u_xlat4.xy = u_xlat3.xy / u_xlat3.ww;
					    u_xlat4.xy = u_xlat4.xy + vec2(0.5, 0.5);
					    u_xlat4 = texture(_LightTexture0, u_xlat4.xy);
					    u_xlat19 = u_xlat19 * u_xlat4.w;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat3 = texture(_LightTextureB0, vec2(u_xlat20));
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat5.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat18 = (-_Glossiness) + 1.0;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat19) + (-u_xlat2.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.00100000005);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat18 = dot(vec2(u_xlat7), vec2(u_xlat18));
					    u_xlat18 = u_xlat18 + -0.5;
					    u_xlat7 = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7 = u_xlat7 * u_xlat13;
					    u_xlat7 = u_xlat18 * u_xlat7 + 1.0;
					    u_xlat13 = -abs(u_xlat19) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat13 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat7;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "POINT_COOKIE" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _BumpScale;
						float _GlossMapScale;
						vec4 unused_0_7;
						mat4x4 unity_WorldToLight;
						vec4 unused_0_9[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat18 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat1.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpScale);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = vs_TEXCOORD2.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat3.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat3.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb18 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb18){
					        u_xlatb18 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb18)) ? u_xlat4.xyz : vs_TEXCOORD5.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat18 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat20 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat18, u_xlat20);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat18 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat20));
					    u_xlat3 = texture(_LightTexture0, u_xlat3.xyz);
					    u_xlat20 = u_xlat3.w * u_xlat4.x;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * u_xlat3.xyz;
					    u_xlat5.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat18 = (-u_xlat1.w) * _GlossMapScale + 1.0;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat20) + (-u_xlat2.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.00100000005);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat18 = dot(vec2(u_xlat7), vec2(u_xlat18));
					    u_xlat18 = u_xlat18 + -0.5;
					    u_xlat7 = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7 = u_xlat7 * u_xlat13;
					    u_xlat7 = u_xlat18 * u_xlat7 + 1.0;
					    u_xlat13 = -abs(u_xlat19) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat13 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat7;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "POINT_COOKIE" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_7[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_9[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat3.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat3.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb18 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb18){
					        u_xlatb18 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb18)) ? u_xlat4.xyz : vs_TEXCOORD5.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat18 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat19 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat18, u_xlat19);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat18 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat19));
					    u_xlat3 = texture(_LightTexture0, u_xlat3.xyz);
					    u_xlat19 = u_xlat3.w * u_xlat4.x;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat5.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat18 = (-_Glossiness) + 1.0;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat19) + (-u_xlat2.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.00100000005);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat18 = dot(vec2(u_xlat7), vec2(u_xlat18));
					    u_xlat18 = u_xlat18 + -0.5;
					    u_xlat7 = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7 = u_xlat7 * u_xlat13;
					    u_xlat7 = u_xlat18 * u_xlat7 + 1.0;
					    u_xlat13 = -abs(u_xlat19) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat13 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat7;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "FIRSTPERSONVIEW" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _BumpScale;
						float _GlossMapScale;
						vec4 unused_0_7;
						mat4x4 unity_WorldToLight;
						vec4 unused_0_9[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat13;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					bool u_xlatb20;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat18 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat1.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpScale);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = vs_TEXCOORD2.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.yy * unity_WorldToLight[1].xy;
					    u_xlat3.xy = unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat3.xy;
					    u_xlat3.xy = unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat3.xy + unity_WorldToLight[3].xy;
					    u_xlatb20 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb20){
					        u_xlatb20 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb20)) ? u_xlat4.xyz : vs_TEXCOORD5.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat20 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat15 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat20, u_xlat15);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat20 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat3 = texture(_LightTexture0, u_xlat3.xy);
					    u_xlat20 = u_xlat20 * u_xlat3.w;
					    u_xlat3.xyz = vec3(u_xlat20) * _LightColor0.xyz;
					    u_xlat19 = (-u_xlat1.w) * _GlossMapScale + 1.0;
					    u_xlat4.x = vs_TEXCOORD2.w;
					    u_xlat4.y = vs_TEXCOORD3.w;
					    u_xlat4.z = vs_TEXCOORD4.w;
					    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat18) + u_xlat4.xyz;
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat5.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7 = dot(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat7 = dot(vec2(u_xlat7), vec2(u_xlat19));
					    u_xlat7 = u_xlat7 + -0.5;
					    u_xlat13 = (-u_xlat1.x) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat13 = u_xlat7 * u_xlat13 + 1.0;
					    u_xlat18 = -abs(u_xlat18) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "FIRSTPERSONVIEW" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_7[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_9[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat13;
					float u_xlat18;
					float u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.yy * unity_WorldToLight[1].xy;
					    u_xlat3.xy = unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat3.xy;
					    u_xlat3.xy = unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat3.xy + unity_WorldToLight[3].xy;
					    u_xlatb19 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb19){
					        u_xlatb19 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb19)) ? u_xlat4.xyz : vs_TEXCOORD5.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat19 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat20 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat19, u_xlat20);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat19 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat3 = texture(_LightTexture0, u_xlat3.xy);
					    u_xlat19 = u_xlat19 * u_xlat3.w;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat19 = (-_Glossiness) + 1.0;
					    u_xlat4.x = vs_TEXCOORD2.w;
					    u_xlat4.y = vs_TEXCOORD3.w;
					    u_xlat4.z = vs_TEXCOORD4.w;
					    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat18) + u_xlat4.xyz;
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat5.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7 = dot(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat7 = dot(vec2(u_xlat7), vec2(u_xlat19));
					    u_xlat7 = u_xlat7 + -0.5;
					    u_xlat13 = (-u_xlat1.x) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat13 = u_xlat7 * u_xlat13 + 1.0;
					    u_xlat18 = -abs(u_xlat18) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "POINT" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _BumpScale;
						float _GlossMapScale;
						vec4 unused_0_7;
						mat4x4 unity_WorldToLight;
						vec4 unused_0_9[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat18 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat1.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpScale);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = vs_TEXCOORD2.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat3.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat3.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb18 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb18){
					        u_xlatb18 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb18)) ? u_xlat4.xyz : vs_TEXCOORD5.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat18 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat20 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat18, u_xlat20);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat18 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat3 = texture(_LightTexture0, vec2(u_xlat20));
					    u_xlat18 = u_xlat18 * u_xlat3.x;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * u_xlat3.xyz;
					    u_xlat5.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat18 = (-u_xlat1.w) * _GlossMapScale + 1.0;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat20) + (-u_xlat2.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.00100000005);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat18 = dot(vec2(u_xlat7), vec2(u_xlat18));
					    u_xlat18 = u_xlat18 + -0.5;
					    u_xlat7 = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7 = u_xlat7 * u_xlat13;
					    u_xlat7 = u_xlat18 * u_xlat7 + 1.0;
					    u_xlat13 = -abs(u_xlat19) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat13 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat7;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_7[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_9[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[8];
						vec4 unity_LODFade;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _DitherMaskLOD2D;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.yx * vec2(0.25, 0.25);
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.z = u_xlat0.x * 0.0625 + unity_LODFade.y;
					    u_xlat0 = texture(_DitherMaskLOD2D, u_xlat0.yz);
					    u_xlat0.x = u_xlat0.w + -0.5;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat3.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat3.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb18 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb18){
					        u_xlatb18 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb18)) ? u_xlat4.xyz : vs_TEXCOORD5.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat18 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat19 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat18, u_xlat19);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat18 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat3 = texture(_LightTexture0, vec2(u_xlat19));
					    u_xlat18 = u_xlat18 * u_xlat3.x;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat5.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat18 = (-_Glossiness) + 1.0;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat19) + (-u_xlat2.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.00100000005);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat18 = dot(vec2(u_xlat7), vec2(u_xlat18));
					    u_xlat18 = u_xlat18 + -0.5;
					    u_xlat7 = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7 = u_xlat7 * u_xlat13;
					    u_xlat7 = u_xlat18 * u_xlat7 + 1.0;
					    u_xlat13 = -abs(u_xlat19) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat13 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat7;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _BumpScale;
						float _GlossMapScale;
						vec4 unused_0_7[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[8];
						vec4 unity_LODFade;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _DitherMaskLOD2D;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat9;
					float u_xlat13;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					bool u_xlatb20;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.yx * vec2(0.25, 0.25);
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.z = u_xlat0.x * 0.0625 + unity_LODFade.y;
					    u_xlat0 = texture(_DitherMaskLOD2D, u_xlat0.yz);
					    u_xlat0.x = u_xlat0.w + -0.5;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat18 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat1.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpScale);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = vs_TEXCOORD2.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlatb20 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb20){
					        u_xlatb20 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat3.xyz = (bool(u_xlatb20)) ? u_xlat3.xyz : vs_TEXCOORD5.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat20 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat9 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat20, u_xlat9);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat20 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat3.xyz = vec3(u_xlat20) * _LightColor0.xyz;
					    u_xlat19 = (-u_xlat1.w) * _GlossMapScale + 1.0;
					    u_xlat4.x = vs_TEXCOORD2.w;
					    u_xlat4.y = vs_TEXCOORD3.w;
					    u_xlat4.z = vs_TEXCOORD4.w;
					    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat18) + u_xlat4.xyz;
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat5.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7 = dot(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat7 = dot(vec2(u_xlat7), vec2(u_xlat19));
					    u_xlat7 = u_xlat7 + -0.5;
					    u_xlat13 = (-u_xlat1.x) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat13 = u_xlat7 * u_xlat13 + 1.0;
					    u_xlat18 = -abs(u_xlat18) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_7[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[8];
						vec4 unity_LODFade;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _DitherMaskLOD2D;
					uniform  sampler2D _MainTex;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat13;
					float u_xlat18;
					float u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.yx * vec2(0.25, 0.25);
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.z = u_xlat0.x * 0.0625 + unity_LODFade.y;
					    u_xlat0 = texture(_DitherMaskLOD2D, u_xlat0.yz);
					    u_xlat0.x = u_xlat0.w + -0.5;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlatb19 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb19){
					        u_xlatb19 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat3.xyz = (bool(u_xlatb19)) ? u_xlat3.xyz : vs_TEXCOORD5.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat19 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat20 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat19, u_xlat20);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat19 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat19 = (-_Glossiness) + 1.0;
					    u_xlat4.x = vs_TEXCOORD2.w;
					    u_xlat4.y = vs_TEXCOORD3.w;
					    u_xlat4.z = vs_TEXCOORD4.w;
					    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat18) + u_xlat4.xyz;
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat5.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7 = dot(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat7 = dot(vec2(u_xlat7), vec2(u_xlat19));
					    u_xlat7 = u_xlat7 + -0.5;
					    u_xlat13 = (-u_xlat1.x) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat13 = u_xlat7 * u_xlat13 + 1.0;
					    u_xlat18 = -abs(u_xlat18) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LOD_FADE_CROSSFADE" "SPOT" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _BumpScale;
						float _GlossMapScale;
						vec4 unused_0_7;
						mat4x4 unity_WorldToLight;
						vec4 unused_0_9[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[8];
						vec4 unity_LODFade;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _DitherMaskLOD2D;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					bool u_xlatb20;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.yx * vec2(0.25, 0.25);
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.z = u_xlat0.x * 0.0625 + unity_LODFade.y;
					    u_xlat0 = texture(_DitherMaskLOD2D, u_xlat0.yz);
					    u_xlat0.x = u_xlat0.w + -0.5;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat18 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat1.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpScale);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = vs_TEXCOORD2.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat3 = vs_TEXCOORD5.yyyy * unity_WorldToLight[1];
					    u_xlat3 = unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat3;
					    u_xlat3 = unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat3;
					    u_xlat3 = u_xlat3 + unity_WorldToLight[3];
					    u_xlatb18 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb18){
					        u_xlatb18 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb18)) ? u_xlat4.xyz : vs_TEXCOORD5.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat18 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat20 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat18, u_xlat20);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat18 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlatb20 = 0.0<u_xlat3.z;
					    u_xlat20 = u_xlatb20 ? 1.0 : float(0.0);
					    u_xlat4.xy = u_xlat3.xy / u_xlat3.ww;
					    u_xlat4.xy = u_xlat4.xy + vec2(0.5, 0.5);
					    u_xlat4 = texture(_LightTexture0, u_xlat4.xy);
					    u_xlat20 = u_xlat20 * u_xlat4.w;
					    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat3 = texture(_LightTextureB0, u_xlat3.xx);
					    u_xlat20 = u_xlat20 * u_xlat3.x;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * u_xlat3.xyz;
					    u_xlat5.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat18 = (-u_xlat1.w) * _GlossMapScale + 1.0;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat20) + (-u_xlat2.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.00100000005);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat18 = dot(vec2(u_xlat7), vec2(u_xlat18));
					    u_xlat18 = u_xlat18 + -0.5;
					    u_xlat7 = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7 = u_xlat7 * u_xlat13;
					    u_xlat7 = u_xlat18 * u_xlat7 + 1.0;
					    u_xlat13 = -abs(u_xlat19) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat13 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat7;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LOD_FADE_CROSSFADE" "SPOT" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_7[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_9[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[8];
						vec4 unity_LODFade;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _DitherMaskLOD2D;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.yx * vec2(0.25, 0.25);
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.z = u_xlat0.x * 0.0625 + unity_LODFade.y;
					    u_xlat0 = texture(_DitherMaskLOD2D, u_xlat0.yz);
					    u_xlat0.x = u_xlat0.w + -0.5;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat3 = vs_TEXCOORD5.yyyy * unity_WorldToLight[1];
					    u_xlat3 = unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat3;
					    u_xlat3 = unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat3;
					    u_xlat3 = u_xlat3 + unity_WorldToLight[3];
					    u_xlatb18 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb18){
					        u_xlatb18 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb18)) ? u_xlat4.xyz : vs_TEXCOORD5.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat18 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat19 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat18, u_xlat19);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat18 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlatb19 = 0.0<u_xlat3.z;
					    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
					    u_xlat4.xy = u_xlat3.xy / u_xlat3.ww;
					    u_xlat4.xy = u_xlat4.xy + vec2(0.5, 0.5);
					    u_xlat4 = texture(_LightTexture0, u_xlat4.xy);
					    u_xlat19 = u_xlat19 * u_xlat4.w;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat3 = texture(_LightTextureB0, vec2(u_xlat20));
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat5.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat18 = (-_Glossiness) + 1.0;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat19) + (-u_xlat2.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.00100000005);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat18 = dot(vec2(u_xlat7), vec2(u_xlat18));
					    u_xlat18 = u_xlat18 + -0.5;
					    u_xlat7 = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7 = u_xlat7 * u_xlat13;
					    u_xlat7 = u_xlat18 * u_xlat7 + 1.0;
					    u_xlat13 = -abs(u_xlat19) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat13 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat7;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT_COOKIE" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _BumpScale;
						float _GlossMapScale;
						vec4 unused_0_7;
						mat4x4 unity_WorldToLight;
						vec4 unused_0_9[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[8];
						vec4 unity_LODFade;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _DitherMaskLOD2D;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.yx * vec2(0.25, 0.25);
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.z = u_xlat0.x * 0.0625 + unity_LODFade.y;
					    u_xlat0 = texture(_DitherMaskLOD2D, u_xlat0.yz);
					    u_xlat0.x = u_xlat0.w + -0.5;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat18 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat1.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpScale);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = vs_TEXCOORD2.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat3.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat3.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb18 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb18){
					        u_xlatb18 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb18)) ? u_xlat4.xyz : vs_TEXCOORD5.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat18 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat20 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat18, u_xlat20);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat18 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat20));
					    u_xlat3 = texture(_LightTexture0, u_xlat3.xyz);
					    u_xlat20 = u_xlat3.w * u_xlat4.x;
					    u_xlat18 = u_xlat18 * u_xlat20;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * u_xlat3.xyz;
					    u_xlat5.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat18 = (-u_xlat1.w) * _GlossMapScale + 1.0;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat20) + (-u_xlat2.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.00100000005);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat18 = dot(vec2(u_xlat7), vec2(u_xlat18));
					    u_xlat18 = u_xlat18 + -0.5;
					    u_xlat7 = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7 = u_xlat7 * u_xlat13;
					    u_xlat7 = u_xlat18 * u_xlat7 + 1.0;
					    u_xlat13 = -abs(u_xlat19) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat13 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat7;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT_COOKIE" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_7[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_9[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[8];
						vec4 unity_LODFade;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _DitherMaskLOD2D;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.yx * vec2(0.25, 0.25);
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.z = u_xlat0.x * 0.0625 + unity_LODFade.y;
					    u_xlat0 = texture(_DitherMaskLOD2D, u_xlat0.yz);
					    u_xlat0.x = u_xlat0.w + -0.5;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat3.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat3.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb18 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb18){
					        u_xlatb18 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb18)) ? u_xlat4.xyz : vs_TEXCOORD5.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat18 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat19 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat18, u_xlat19);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat18 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat19));
					    u_xlat3 = texture(_LightTexture0, u_xlat3.xyz);
					    u_xlat19 = u_xlat3.w * u_xlat4.x;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat5.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat18 = (-_Glossiness) + 1.0;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat19) + (-u_xlat2.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.00100000005);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat18 = dot(vec2(u_xlat7), vec2(u_xlat18));
					    u_xlat18 = u_xlat18 + -0.5;
					    u_xlat7 = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7 = u_xlat7 * u_xlat13;
					    u_xlat7 = u_xlat18 * u_xlat7 + 1.0;
					    u_xlat13 = -abs(u_xlat19) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat13 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat7;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _BumpScale;
						float _GlossMapScale;
						vec4 unused_0_7;
						mat4x4 unity_WorldToLight;
						vec4 unused_0_9[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[8];
						vec4 unity_LODFade;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _DitherMaskLOD2D;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat13;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					bool u_xlatb20;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.yx * vec2(0.25, 0.25);
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.z = u_xlat0.x * 0.0625 + unity_LODFade.y;
					    u_xlat0 = texture(_DitherMaskLOD2D, u_xlat0.yz);
					    u_xlat0.x = u_xlat0.w + -0.5;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat18 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat1.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpScale);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = vs_TEXCOORD2.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.yy * unity_WorldToLight[1].xy;
					    u_xlat3.xy = unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat3.xy;
					    u_xlat3.xy = unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat3.xy + unity_WorldToLight[3].xy;
					    u_xlatb20 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb20){
					        u_xlatb20 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb20)) ? u_xlat4.xyz : vs_TEXCOORD5.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat20 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat15 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat20, u_xlat15);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat20 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat3 = texture(_LightTexture0, u_xlat3.xy);
					    u_xlat20 = u_xlat20 * u_xlat3.w;
					    u_xlat3.xyz = vec3(u_xlat20) * _LightColor0.xyz;
					    u_xlat19 = (-u_xlat1.w) * _GlossMapScale + 1.0;
					    u_xlat4.x = vs_TEXCOORD2.w;
					    u_xlat4.y = vs_TEXCOORD3.w;
					    u_xlat4.z = vs_TEXCOORD4.w;
					    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat18) + u_xlat4.xyz;
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat5.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7 = dot(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat7 = dot(vec2(u_xlat7), vec2(u_xlat19));
					    u_xlat7 = u_xlat7 + -0.5;
					    u_xlat13 = (-u_xlat1.x) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat13 = u_xlat7 * u_xlat13 + 1.0;
					    u_xlat18 = -abs(u_xlat18) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_7[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_9[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[8];
						vec4 unity_LODFade;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _DitherMaskLOD2D;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat13;
					float u_xlat18;
					float u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.yx * vec2(0.25, 0.25);
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.z = u_xlat0.x * 0.0625 + unity_LODFade.y;
					    u_xlat0 = texture(_DitherMaskLOD2D, u_xlat0.yz);
					    u_xlat0.x = u_xlat0.w + -0.5;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat3.xy = vs_TEXCOORD5.yy * unity_WorldToLight[1].xy;
					    u_xlat3.xy = unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat3.xy;
					    u_xlat3.xy = unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat3.xy + unity_WorldToLight[3].xy;
					    u_xlatb19 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb19){
					        u_xlatb19 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb19)) ? u_xlat4.xyz : vs_TEXCOORD5.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat19 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat20 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat19, u_xlat20);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat19 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat3 = texture(_LightTexture0, u_xlat3.xy);
					    u_xlat19 = u_xlat19 * u_xlat3.w;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat19 = (-_Glossiness) + 1.0;
					    u_xlat4.x = vs_TEXCOORD2.w;
					    u_xlat4.y = vs_TEXCOORD3.w;
					    u_xlat4.z = vs_TEXCOORD4.w;
					    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat18) + u_xlat4.xyz;
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat5.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7 = dot(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat7 = dot(vec2(u_xlat7), vec2(u_xlat19));
					    u_xlat7 = u_xlat7 + -0.5;
					    u_xlat13 = (-u_xlat1.x) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat13 = u_xlat7 * u_xlat13 + 1.0;
					    u_xlat18 = -abs(u_xlat18) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _BumpScale;
						float _GlossMapScale;
						vec4 unused_0_7;
						mat4x4 unity_WorldToLight;
						vec4 unused_0_9[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[8];
						vec4 unity_LODFade;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _DitherMaskLOD2D;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.yx * vec2(0.25, 0.25);
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.z = u_xlat0.x * 0.0625 + unity_LODFade.y;
					    u_xlat0 = texture(_DitherMaskLOD2D, u_xlat0.yz);
					    u_xlat0.x = u_xlat0.w + -0.5;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat18 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat1.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpScale);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = vs_TEXCOORD2.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat3.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat3.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb18 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb18){
					        u_xlatb18 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb18)) ? u_xlat4.xyz : vs_TEXCOORD5.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat18 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat20 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat18, u_xlat20);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat18 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat3 = texture(_LightTexture0, vec2(u_xlat20));
					    u_xlat18 = u_xlat18 * u_xlat3.x;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * u_xlat3.xyz;
					    u_xlat5.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat18 = (-u_xlat1.w) * _GlossMapScale + 1.0;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat20) + (-u_xlat2.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.00100000005);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat18 = dot(vec2(u_xlat7), vec2(u_xlat18));
					    u_xlat18 = u_xlat18 + -0.5;
					    u_xlat7 = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7 = u_xlat7 * u_xlat13;
					    u_xlat7 = u_xlat18 * u_xlat7 + 1.0;
					    u_xlat13 = -abs(u_xlat19) + 1.0;
					    u_xlat19 = u_xlat13 * u_xlat13;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat13 = u_xlat13 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat13 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat7;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "ShadowCaster"
			LOD 300
			Tags { "LIGHTMODE" = "SHADOWCASTER" "PerformanceChecks" = "False" "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" }
			GpuProgramID 136289
			Program "vp" {
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_DEPTH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_2_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat8;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * unity_LightShadowBias.z;
					    u_xlat1.xyz = (-u_xlat2.xyz) * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlatb13 = unity_LightShadowBias.z!=0.0;
					    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
					    u_xlat1.x = min(u_xlat1.x, 0.0);
					    u_xlat1.x = max(u_xlat1.x, -1.0);
					    u_xlat8 = u_xlat0.z + u_xlat1.x;
					    u_xlat1.x = min(u_xlat0.w, u_xlat8);
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.x = (-u_xlat8) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat8;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_CUBE" "_METALLICGLOSSMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_2_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * unity_LightShadowBias.z;
					    u_xlat1.xyz = (-u_xlat2.xyz) * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlatb13 = unity_LightShadowBias.z!=0.0;
					    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = min(u_xlat0.w, u_xlat0.z);
					    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat0.z;
					    gl_Position.xyw = u_xlat0.xyw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_2_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * unity_LightShadowBias.z;
					    u_xlat1.xyz = (-u_xlat2.xyz) * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlatb13 = unity_LightShadowBias.z!=0.0;
					    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = min(u_xlat0.w, u_xlat0.z);
					    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat0.z;
					    gl_Position.xyw = u_xlat0.xyw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_DEPTH" "_METALLICGLOSSMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_2_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat8;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * unity_LightShadowBias.z;
					    u_xlat1.xyz = (-u_xlat2.xyz) * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlatb13 = unity_LightShadowBias.z!=0.0;
					    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
					    u_xlat1.x = min(u_xlat1.x, 0.0);
					    u_xlat1.x = max(u_xlat1.x, -1.0);
					    u_xlat8 = u_xlat0.z + u_xlat1.x;
					    u_xlat1.x = min(u_xlat0.w, u_xlat8);
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.x = (-u_xlat8) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat8;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LOD_FADE_CROSSFADE" "SHADOWS_DEPTH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_2_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat8;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * unity_LightShadowBias.z;
					    u_xlat1.xyz = (-u_xlat2.xyz) * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlatb13 = unity_LightShadowBias.z!=0.0;
					    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
					    u_xlat1.x = min(u_xlat1.x, 0.0);
					    u_xlat1.x = max(u_xlat1.x, -1.0);
					    u_xlat8 = u_xlat0.z + u_xlat1.x;
					    u_xlat1.x = min(u_xlat0.w, u_xlat8);
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.x = (-u_xlat8) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat8;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LOD_FADE_CROSSFADE" "SHADOWS_CUBE" "_METALLICGLOSSMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_2_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * unity_LightShadowBias.z;
					    u_xlat1.xyz = (-u_xlat2.xyz) * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlatb13 = unity_LightShadowBias.z!=0.0;
					    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = min(u_xlat0.w, u_xlat0.z);
					    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat0.z;
					    gl_Position.xyw = u_xlat0.xyw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LOD_FADE_CROSSFADE" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_2_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * unity_LightShadowBias.z;
					    u_xlat1.xyz = (-u_xlat2.xyz) * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlatb13 = unity_LightShadowBias.z!=0.0;
					    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = min(u_xlat0.w, u_xlat0.z);
					    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat0.z;
					    gl_Position.xyw = u_xlat0.xyw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LOD_FADE_CROSSFADE" "SHADOWS_DEPTH" "_METALLICGLOSSMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_2_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat8;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * unity_LightShadowBias.z;
					    u_xlat1.xyz = (-u_xlat2.xyz) * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlatb13 = unity_LightShadowBias.z!=0.0;
					    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
					    u_xlat1.x = min(u_xlat1.x, 0.0);
					    u_xlat1.x = max(u_xlat1.x, -1.0);
					    u_xlat8 = u_xlat0.z + u_xlat1.x;
					    u_xlat1.x = min(u_xlat0.w, u_xlat8);
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.x = (-u_xlat8) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat8;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_DEPTH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_CUBE" "_METALLICGLOSSMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_DEPTH" "_METALLICGLOSSMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LOD_FADE_CROSSFADE" "SHADOWS_DEPTH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						vec4 unused_0_0[8];
						vec4 unity_LODFade;
						vec4 unused_0_2;
					};
					uniform  sampler2D _DitherMaskLOD2D;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.yx * vec2(0.25, 0.25);
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.z = u_xlat0.x * 0.0625 + unity_LODFade.y;
					    u_xlat0 = texture(_DitherMaskLOD2D, u_xlat0.yz);
					    u_xlat0.x = u_xlat0.w + -0.5;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LOD_FADE_CROSSFADE" "SHADOWS_CUBE" "_METALLICGLOSSMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						vec4 unused_0_0[8];
						vec4 unity_LODFade;
						vec4 unused_0_2;
					};
					uniform  sampler2D _DitherMaskLOD2D;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.yx * vec2(0.25, 0.25);
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.z = u_xlat0.x * 0.0625 + unity_LODFade.y;
					    u_xlat0 = texture(_DitherMaskLOD2D, u_xlat0.yz);
					    u_xlat0.x = u_xlat0.w + -0.5;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LOD_FADE_CROSSFADE" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						vec4 unused_0_0[8];
						vec4 unity_LODFade;
						vec4 unused_0_2;
					};
					uniform  sampler2D _DitherMaskLOD2D;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.yx * vec2(0.25, 0.25);
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.z = u_xlat0.x * 0.0625 + unity_LODFade.y;
					    u_xlat0 = texture(_DitherMaskLOD2D, u_xlat0.yz);
					    u_xlat0.x = u_xlat0.w + -0.5;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LOD_FADE_CROSSFADE" "SHADOWS_DEPTH" "_METALLICGLOSSMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						vec4 unused_0_0[8];
						vec4 unity_LODFade;
						vec4 unused_0_2;
					};
					uniform  sampler2D _DitherMaskLOD2D;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.yx * vec2(0.25, 0.25);
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.z = u_xlat0.x * 0.0625 + unity_LODFade.y;
					    u_xlat0 = texture(_DitherMaskLOD2D, u_xlat0.yz);
					    u_xlat0.x = u_xlat0.w + -0.5;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
			}
		}
		Pass {
			Name "DEFERRED"
			LOD 300
			Tags { "LIGHTMODE" = "DEFERRED" "PerformanceChecks" = "False" "RenderType" = "Opaque" }
			GpuProgramID 249990
			Program "vp" {
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD4.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTPROBE_SH" "_METALLICGLOSSMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat12 = u_xlat0.y * u_xlat0.y;
					    u_xlat12 = u_xlat0.x * u_xlat0.x + (-u_xlat12);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat12) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTPROBE_SH" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yzx * u_xlat0.zxy;
					    u_xlat1.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat12 = u_xlat0.y * u_xlat0.y;
					    u_xlat12 = u_xlat0.x * u_xlat0.x + (-u_xlat12);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat12) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTPROBE_SH" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yzx * u_xlat0.zxy;
					    u_xlat1.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat12 = u_xlat0.y * u_xlat0.y;
					    u_xlat12 = u_xlat0.x * u_xlat0.x + (-u_xlat12);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat12) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat12 = u_xlat0.y * u_xlat0.y;
					    u_xlat12 = u_xlat0.x * u_xlat0.x + (-u_xlat12);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat12) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_HDR_ON" "_METALLICGLOSSMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD4.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_HDR_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3.x = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_HDR_ON" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3.x = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD4.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "_METALLICGLOSSMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat12 = u_xlat0.y * u_xlat0.y;
					    u_xlat12 = u_xlat0.x * u_xlat0.x + (-u_xlat12);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat12) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yzx * u_xlat0.zxy;
					    u_xlat1.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat12 = u_xlat0.y * u_xlat0.y;
					    u_xlat12 = u_xlat0.x * u_xlat0.x + (-u_xlat12);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat12) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yzx * u_xlat0.zxy;
					    u_xlat1.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat12 = u_xlat0.y * u_xlat0.y;
					    u_xlat12 = u_xlat0.x * u_xlat0.x + (-u_xlat12);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat12) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat12 = u_xlat0.y * u_xlat0.y;
					    u_xlat12 = u_xlat0.x * u_xlat0.x + (-u_xlat12);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat12) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_METALLICGLOSSMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD4.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3.x = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3.x = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_3_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    gl_Position = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "LIGHTPROBE_SH" "_METALLICGLOSSMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    gl_Position = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat0.y * u_xlat0.y;
					    u_xlat21 = u_xlat0.x * u_xlat0.x + (-u_xlat21);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "LIGHTPROBE_SH" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    gl_Position = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yzx * u_xlat0.zxy;
					    u_xlat1.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat0.y * u_xlat0.y;
					    u_xlat21 = u_xlat0.x * u_xlat0.x + (-u_xlat21);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "LIGHTPROBE_SH" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    gl_Position = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yzx * u_xlat0.zxy;
					    u_xlat1.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat0.y * u_xlat0.y;
					    u_xlat21 = u_xlat0.x * u_xlat0.x + (-u_xlat21);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    gl_Position = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat0.y * u_xlat0.y;
					    u_xlat21 = u_xlat0.x * u_xlat0.x + (-u_xlat21);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "UNITY_HDR_ON" "_METALLICGLOSSMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_3_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    gl_Position = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "UNITY_HDR_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_3_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    gl_Position = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "UNITY_HDR_ON" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_3_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    gl_Position = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_3_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    gl_Position = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "LIGHTPROBE_SH" "UNITY_HDR_ON" "_METALLICGLOSSMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    gl_Position = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat0.y * u_xlat0.y;
					    u_xlat21 = u_xlat0.x * u_xlat0.x + (-u_xlat21);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "LIGHTPROBE_SH" "UNITY_HDR_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    gl_Position = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yzx * u_xlat0.zxy;
					    u_xlat1.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat0.y * u_xlat0.y;
					    u_xlat21 = u_xlat0.x * u_xlat0.x + (-u_xlat21);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "LIGHTPROBE_SH" "UNITY_HDR_ON" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    gl_Position = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yzx * u_xlat0.zxy;
					    u_xlat1.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat0.y * u_xlat0.y;
					    u_xlat21 = u_xlat0.x * u_xlat0.x + (-u_xlat21);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    gl_Position = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat0.y * u_xlat0.y;
					    u_xlat21 = u_xlat0.x * u_xlat0.x + (-u_xlat21);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "_METALLICGLOSSMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_3_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    gl_Position = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_3_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    gl_Position = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_3_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    gl_Position = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LOD_FADE_CROSSFADE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD4.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_METALLICGLOSSMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat12 = u_xlat0.y * u_xlat0.y;
					    u_xlat12 = u_xlat0.x * u_xlat0.x + (-u_xlat12);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat12) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yzx * u_xlat0.zxy;
					    u_xlat1.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat12 = u_xlat0.y * u_xlat0.y;
					    u_xlat12 = u_xlat0.x * u_xlat0.x + (-u_xlat12);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat12) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yzx * u_xlat0.zxy;
					    u_xlat1.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat12 = u_xlat0.y * u_xlat0.y;
					    u_xlat12 = u_xlat0.x * u_xlat0.x + (-u_xlat12);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat12) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat12 = u_xlat0.y * u_xlat0.y;
					    u_xlat12 = u_xlat0.x * u_xlat0.x + (-u_xlat12);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat12) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LOD_FADE_CROSSFADE" "UNITY_HDR_ON" "_METALLICGLOSSMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD4.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LOD_FADE_CROSSFADE" "UNITY_HDR_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3.x = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LOD_FADE_CROSSFADE" "UNITY_HDR_ON" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3.x = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LOD_FADE_CROSSFADE" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD4.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "UNITY_HDR_ON" "_METALLICGLOSSMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat12 = u_xlat0.y * u_xlat0.y;
					    u_xlat12 = u_xlat0.x * u_xlat0.x + (-u_xlat12);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat12) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "UNITY_HDR_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yzx * u_xlat0.zxy;
					    u_xlat1.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat12 = u_xlat0.y * u_xlat0.y;
					    u_xlat12 = u_xlat0.x * u_xlat0.x + (-u_xlat12);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat12) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "UNITY_HDR_ON" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yzx * u_xlat0.zxy;
					    u_xlat1.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat12 = u_xlat0.y * u_xlat0.y;
					    u_xlat12 = u_xlat0.x * u_xlat0.x + (-u_xlat12);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat12) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat12 = u_xlat0.y * u_xlat0.y;
					    u_xlat12 = u_xlat0.x * u_xlat0.x + (-u_xlat12);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat12) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LOD_FADE_CROSSFADE" "_METALLICGLOSSMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD4.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LOD_FADE_CROSSFADE" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3.x = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LOD_FADE_CROSSFADE" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3.x = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_6[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = (-_OcclusionStrength) + 1.0;
					    SV_Target0.w = u_xlat0.y * _OcclusionStrength + u_xlat0.x;
					    u_xlat0.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = _Color.xyz * u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    SV_Target0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    SV_Target2.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    SV_Target3 = vec4(1.0, 1.0, 1.0, 1.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTPROBE_SH" "_METALLICGLOSSMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[4];
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_5[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[6];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat7;
					vec3 u_xlat8;
					void main()
					{
					    u_xlat0 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    SV_Target1.w = u_xlat0.w * _GlossMapScale;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = _Color.xyz * u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.x = (-u_xlat0.x) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat2.y * _OcclusionStrength + u_xlat2.x;
					    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb2){
					        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat7.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat7.xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat7.xyz;
					        u_xlat7.xyz = u_xlat7.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat8.x = vs_TEXCOORD2.w;
					        u_xlat8.y = vs_TEXCOORD3.w;
					        u_xlat8.z = vs_TEXCOORD4.w;
					        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat7.xyz : u_xlat8.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat7.x = u_xlat2.y * 0.25;
					        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat8.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat7.x = max(u_xlat7.x, u_xlat3.x);
					        u_xlat2.x = min(u_xlat8.x, u_xlat7.x);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(u_xlat3, u_xlat1);
					        u_xlat3.y = dot(u_xlat4, u_xlat1);
					        u_xlat3.z = dot(u_xlat2, u_xlat1);
					    } else {
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(unity_SHAr, u_xlat1);
					        u_xlat3.y = dot(unity_SHAg, u_xlat1);
					        u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    }
					    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = u_xlat0.www * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat2.xyz));
					    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0 = u_xlat0;
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTPROBE_SH" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[3];
						float _BumpScale;
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_6[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[6];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    SV_Target1.w = u_xlat0.w * _GlossMapScale;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = _Color.xyz * u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.x = (-u_xlat0.x) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpScale);
					    u_xlat11 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat11 = min(u_xlat11, 1.0);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat11 = sqrt(u_xlat11);
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyw = vs_TEXCOORD2.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat11) + u_xlat1.xyw;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat2 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat2.y * _OcclusionStrength + u_xlat2.x;
					    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb2){
					        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat7.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat7.xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat7.xyz;
					        u_xlat7.xyz = u_xlat7.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat8.x = vs_TEXCOORD2.w;
					        u_xlat8.y = vs_TEXCOORD3.w;
					        u_xlat8.z = vs_TEXCOORD4.w;
					        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat7.xyz : u_xlat8.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat7.x = u_xlat2.y * 0.25;
					        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat8.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat7.x = max(u_xlat7.x, u_xlat3.x);
					        u_xlat2.x = min(u_xlat8.x, u_xlat7.x);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(u_xlat3, u_xlat1);
					        u_xlat3.y = dot(u_xlat4, u_xlat1);
					        u_xlat3.z = dot(u_xlat2, u_xlat1);
					    } else {
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(unity_SHAr, u_xlat1);
					        u_xlat3.y = dot(unity_SHAg, u_xlat1);
					        u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    }
					    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = u_xlat0.www * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat2.xyz));
					    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0 = u_xlat0;
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTPROBE_SH" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[3];
						float _BumpScale;
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_6[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[6];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    SV_Target1.w = u_xlat0.w * _GlossMapScale;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = _Color.xyz * u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.x = (-u_xlat0.x) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpScale);
					    u_xlat11 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat11 = min(u_xlat11, 1.0);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat11 = sqrt(u_xlat11);
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyw = vs_TEXCOORD2.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat11) + u_xlat1.xyw;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat2 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat2.y * _OcclusionStrength + u_xlat2.x;
					    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb2){
					        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat7.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat7.xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat7.xyz;
					        u_xlat7.xyz = u_xlat7.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat8.x = vs_TEXCOORD2.w;
					        u_xlat8.y = vs_TEXCOORD3.w;
					        u_xlat8.z = vs_TEXCOORD4.w;
					        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat7.xyz : u_xlat8.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat7.x = u_xlat2.y * 0.25;
					        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat8.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat7.x = max(u_xlat7.x, u_xlat3.x);
					        u_xlat2.x = min(u_xlat8.x, u_xlat7.x);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(u_xlat3, u_xlat1);
					        u_xlat3.y = dot(u_xlat4, u_xlat1);
					        u_xlat3.z = dot(u_xlat2, u_xlat1);
					    } else {
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(unity_SHAr, u_xlat1);
					        u_xlat3.y = dot(unity_SHAg, u_xlat1);
					        u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    }
					    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = u_xlat0.www * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat2.xyz));
					    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0 = u_xlat0;
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_6[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[6];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat7;
					vec3 u_xlat8;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat2.y * _OcclusionStrength + u_xlat2.x;
					    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb2){
					        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat7.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat7.xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat7.xyz;
					        u_xlat7.xyz = u_xlat7.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat8.x = vs_TEXCOORD2.w;
					        u_xlat8.y = vs_TEXCOORD3.w;
					        u_xlat8.z = vs_TEXCOORD4.w;
					        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat7.xyz : u_xlat8.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat7.x = u_xlat2.y * 0.25;
					        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat8.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat7.x = max(u_xlat7.x, u_xlat3.x);
					        u_xlat2.x = min(u_xlat8.x, u_xlat7.x);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(u_xlat3, u_xlat1);
					        u_xlat3.y = dot(u_xlat4, u_xlat1);
					        u_xlat3.z = dot(u_xlat2, u_xlat1);
					    } else {
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(unity_SHAr, u_xlat1);
					        u_xlat3.y = dot(unity_SHAg, u_xlat1);
					        u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    }
					    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = u_xlat0.www * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat2.xyz));
					    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0 = u_xlat0;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_HDR_ON" "_METALLICGLOSSMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[4];
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _OcclusionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = (-_OcclusionStrength) + 1.0;
					    SV_Target0.w = u_xlat0.y * _OcclusionStrength + u_xlat0.x;
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat9 = (-u_xlat2.x) * 0.779083729 + 0.779083729;
					    SV_Target0.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    SV_Target1.xyz = u_xlat2.xxx * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    SV_Target1.w = u_xlat2.w * _GlossMapScale;
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    SV_Target2.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    SV_Target3 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_HDR_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[3];
						float _BumpScale;
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_6[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _OcclusionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = (-_OcclusionStrength) + 1.0;
					    SV_Target0.w = u_xlat0.y * _OcclusionStrength + u_xlat0.x;
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat9 = (-u_xlat2.x) * 0.779083729 + 0.779083729;
					    SV_Target0.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    SV_Target1.xyz = u_xlat2.xxx * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    SV_Target1.w = u_xlat2.w * _GlossMapScale;
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat0.xy = u_xlat0.xy * vec2(_BumpScale);
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = vs_TEXCOORD2.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = min(u_xlat0.x, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    SV_Target2.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    SV_Target3 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_HDR_ON" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[3];
						float _BumpScale;
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_6[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _OcclusionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = (-_OcclusionStrength) + 1.0;
					    SV_Target0.w = u_xlat0.y * _OcclusionStrength + u_xlat0.x;
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat9 = (-u_xlat2.x) * 0.779083729 + 0.779083729;
					    SV_Target0.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    SV_Target1.xyz = u_xlat2.xxx * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    SV_Target1.w = u_xlat2.w * _GlossMapScale;
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat0.xy = u_xlat0.xy * vec2(_BumpScale);
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = vs_TEXCOORD2.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = min(u_xlat0.x, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    SV_Target2.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    SV_Target3 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_6[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = (-_OcclusionStrength) + 1.0;
					    SV_Target0.w = u_xlat0.y * _OcclusionStrength + u_xlat0.x;
					    u_xlat0.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = _Color.xyz * u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    SV_Target0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    SV_Target2.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    SV_Target3 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "_METALLICGLOSSMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[4];
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_5[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[6];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat7;
					vec3 u_xlat8;
					void main()
					{
					    u_xlat0 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    SV_Target1.w = u_xlat0.w * _GlossMapScale;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = _Color.xyz * u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.x = (-u_xlat0.x) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat2.y * _OcclusionStrength + u_xlat2.x;
					    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb2){
					        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat7.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat7.xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat7.xyz;
					        u_xlat7.xyz = u_xlat7.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat8.x = vs_TEXCOORD2.w;
					        u_xlat8.y = vs_TEXCOORD3.w;
					        u_xlat8.z = vs_TEXCOORD4.w;
					        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat7.xyz : u_xlat8.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat7.x = u_xlat2.y * 0.25;
					        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat8.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat7.x = max(u_xlat7.x, u_xlat3.x);
					        u_xlat2.x = min(u_xlat8.x, u_xlat7.x);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(u_xlat3, u_xlat1);
					        u_xlat3.y = dot(u_xlat4, u_xlat1);
					        u_xlat3.z = dot(u_xlat2, u_xlat1);
					    } else {
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(unity_SHAr, u_xlat1);
					        u_xlat3.y = dot(unity_SHAg, u_xlat1);
					        u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    }
					    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = u_xlat0.www * u_xlat2.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0 = u_xlat0;
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[3];
						float _BumpScale;
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_6[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[6];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    SV_Target1.w = u_xlat0.w * _GlossMapScale;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = _Color.xyz * u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.x = (-u_xlat0.x) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpScale);
					    u_xlat11 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat11 = min(u_xlat11, 1.0);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat11 = sqrt(u_xlat11);
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyw = vs_TEXCOORD2.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat11) + u_xlat1.xyw;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat2 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat2.y * _OcclusionStrength + u_xlat2.x;
					    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb2){
					        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat7.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat7.xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat7.xyz;
					        u_xlat7.xyz = u_xlat7.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat8.x = vs_TEXCOORD2.w;
					        u_xlat8.y = vs_TEXCOORD3.w;
					        u_xlat8.z = vs_TEXCOORD4.w;
					        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat7.xyz : u_xlat8.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat7.x = u_xlat2.y * 0.25;
					        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat8.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat7.x = max(u_xlat7.x, u_xlat3.x);
					        u_xlat2.x = min(u_xlat8.x, u_xlat7.x);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(u_xlat3, u_xlat1);
					        u_xlat3.y = dot(u_xlat4, u_xlat1);
					        u_xlat3.z = dot(u_xlat2, u_xlat1);
					    } else {
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(unity_SHAr, u_xlat1);
					        u_xlat3.y = dot(unity_SHAg, u_xlat1);
					        u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    }
					    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = u_xlat0.www * u_xlat2.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0 = u_xlat0;
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[3];
						float _BumpScale;
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_6[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[6];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    SV_Target1.w = u_xlat0.w * _GlossMapScale;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = _Color.xyz * u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.x = (-u_xlat0.x) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpScale);
					    u_xlat11 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat11 = min(u_xlat11, 1.0);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat11 = sqrt(u_xlat11);
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyw = vs_TEXCOORD2.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat11) + u_xlat1.xyw;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat2 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat2.y * _OcclusionStrength + u_xlat2.x;
					    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb2){
					        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat7.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat7.xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat7.xyz;
					        u_xlat7.xyz = u_xlat7.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat8.x = vs_TEXCOORD2.w;
					        u_xlat8.y = vs_TEXCOORD3.w;
					        u_xlat8.z = vs_TEXCOORD4.w;
					        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat7.xyz : u_xlat8.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat7.x = u_xlat2.y * 0.25;
					        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat8.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat7.x = max(u_xlat7.x, u_xlat3.x);
					        u_xlat2.x = min(u_xlat8.x, u_xlat7.x);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(u_xlat3, u_xlat1);
					        u_xlat3.y = dot(u_xlat4, u_xlat1);
					        u_xlat3.z = dot(u_xlat2, u_xlat1);
					    } else {
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(unity_SHAr, u_xlat1);
					        u_xlat3.y = dot(unity_SHAg, u_xlat1);
					        u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    }
					    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = u_xlat0.www * u_xlat2.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0 = u_xlat0;
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_6[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[6];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat7;
					vec3 u_xlat8;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat2.y * _OcclusionStrength + u_xlat2.x;
					    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb2){
					        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat7.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat7.xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat7.xyz;
					        u_xlat7.xyz = u_xlat7.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat8.x = vs_TEXCOORD2.w;
					        u_xlat8.y = vs_TEXCOORD3.w;
					        u_xlat8.z = vs_TEXCOORD4.w;
					        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat7.xyz : u_xlat8.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat7.x = u_xlat2.y * 0.25;
					        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat8.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat7.x = max(u_xlat7.x, u_xlat3.x);
					        u_xlat2.x = min(u_xlat8.x, u_xlat7.x);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(u_xlat3, u_xlat1);
					        u_xlat3.y = dot(u_xlat4, u_xlat1);
					        u_xlat3.z = dot(u_xlat2, u_xlat1);
					    } else {
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(unity_SHAr, u_xlat1);
					        u_xlat3.y = dot(unity_SHAg, u_xlat1);
					        u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    }
					    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = u_xlat0.www * u_xlat2.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0 = u_xlat0;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_METALLICGLOSSMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[4];
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _OcclusionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = (-_OcclusionStrength) + 1.0;
					    SV_Target0.w = u_xlat0.y * _OcclusionStrength + u_xlat0.x;
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat9 = (-u_xlat2.x) * 0.779083729 + 0.779083729;
					    SV_Target0.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    SV_Target1.xyz = u_xlat2.xxx * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    SV_Target1.w = u_xlat2.w * _GlossMapScale;
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    SV_Target2.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    SV_Target3 = vec4(1.0, 1.0, 1.0, 1.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[3];
						float _BumpScale;
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_6[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _OcclusionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = (-_OcclusionStrength) + 1.0;
					    SV_Target0.w = u_xlat0.y * _OcclusionStrength + u_xlat0.x;
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat9 = (-u_xlat2.x) * 0.779083729 + 0.779083729;
					    SV_Target0.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    SV_Target1.xyz = u_xlat2.xxx * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    SV_Target1.w = u_xlat2.w * _GlossMapScale;
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat0.xy = u_xlat0.xy * vec2(_BumpScale);
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = vs_TEXCOORD2.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = min(u_xlat0.x, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    SV_Target2.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    SV_Target3 = vec4(1.0, 1.0, 1.0, 1.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[3];
						float _BumpScale;
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_6[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _OcclusionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = (-_OcclusionStrength) + 1.0;
					    SV_Target0.w = u_xlat0.y * _OcclusionStrength + u_xlat0.x;
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat9 = (-u_xlat2.x) * 0.779083729 + 0.779083729;
					    SV_Target0.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    SV_Target1.xyz = u_xlat2.xxx * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    SV_Target1.w = u_xlat2.w * _GlossMapScale;
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat0.xy = u_xlat0.xy * vec2(_BumpScale);
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = vs_TEXCOORD2.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = min(u_xlat0.x, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    SV_Target2.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    SV_Target3 = vec4(1.0, 1.0, 1.0, 1.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_6[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = (-_OcclusionStrength) + 1.0;
					    SV_Target0.w = u_xlat0.y * _OcclusionStrength + u_xlat0.x;
					    u_xlat0.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = _Color.xyz * u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    SV_Target0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    SV_Target2.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    SV_Target3 = vec4(1.0, 1.0, 1.0, 1.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "LIGHTPROBE_SH" "_METALLICGLOSSMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[4];
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_5[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[6];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat7;
					vec3 u_xlat8;
					void main()
					{
					    u_xlat0 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    SV_Target1.w = u_xlat0.w * _GlossMapScale;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = _Color.xyz * u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.x = (-u_xlat0.x) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat2.y * _OcclusionStrength + u_xlat2.x;
					    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb2){
					        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat7.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat7.xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat7.xyz;
					        u_xlat7.xyz = u_xlat7.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat8.x = vs_TEXCOORD2.w;
					        u_xlat8.y = vs_TEXCOORD3.w;
					        u_xlat8.z = vs_TEXCOORD4.w;
					        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat7.xyz : u_xlat8.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat7.x = u_xlat2.y * 0.25;
					        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat8.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat7.x = max(u_xlat7.x, u_xlat3.x);
					        u_xlat2.x = min(u_xlat8.x, u_xlat7.x);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(u_xlat3, u_xlat1);
					        u_xlat3.y = dot(u_xlat4, u_xlat1);
					        u_xlat3.z = dot(u_xlat2, u_xlat1);
					    } else {
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(unity_SHAr, u_xlat1);
					        u_xlat3.y = dot(unity_SHAg, u_xlat1);
					        u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    }
					    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = u_xlat0.www * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat2.xyz));
					    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0 = u_xlat0;
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "LIGHTPROBE_SH" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[3];
						float _BumpScale;
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_6[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[6];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    SV_Target1.w = u_xlat0.w * _GlossMapScale;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = _Color.xyz * u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.x = (-u_xlat0.x) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpScale);
					    u_xlat11 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat11 = min(u_xlat11, 1.0);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat11 = sqrt(u_xlat11);
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyw = vs_TEXCOORD2.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat11) + u_xlat1.xyw;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat2 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat2.y * _OcclusionStrength + u_xlat2.x;
					    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb2){
					        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat7.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat7.xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat7.xyz;
					        u_xlat7.xyz = u_xlat7.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat8.x = vs_TEXCOORD2.w;
					        u_xlat8.y = vs_TEXCOORD3.w;
					        u_xlat8.z = vs_TEXCOORD4.w;
					        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat7.xyz : u_xlat8.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat7.x = u_xlat2.y * 0.25;
					        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat8.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat7.x = max(u_xlat7.x, u_xlat3.x);
					        u_xlat2.x = min(u_xlat8.x, u_xlat7.x);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(u_xlat3, u_xlat1);
					        u_xlat3.y = dot(u_xlat4, u_xlat1);
					        u_xlat3.z = dot(u_xlat2, u_xlat1);
					    } else {
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(unity_SHAr, u_xlat1);
					        u_xlat3.y = dot(unity_SHAg, u_xlat1);
					        u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    }
					    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = u_xlat0.www * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat2.xyz));
					    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0 = u_xlat0;
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "LIGHTPROBE_SH" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[3];
						float _BumpScale;
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_6[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[6];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    SV_Target1.w = u_xlat0.w * _GlossMapScale;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = _Color.xyz * u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.x = (-u_xlat0.x) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpScale);
					    u_xlat11 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat11 = min(u_xlat11, 1.0);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat11 = sqrt(u_xlat11);
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyw = vs_TEXCOORD2.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat11) + u_xlat1.xyw;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat2 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat2.y * _OcclusionStrength + u_xlat2.x;
					    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb2){
					        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat7.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat7.xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat7.xyz;
					        u_xlat7.xyz = u_xlat7.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat8.x = vs_TEXCOORD2.w;
					        u_xlat8.y = vs_TEXCOORD3.w;
					        u_xlat8.z = vs_TEXCOORD4.w;
					        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat7.xyz : u_xlat8.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat7.x = u_xlat2.y * 0.25;
					        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat8.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat7.x = max(u_xlat7.x, u_xlat3.x);
					        u_xlat2.x = min(u_xlat8.x, u_xlat7.x);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(u_xlat3, u_xlat1);
					        u_xlat3.y = dot(u_xlat4, u_xlat1);
					        u_xlat3.z = dot(u_xlat2, u_xlat1);
					    } else {
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(unity_SHAr, u_xlat1);
					        u_xlat3.y = dot(unity_SHAg, u_xlat1);
					        u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    }
					    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = u_xlat0.www * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat2.xyz));
					    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0 = u_xlat0;
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_6[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[6];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat7;
					vec3 u_xlat8;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat2.y * _OcclusionStrength + u_xlat2.x;
					    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb2){
					        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat7.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat7.xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat7.xyz;
					        u_xlat7.xyz = u_xlat7.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat8.x = vs_TEXCOORD2.w;
					        u_xlat8.y = vs_TEXCOORD3.w;
					        u_xlat8.z = vs_TEXCOORD4.w;
					        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat7.xyz : u_xlat8.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat7.x = u_xlat2.y * 0.25;
					        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat8.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat7.x = max(u_xlat7.x, u_xlat3.x);
					        u_xlat2.x = min(u_xlat8.x, u_xlat7.x);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(u_xlat3, u_xlat1);
					        u_xlat3.y = dot(u_xlat4, u_xlat1);
					        u_xlat3.z = dot(u_xlat2, u_xlat1);
					    } else {
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(unity_SHAr, u_xlat1);
					        u_xlat3.y = dot(unity_SHAg, u_xlat1);
					        u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    }
					    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = u_xlat0.www * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat2.xyz));
					    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0 = u_xlat0;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "UNITY_HDR_ON" "_METALLICGLOSSMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[4];
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _OcclusionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = (-_OcclusionStrength) + 1.0;
					    SV_Target0.w = u_xlat0.y * _OcclusionStrength + u_xlat0.x;
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat9 = (-u_xlat2.x) * 0.779083729 + 0.779083729;
					    SV_Target0.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    SV_Target1.xyz = u_xlat2.xxx * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    SV_Target1.w = u_xlat2.w * _GlossMapScale;
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    SV_Target2.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    SV_Target3 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "UNITY_HDR_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[3];
						float _BumpScale;
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_6[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _OcclusionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = (-_OcclusionStrength) + 1.0;
					    SV_Target0.w = u_xlat0.y * _OcclusionStrength + u_xlat0.x;
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat9 = (-u_xlat2.x) * 0.779083729 + 0.779083729;
					    SV_Target0.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    SV_Target1.xyz = u_xlat2.xxx * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    SV_Target1.w = u_xlat2.w * _GlossMapScale;
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat0.xy = u_xlat0.xy * vec2(_BumpScale);
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = vs_TEXCOORD2.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = min(u_xlat0.x, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    SV_Target2.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    SV_Target3 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "UNITY_HDR_ON" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[3];
						float _BumpScale;
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_6[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _OcclusionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = (-_OcclusionStrength) + 1.0;
					    SV_Target0.w = u_xlat0.y * _OcclusionStrength + u_xlat0.x;
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat9 = (-u_xlat2.x) * 0.779083729 + 0.779083729;
					    SV_Target0.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    SV_Target1.xyz = u_xlat2.xxx * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    SV_Target1.w = u_xlat2.w * _GlossMapScale;
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat0.xy = u_xlat0.xy * vec2(_BumpScale);
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = vs_TEXCOORD2.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = min(u_xlat0.x, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    SV_Target2.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    SV_Target3 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_6[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = (-_OcclusionStrength) + 1.0;
					    SV_Target0.w = u_xlat0.y * _OcclusionStrength + u_xlat0.x;
					    u_xlat0.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = _Color.xyz * u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    SV_Target0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    SV_Target2.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    SV_Target3 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "LIGHTPROBE_SH" "UNITY_HDR_ON" "_METALLICGLOSSMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[4];
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_5[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[6];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat7;
					vec3 u_xlat8;
					void main()
					{
					    u_xlat0 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    SV_Target1.w = u_xlat0.w * _GlossMapScale;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = _Color.xyz * u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.x = (-u_xlat0.x) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat2.y * _OcclusionStrength + u_xlat2.x;
					    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb2){
					        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat7.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat7.xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat7.xyz;
					        u_xlat7.xyz = u_xlat7.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat8.x = vs_TEXCOORD2.w;
					        u_xlat8.y = vs_TEXCOORD3.w;
					        u_xlat8.z = vs_TEXCOORD4.w;
					        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat7.xyz : u_xlat8.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat7.x = u_xlat2.y * 0.25;
					        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat8.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat7.x = max(u_xlat7.x, u_xlat3.x);
					        u_xlat2.x = min(u_xlat8.x, u_xlat7.x);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(u_xlat3, u_xlat1);
					        u_xlat3.y = dot(u_xlat4, u_xlat1);
					        u_xlat3.z = dot(u_xlat2, u_xlat1);
					    } else {
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(unity_SHAr, u_xlat1);
					        u_xlat3.y = dot(unity_SHAg, u_xlat1);
					        u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    }
					    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = u_xlat0.www * u_xlat2.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0 = u_xlat0;
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "LIGHTPROBE_SH" "UNITY_HDR_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[3];
						float _BumpScale;
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_6[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[6];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    SV_Target1.w = u_xlat0.w * _GlossMapScale;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = _Color.xyz * u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.x = (-u_xlat0.x) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpScale);
					    u_xlat11 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat11 = min(u_xlat11, 1.0);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat11 = sqrt(u_xlat11);
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyw = vs_TEXCOORD2.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat11) + u_xlat1.xyw;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat2 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat2.y * _OcclusionStrength + u_xlat2.x;
					    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb2){
					        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat7.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat7.xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat7.xyz;
					        u_xlat7.xyz = u_xlat7.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat8.x = vs_TEXCOORD2.w;
					        u_xlat8.y = vs_TEXCOORD3.w;
					        u_xlat8.z = vs_TEXCOORD4.w;
					        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat7.xyz : u_xlat8.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat7.x = u_xlat2.y * 0.25;
					        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat8.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat7.x = max(u_xlat7.x, u_xlat3.x);
					        u_xlat2.x = min(u_xlat8.x, u_xlat7.x);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(u_xlat3, u_xlat1);
					        u_xlat3.y = dot(u_xlat4, u_xlat1);
					        u_xlat3.z = dot(u_xlat2, u_xlat1);
					    } else {
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(unity_SHAr, u_xlat1);
					        u_xlat3.y = dot(unity_SHAg, u_xlat1);
					        u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    }
					    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = u_xlat0.www * u_xlat2.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0 = u_xlat0;
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "LIGHTPROBE_SH" "UNITY_HDR_ON" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[3];
						float _BumpScale;
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_6[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[6];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    SV_Target1.w = u_xlat0.w * _GlossMapScale;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = _Color.xyz * u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.x = (-u_xlat0.x) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpScale);
					    u_xlat11 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat11 = min(u_xlat11, 1.0);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat11 = sqrt(u_xlat11);
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyw = vs_TEXCOORD2.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat11) + u_xlat1.xyw;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat2 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat2.y * _OcclusionStrength + u_xlat2.x;
					    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb2){
					        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat7.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat7.xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat7.xyz;
					        u_xlat7.xyz = u_xlat7.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat8.x = vs_TEXCOORD2.w;
					        u_xlat8.y = vs_TEXCOORD3.w;
					        u_xlat8.z = vs_TEXCOORD4.w;
					        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat7.xyz : u_xlat8.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat7.x = u_xlat2.y * 0.25;
					        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat8.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat7.x = max(u_xlat7.x, u_xlat3.x);
					        u_xlat2.x = min(u_xlat8.x, u_xlat7.x);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(u_xlat3, u_xlat1);
					        u_xlat3.y = dot(u_xlat4, u_xlat1);
					        u_xlat3.z = dot(u_xlat2, u_xlat1);
					    } else {
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(unity_SHAr, u_xlat1);
					        u_xlat3.y = dot(unity_SHAg, u_xlat1);
					        u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    }
					    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = u_xlat0.www * u_xlat2.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0 = u_xlat0;
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_6[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[6];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat7;
					vec3 u_xlat8;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat2.y * _OcclusionStrength + u_xlat2.x;
					    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb2){
					        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat7.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat7.xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat7.xyz;
					        u_xlat7.xyz = u_xlat7.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat8.x = vs_TEXCOORD2.w;
					        u_xlat8.y = vs_TEXCOORD3.w;
					        u_xlat8.z = vs_TEXCOORD4.w;
					        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat7.xyz : u_xlat8.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat7.x = u_xlat2.y * 0.25;
					        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat8.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat7.x = max(u_xlat7.x, u_xlat3.x);
					        u_xlat2.x = min(u_xlat8.x, u_xlat7.x);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(u_xlat3, u_xlat1);
					        u_xlat3.y = dot(u_xlat4, u_xlat1);
					        u_xlat3.z = dot(u_xlat2, u_xlat1);
					    } else {
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(unity_SHAr, u_xlat1);
					        u_xlat3.y = dot(unity_SHAg, u_xlat1);
					        u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    }
					    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = u_xlat0.www * u_xlat2.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0 = u_xlat0;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "_METALLICGLOSSMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[4];
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_5[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _OcclusionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = (-_OcclusionStrength) + 1.0;
					    SV_Target0.w = u_xlat0.y * _OcclusionStrength + u_xlat0.x;
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat9 = (-u_xlat2.x) * 0.779083729 + 0.779083729;
					    SV_Target0.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    SV_Target1.xyz = u_xlat2.xxx * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    SV_Target1.w = u_xlat2.w * _GlossMapScale;
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    SV_Target2.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    SV_Target3 = vec4(1.0, 1.0, 1.0, 1.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[3];
						float _BumpScale;
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_6[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _OcclusionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = (-_OcclusionStrength) + 1.0;
					    SV_Target0.w = u_xlat0.y * _OcclusionStrength + u_xlat0.x;
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat9 = (-u_xlat2.x) * 0.779083729 + 0.779083729;
					    SV_Target0.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    SV_Target1.xyz = u_xlat2.xxx * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    SV_Target1.w = u_xlat2.w * _GlossMapScale;
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat0.xy = u_xlat0.xy * vec2(_BumpScale);
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = vs_TEXCOORD2.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = min(u_xlat0.x, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    SV_Target2.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    SV_Target3 = vec4(1.0, 1.0, 1.0, 1.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[3];
						float _BumpScale;
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_6[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _OcclusionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = (-_OcclusionStrength) + 1.0;
					    SV_Target0.w = u_xlat0.y * _OcclusionStrength + u_xlat0.x;
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat9 = (-u_xlat2.x) * 0.779083729 + 0.779083729;
					    SV_Target0.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    SV_Target1.xyz = u_xlat2.xxx * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    SV_Target1.w = u_xlat2.w * _GlossMapScale;
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat0.xy = u_xlat0.xy * vec2(_BumpScale);
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = vs_TEXCOORD2.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = min(u_xlat0.x, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    SV_Target2.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    SV_Target3 = vec4(1.0, 1.0, 1.0, 1.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LOD_FADE_CROSSFADE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_6[3];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[8];
						vec4 unity_LODFade;
						vec4 unused_1_2;
					};
					uniform  sampler2D _DitherMaskLOD2D;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.yx * vec2(0.25, 0.25);
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.z = u_xlat0.x * 0.0625 + unity_LODFade.y;
					    u_xlat0 = texture(_DitherMaskLOD2D, u_xlat0.yz);
					    u_xlat0.x = u_xlat0.w + -0.5;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = (-_OcclusionStrength) + 1.0;
					    SV_Target0.w = u_xlat0.y * _OcclusionStrength + u_xlat0.x;
					    u_xlat0.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = _Color.xyz * u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    SV_Target0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    SV_Target2.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    SV_Target3 = vec4(1.0, 1.0, 1.0, 1.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_METALLICGLOSSMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[4];
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_5[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[6];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[8];
						vec4 unity_LODFade;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _DitherMaskLOD2D;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat7;
					vec3 u_xlat8;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.yx * vec2(0.25, 0.25);
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.z = u_xlat0.x * 0.0625 + unity_LODFade.y;
					    u_xlat0 = texture(_DitherMaskLOD2D, u_xlat0.yz);
					    u_xlat0.x = u_xlat0.w + -0.5;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    SV_Target1.w = u_xlat0.w * _GlossMapScale;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = _Color.xyz * u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.x = (-u_xlat0.x) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat2.y * _OcclusionStrength + u_xlat2.x;
					    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb2){
					        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat7.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat7.xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat7.xyz;
					        u_xlat7.xyz = u_xlat7.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat8.x = vs_TEXCOORD2.w;
					        u_xlat8.y = vs_TEXCOORD3.w;
					        u_xlat8.z = vs_TEXCOORD4.w;
					        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat7.xyz : u_xlat8.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat7.x = u_xlat2.y * 0.25;
					        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat8.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat7.x = max(u_xlat7.x, u_xlat3.x);
					        u_xlat2.x = min(u_xlat8.x, u_xlat7.x);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(u_xlat3, u_xlat1);
					        u_xlat3.y = dot(u_xlat4, u_xlat1);
					        u_xlat3.z = dot(u_xlat2, u_xlat1);
					    } else {
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(unity_SHAr, u_xlat1);
					        u_xlat3.y = dot(unity_SHAg, u_xlat1);
					        u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    }
					    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = u_xlat0.www * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat2.xyz));
					    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0 = u_xlat0;
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[3];
						float _BumpScale;
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_6[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[6];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[8];
						vec4 unity_LODFade;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _DitherMaskLOD2D;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat11;
					float u_xlat16;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.yx * vec2(0.25, 0.25);
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.z = u_xlat0.x * 0.0625 + unity_LODFade.y;
					    u_xlat0 = texture(_DitherMaskLOD2D, u_xlat0.yz);
					    u_xlat0.x = u_xlat0.w + -0.5;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    SV_Target1.w = u_xlat0.w * _GlossMapScale;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = _Color.xyz * u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.x = (-u_xlat0.x) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpScale);
					    u_xlat11 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat11 = min(u_xlat11, 1.0);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat11 = sqrt(u_xlat11);
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyw = vs_TEXCOORD2.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat11) + u_xlat1.xyw;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat2 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat2.y * _OcclusionStrength + u_xlat2.x;
					    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb2){
					        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat7.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat7.xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat7.xyz;
					        u_xlat7.xyz = u_xlat7.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat8.x = vs_TEXCOORD2.w;
					        u_xlat8.y = vs_TEXCOORD3.w;
					        u_xlat8.z = vs_TEXCOORD4.w;
					        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat7.xyz : u_xlat8.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat7.x = u_xlat2.y * 0.25;
					        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat8.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat7.x = max(u_xlat7.x, u_xlat3.x);
					        u_xlat2.x = min(u_xlat8.x, u_xlat7.x);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(u_xlat3, u_xlat1);
					        u_xlat3.y = dot(u_xlat4, u_xlat1);
					        u_xlat3.z = dot(u_xlat2, u_xlat1);
					    } else {
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(unity_SHAr, u_xlat1);
					        u_xlat3.y = dot(unity_SHAg, u_xlat1);
					        u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    }
					    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = u_xlat0.www * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat2.xyz));
					    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0 = u_xlat0;
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[3];
						float _BumpScale;
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_6[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[6];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[8];
						vec4 unity_LODFade;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _DitherMaskLOD2D;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat11;
					float u_xlat16;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.yx * vec2(0.25, 0.25);
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.z = u_xlat0.x * 0.0625 + unity_LODFade.y;
					    u_xlat0 = texture(_DitherMaskLOD2D, u_xlat0.yz);
					    u_xlat0.x = u_xlat0.w + -0.5;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    SV_Target1.w = u_xlat0.w * _GlossMapScale;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = _Color.xyz * u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.x = (-u_xlat0.x) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpScale);
					    u_xlat11 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat11 = min(u_xlat11, 1.0);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat11 = sqrt(u_xlat11);
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyw = vs_TEXCOORD2.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat11) + u_xlat1.xyw;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat2 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat2.y * _OcclusionStrength + u_xlat2.x;
					    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb2){
					        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat7.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat7.xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat7.xyz;
					        u_xlat7.xyz = u_xlat7.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat8.x = vs_TEXCOORD2.w;
					        u_xlat8.y = vs_TEXCOORD3.w;
					        u_xlat8.z = vs_TEXCOORD4.w;
					        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat7.xyz : u_xlat8.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat7.x = u_xlat2.y * 0.25;
					        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat8.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat7.x = max(u_xlat7.x, u_xlat3.x);
					        u_xlat2.x = min(u_xlat8.x, u_xlat7.x);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(u_xlat3, u_xlat1);
					        u_xlat3.y = dot(u_xlat4, u_xlat1);
					        u_xlat3.z = dot(u_xlat2, u_xlat1);
					    } else {
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(unity_SHAr, u_xlat1);
					        u_xlat3.y = dot(unity_SHAg, u_xlat1);
					        u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    }
					    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = u_xlat0.www * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat2.xyz));
					    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0 = u_xlat0;
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_6[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[6];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[8];
						vec4 unity_LODFade;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _DitherMaskLOD2D;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat7;
					vec3 u_xlat8;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.yx * vec2(0.25, 0.25);
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.z = u_xlat0.x * 0.0625 + unity_LODFade.y;
					    u_xlat0 = texture(_DitherMaskLOD2D, u_xlat0.yz);
					    u_xlat0.x = u_xlat0.w + -0.5;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat2.y * _OcclusionStrength + u_xlat2.x;
					    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb2){
					        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat7.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat7.xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat7.xyz;
					        u_xlat7.xyz = u_xlat7.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat8.x = vs_TEXCOORD2.w;
					        u_xlat8.y = vs_TEXCOORD3.w;
					        u_xlat8.z = vs_TEXCOORD4.w;
					        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat7.xyz : u_xlat8.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat7.x = u_xlat2.y * 0.25;
					        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat8.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat7.x = max(u_xlat7.x, u_xlat3.x);
					        u_xlat2.x = min(u_xlat8.x, u_xlat7.x);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(u_xlat3, u_xlat1);
					        u_xlat3.y = dot(u_xlat4, u_xlat1);
					        u_xlat3.z = dot(u_xlat2, u_xlat1);
					    } else {
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(unity_SHAr, u_xlat1);
					        u_xlat3.y = dot(unity_SHAg, u_xlat1);
					        u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    }
					    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = u_xlat0.www * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target3.xyz = exp2((-u_xlat2.xyz));
					    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0 = u_xlat0;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LOD_FADE_CROSSFADE" "UNITY_HDR_ON" "_METALLICGLOSSMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[4];
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_5[3];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[8];
						vec4 unity_LODFade;
						vec4 unused_1_2;
					};
					uniform  sampler2D _DitherMaskLOD2D;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _OcclusionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.yx * vec2(0.25, 0.25);
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.z = u_xlat0.x * 0.0625 + unity_LODFade.y;
					    u_xlat0 = texture(_DitherMaskLOD2D, u_xlat0.yz);
					    u_xlat0.x = u_xlat0.w + -0.5;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = (-_OcclusionStrength) + 1.0;
					    SV_Target0.w = u_xlat0.y * _OcclusionStrength + u_xlat0.x;
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat9 = (-u_xlat2.x) * 0.779083729 + 0.779083729;
					    SV_Target0.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    SV_Target1.xyz = u_xlat2.xxx * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    SV_Target1.w = u_xlat2.w * _GlossMapScale;
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    SV_Target2.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    SV_Target3 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LOD_FADE_CROSSFADE" "UNITY_HDR_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[3];
						float _BumpScale;
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_6[3];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[8];
						vec4 unity_LODFade;
						vec4 unused_1_2;
					};
					uniform  sampler2D _DitherMaskLOD2D;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _OcclusionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.yx * vec2(0.25, 0.25);
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.z = u_xlat0.x * 0.0625 + unity_LODFade.y;
					    u_xlat0 = texture(_DitherMaskLOD2D, u_xlat0.yz);
					    u_xlat0.x = u_xlat0.w + -0.5;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = (-_OcclusionStrength) + 1.0;
					    SV_Target0.w = u_xlat0.y * _OcclusionStrength + u_xlat0.x;
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat9 = (-u_xlat2.x) * 0.779083729 + 0.779083729;
					    SV_Target0.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    SV_Target1.xyz = u_xlat2.xxx * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    SV_Target1.w = u_xlat2.w * _GlossMapScale;
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat0.xy = u_xlat0.xy * vec2(_BumpScale);
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = vs_TEXCOORD2.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = min(u_xlat0.x, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    SV_Target2.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    SV_Target3 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LOD_FADE_CROSSFADE" "UNITY_HDR_ON" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[3];
						float _BumpScale;
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_6[3];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[8];
						vec4 unity_LODFade;
						vec4 unused_1_2;
					};
					uniform  sampler2D _DitherMaskLOD2D;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _OcclusionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.yx * vec2(0.25, 0.25);
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.z = u_xlat0.x * 0.0625 + unity_LODFade.y;
					    u_xlat0 = texture(_DitherMaskLOD2D, u_xlat0.yz);
					    u_xlat0.x = u_xlat0.w + -0.5;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = (-_OcclusionStrength) + 1.0;
					    SV_Target0.w = u_xlat0.y * _OcclusionStrength + u_xlat0.x;
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat9 = (-u_xlat2.x) * 0.779083729 + 0.779083729;
					    SV_Target0.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    SV_Target1.xyz = u_xlat2.xxx * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    SV_Target1.w = u_xlat2.w * _GlossMapScale;
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat0.xy = u_xlat0.xy * vec2(_BumpScale);
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = vs_TEXCOORD2.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = min(u_xlat0.x, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    SV_Target2.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    SV_Target3 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LOD_FADE_CROSSFADE" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_6[3];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[8];
						vec4 unity_LODFade;
						vec4 unused_1_2;
					};
					uniform  sampler2D _DitherMaskLOD2D;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.yx * vec2(0.25, 0.25);
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.z = u_xlat0.x * 0.0625 + unity_LODFade.y;
					    u_xlat0 = texture(_DitherMaskLOD2D, u_xlat0.yz);
					    u_xlat0.x = u_xlat0.w + -0.5;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = (-_OcclusionStrength) + 1.0;
					    SV_Target0.w = u_xlat0.y * _OcclusionStrength + u_xlat0.x;
					    u_xlat0.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = _Color.xyz * u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    SV_Target0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target1.w = _Glossiness;
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    SV_Target2.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    SV_Target3 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "UNITY_HDR_ON" "_METALLICGLOSSMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[4];
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_5[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[6];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[8];
						vec4 unity_LODFade;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _DitherMaskLOD2D;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat7;
					vec3 u_xlat8;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.yx * vec2(0.25, 0.25);
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.z = u_xlat0.x * 0.0625 + unity_LODFade.y;
					    u_xlat0 = texture(_DitherMaskLOD2D, u_xlat0.yz);
					    u_xlat0.x = u_xlat0.w + -0.5;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    SV_Target1.w = u_xlat0.w * _GlossMapScale;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = _Color.xyz * u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.x = (-u_xlat0.x) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat2.y * _OcclusionStrength + u_xlat2.x;
					    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb2){
					        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat7.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat7.xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat7.xyz;
					        u_xlat7.xyz = u_xlat7.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat8.x = vs_TEXCOORD2.w;
					        u_xlat8.y = vs_TEXCOORD3.w;
					        u_xlat8.z = vs_TEXCOORD4.w;
					        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat7.xyz : u_xlat8.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat7.x = u_xlat2.y * 0.25;
					        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat8.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat7.x = max(u_xlat7.x, u_xlat3.x);
					        u_xlat2.x = min(u_xlat8.x, u_xlat7.x);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(u_xlat3, u_xlat1);
					        u_xlat3.y = dot(u_xlat4, u_xlat1);
					        u_xlat3.z = dot(u_xlat2, u_xlat1);
					    } else {
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(unity_SHAr, u_xlat1);
					        u_xlat3.y = dot(unity_SHAg, u_xlat1);
					        u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    }
					    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = u_xlat0.www * u_xlat2.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0 = u_xlat0;
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "UNITY_HDR_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[3];
						float _BumpScale;
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_6[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[6];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[8];
						vec4 unity_LODFade;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _DitherMaskLOD2D;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat11;
					float u_xlat16;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.yx * vec2(0.25, 0.25);
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.z = u_xlat0.x * 0.0625 + unity_LODFade.y;
					    u_xlat0 = texture(_DitherMaskLOD2D, u_xlat0.yz);
					    u_xlat0.x = u_xlat0.w + -0.5;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    SV_Target1.w = u_xlat0.w * _GlossMapScale;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = _Color.xyz * u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.x = (-u_xlat0.x) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpScale);
					    u_xlat11 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat11 = min(u_xlat11, 1.0);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat11 = sqrt(u_xlat11);
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyw = vs_TEXCOORD2.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat11) + u_xlat1.xyw;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat2 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat2.y * _OcclusionStrength + u_xlat2.x;
					    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb2){
					        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat7.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat7.xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat7.xyz;
					        u_xlat7.xyz = u_xlat7.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat8.x = vs_TEXCOORD2.w;
					        u_xlat8.y = vs_TEXCOORD3.w;
					        u_xlat8.z = vs_TEXCOORD4.w;
					        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat7.xyz : u_xlat8.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat7.x = u_xlat2.y * 0.25;
					        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat8.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat7.x = max(u_xlat7.x, u_xlat3.x);
					        u_xlat2.x = min(u_xlat8.x, u_xlat7.x);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(u_xlat3, u_xlat1);
					        u_xlat3.y = dot(u_xlat4, u_xlat1);
					        u_xlat3.z = dot(u_xlat2, u_xlat1);
					    } else {
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(unity_SHAr, u_xlat1);
					        u_xlat3.y = dot(unity_SHAg, u_xlat1);
					        u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    }
					    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = u_xlat0.www * u_xlat2.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0 = u_xlat0;
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "UNITY_HDR_ON" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[3];
						float _BumpScale;
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_6[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[6];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[8];
						vec4 unity_LODFade;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _DitherMaskLOD2D;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat11;
					float u_xlat16;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.yx * vec2(0.25, 0.25);
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.z = u_xlat0.x * 0.0625 + unity_LODFade.y;
					    u_xlat0 = texture(_DitherMaskLOD2D, u_xlat0.yz);
					    u_xlat0.x = u_xlat0.w + -0.5;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    SV_Target1.w = u_xlat0.w * _GlossMapScale;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = _Color.xyz * u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.x = (-u_xlat0.x) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(_BumpScale);
					    u_xlat11 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat11 = min(u_xlat11, 1.0);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat11 = sqrt(u_xlat11);
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyw = vs_TEXCOORD2.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat11) + u_xlat1.xyw;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat2 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat2.y * _OcclusionStrength + u_xlat2.x;
					    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb2){
					        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat7.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat7.xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat7.xyz;
					        u_xlat7.xyz = u_xlat7.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat8.x = vs_TEXCOORD2.w;
					        u_xlat8.y = vs_TEXCOORD3.w;
					        u_xlat8.z = vs_TEXCOORD4.w;
					        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat7.xyz : u_xlat8.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat7.x = u_xlat2.y * 0.25;
					        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat8.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat7.x = max(u_xlat7.x, u_xlat3.x);
					        u_xlat2.x = min(u_xlat8.x, u_xlat7.x);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(u_xlat3, u_xlat1);
					        u_xlat3.y = dot(u_xlat4, u_xlat1);
					        u_xlat3.z = dot(u_xlat2, u_xlat1);
					    } else {
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(unity_SHAr, u_xlat1);
					        u_xlat3.y = dot(unity_SHAg, u_xlat1);
					        u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    }
					    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = u_xlat0.www * u_xlat2.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0 = u_xlat0;
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_6[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[6];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_2_0[8];
						vec4 unity_LODFade;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _DitherMaskLOD2D;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat7;
					vec3 u_xlat8;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.yx * vec2(0.25, 0.25);
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.z = u_xlat0.x * 0.0625 + unity_LODFade.y;
					    u_xlat0 = texture(_DitherMaskLOD2D, u_xlat0.yz);
					    u_xlat0.x = u_xlat0.w + -0.5;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = (-_OcclusionStrength) + 1.0;
					    u_xlat0.w = u_xlat2.y * _OcclusionStrength + u_xlat2.x;
					    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb2){
					        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat7.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat7.xyz;
					        u_xlat7.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat7.xyz;
					        u_xlat7.xyz = u_xlat7.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat8.x = vs_TEXCOORD2.w;
					        u_xlat8.y = vs_TEXCOORD3.w;
					        u_xlat8.z = vs_TEXCOORD4.w;
					        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat7.xyz : u_xlat8.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat7.x = u_xlat2.y * 0.25;
					        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat8.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat7.x = max(u_xlat7.x, u_xlat3.x);
					        u_xlat2.x = min(u_xlat8.x, u_xlat7.x);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(u_xlat3, u_xlat1);
					        u_xlat3.y = dot(u_xlat4, u_xlat1);
					        u_xlat3.z = dot(u_xlat2, u_xlat1);
					    } else {
					        u_xlat1.w = 1.0;
					        u_xlat3.x = dot(unity_SHAr, u_xlat1);
					        u_xlat3.y = dot(unity_SHAg, u_xlat1);
					        u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    }
					    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = u_xlat0.www * u_xlat2.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0 = u_xlat0;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LOD_FADE_CROSSFADE" "_METALLICGLOSSMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[4];
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_5[3];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[8];
						vec4 unity_LODFade;
						vec4 unused_1_2;
					};
					uniform  sampler2D _DitherMaskLOD2D;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _OcclusionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.yx * vec2(0.25, 0.25);
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.z = u_xlat0.x * 0.0625 + unity_LODFade.y;
					    u_xlat0 = texture(_DitherMaskLOD2D, u_xlat0.yz);
					    u_xlat0.x = u_xlat0.w + -0.5;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = (-_OcclusionStrength) + 1.0;
					    SV_Target0.w = u_xlat0.y * _OcclusionStrength + u_xlat0.x;
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat9 = (-u_xlat2.x) * 0.779083729 + 0.779083729;
					    SV_Target0.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    SV_Target1.xyz = u_xlat2.xxx * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    SV_Target1.w = u_xlat2.w * _GlossMapScale;
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    SV_Target2.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    SV_Target3 = vec4(1.0, 1.0, 1.0, 1.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LOD_FADE_CROSSFADE" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[3];
						float _BumpScale;
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_6[3];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[8];
						vec4 unity_LODFade;
						vec4 unused_1_2;
					};
					uniform  sampler2D _DitherMaskLOD2D;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _OcclusionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.yx * vec2(0.25, 0.25);
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.z = u_xlat0.x * 0.0625 + unity_LODFade.y;
					    u_xlat0 = texture(_DitherMaskLOD2D, u_xlat0.yz);
					    u_xlat0.x = u_xlat0.w + -0.5;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = (-_OcclusionStrength) + 1.0;
					    SV_Target0.w = u_xlat0.y * _OcclusionStrength + u_xlat0.x;
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat9 = (-u_xlat2.x) * 0.779083729 + 0.779083729;
					    SV_Target0.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    SV_Target1.xyz = u_xlat2.xxx * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    SV_Target1.w = u_xlat2.w * _GlossMapScale;
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat0.xy = u_xlat0.xy * vec2(_BumpScale);
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = vs_TEXCOORD2.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = min(u_xlat0.x, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    SV_Target2.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    SV_Target3 = vec4(1.0, 1.0, 1.0, 1.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LOD_FADE_CROSSFADE" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 unused_0_2[3];
						float _BumpScale;
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_6[3];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[8];
						vec4 unity_LODFade;
						vec4 unused_1_2;
					};
					uniform  sampler2D _DitherMaskLOD2D;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _OcclusionMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.yx * vec2(0.25, 0.25);
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.z = u_xlat0.x * 0.0625 + unity_LODFade.y;
					    u_xlat0 = texture(_DitherMaskLOD2D, u_xlat0.yz);
					    u_xlat0.x = u_xlat0.w + -0.5;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = (-_OcclusionStrength) + 1.0;
					    SV_Target0.w = u_xlat0.y * _OcclusionStrength + u_xlat0.x;
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat9 = (-u_xlat2.x) * 0.779083729 + 0.779083729;
					    SV_Target0.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    SV_Target1.xyz = u_xlat2.xxx * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    SV_Target1.w = u_xlat2.w * _GlossMapScale;
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat0.xy = u_xlat0.xy * vec2(_BumpScale);
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = vs_TEXCOORD2.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = min(u_xlat0.x, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    SV_Target2.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    SV_Target3 = vec4(1.0, 1.0, 1.0, 1.0);
					    return;
					}"
				}
			}
		}
	}
	SubShader {
		LOD 150
		Tags { "PerformanceChecks" = "False" "RenderType" = "Opaque" }
		Pass {
			Name "FORWARD"
			LOD 150
			Tags { "LIGHTMODE" = "FORWARDBASE" "PerformanceChecks" = "False" "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" }
			Blend Zero Zero, Zero Zero
			ZWrite Off
			GpuProgramID 377118
			Program "vp" {
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD4.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3.x = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yzx * u_xlat0.zxy;
					    u_xlat1.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD5.w = 0.0;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3.x = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD5.w = 0.0;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat6 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat6);
					    u_xlat3.x = cos(u_xlat6);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD4.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3.x = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat0.zxy;
					    u_xlat2.xyz = u_xlat0.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat12 = u_xlat0.y * u_xlat0.y;
					    u_xlat12 = u_xlat0.x * u_xlat0.x + (-u_xlat12);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat2);
					    u_xlat0.y = dot(unity_SHBg, u_xlat2);
					    u_xlat0.z = dot(unity_SHBb, u_xlat2);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat12) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat12 = u_xlat0.y * u_xlat0.y;
					    u_xlat12 = u_xlat0.x * u_xlat0.x + (-u_xlat12);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat2);
					    u_xlat0.y = dot(unity_SHBg, u_xlat2);
					    u_xlat0.z = dot(unity_SHBb, u_xlat2);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat12) + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3.x = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD4.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[31];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_14[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat7;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat7 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat7);
					    u_xlat3.x = cos(u_xlat7);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    vs_TEXCOORD1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    u_xlat18 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD3.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat18 = u_xlat2.y * u_xlat2.y;
					    u_xlat18 = u_xlat2.x * u_xlat2.x + (-u_xlat18);
					    u_xlat1 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat1);
					    u_xlat3.y = dot(unity_SHBg, u_xlat1);
					    u_xlat3.z = dot(unity_SHBb, u_xlat1);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat2);
					    u_xlat3.y = dot(unity_SHAg, u_xlat2);
					    u_xlat3.z = dot(unity_SHAb, u_xlat2);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat2.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat4 = u_xlat3 * u_xlat3 + u_xlat4;
					    u_xlat3 = u_xlat3 * u_xlat2.xxxx + u_xlat5;
					    u_xlat2 = u_xlat0 * u_xlat2.zzzz + u_xlat3;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[31];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_14[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat7;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat7 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat7);
					    u_xlat3.x = cos(u_xlat7);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    vs_TEXCOORD1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat18 = u_xlat1.y * u_xlat1.y;
					    u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat1);
					    u_xlat3.y = dot(unity_SHAg, u_xlat1);
					    u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat1.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat4 = u_xlat3 * u_xlat3 + u_xlat4;
					    u_xlat3 = u_xlat3 * u_xlat1.xxxx + u_xlat5;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat6 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat6);
					    u_xlat3.x = cos(u_xlat6);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD4.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_11[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat7 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat7);
					    u_xlat3.x = cos(u_xlat7);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat18 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat3.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat4 = u_xlat2 * u_xlat2 + u_xlat4;
					    u_xlat2 = u_xlat2 * u_xlat3.xxxx + u_xlat5;
					    u_xlat2 = u_xlat0 * u_xlat3.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat18 = u_xlat3.y * u_xlat3.y;
					    u_xlat18 = u_xlat3.x * u_xlat3.x + (-u_xlat18);
					    u_xlat3 = u_xlat3.yzzx * u_xlat3.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_11[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat7 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat7);
					    u_xlat3.x = cos(u_xlat7);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat2.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat4 = u_xlat3 * u_xlat3 + u_xlat4;
					    u_xlat3 = u_xlat3 * u_xlat2.xxxx + u_xlat5;
					    u_xlat3 = u_xlat0 * u_xlat2.zzzz + u_xlat3;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat3 = u_xlat3 * u_xlat4;
					    u_xlat3 = max(u_xlat3, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat3;
					    u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat3.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat18 = u_xlat2.y * u_xlat2.y;
					    u_xlat18 = u_xlat2.x * u_xlat2.x + (-u_xlat18);
					    u_xlat2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat2);
					    u_xlat4.y = dot(unity_SHBg, u_xlat2);
					    u_xlat4.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3.x = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_3_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    gl_Position = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    vs_TEXCOORD1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "LIGHTPROBE_SH" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    gl_Position = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yzx * u_xlat0.zxy;
					    u_xlat1.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat22 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD5.w = 0.0;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "LIGHTPROBE_SH" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[39];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    gl_Position = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    vs_TEXCOORD1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD5.w = 0.0;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "SHADOWS_SCREEN" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_3_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    u_xlat0 = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "SHADOWS_SCREEN" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_3_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    u_xlat0 = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat1.w = 0.0;
					    vs_TEXCOORD2 = u_xlat1.wwwx;
					    vs_TEXCOORD3 = u_xlat1.wwwy;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    vs_TEXCOORD4.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    u_xlat0 = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat1.zxy;
					    u_xlat2.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat22 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat22 = u_xlat1.y * u_xlat1.y;
					    u_xlat22 = u_xlat1.x * u_xlat1.x + (-u_xlat22);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat1.x = dot(unity_SHBr, u_xlat2);
					    u_xlat1.y = dot(unity_SHBg, u_xlat2);
					    u_xlat1.z = dot(unity_SHBb, u_xlat2);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat22) + u_xlat1.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    u_xlat0 = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat1.w = 0.0;
					    vs_TEXCOORD2 = u_xlat1.wwwx;
					    vs_TEXCOORD3 = u_xlat1.wwwy;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat22 = u_xlat1.y * u_xlat1.y;
					    u_xlat22 = u_xlat1.x * u_xlat1.x + (-u_xlat22);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat1.x = dot(unity_SHBr, u_xlat2);
					    u_xlat1.y = dot(unity_SHBg, u_xlat2);
					    u_xlat1.z = dot(unity_SHBb, u_xlat2);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat22) + u_xlat1.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_3_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    gl_Position = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_3_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    gl_Position = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    vs_TEXCOORD1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[31];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_14[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    gl_Position = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD3.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat21 = u_xlat2.y * u_xlat2.y;
					    u_xlat21 = u_xlat2.x * u_xlat2.x + (-u_xlat21);
					    u_xlat1 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat1);
					    u_xlat3.y = dot(unity_SHBg, u_xlat1);
					    u_xlat3.z = dot(unity_SHBb, u_xlat1);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat21) + u_xlat3.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat2);
					    u_xlat3.y = dot(unity_SHAg, u_xlat2);
					    u_xlat3.z = dot(unity_SHAb, u_xlat2);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat2.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat4 = u_xlat3 * u_xlat3 + u_xlat4;
					    u_xlat3 = u_xlat3 * u_xlat2.xxxx + u_xlat5;
					    u_xlat2 = u_xlat0 * u_xlat2.zzzz + u_xlat3;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[31];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_14[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    gl_Position = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    vs_TEXCOORD1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat21 = u_xlat1.y * u_xlat1.y;
					    u_xlat21 = u_xlat1.x * u_xlat1.x + (-u_xlat21);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat21) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat1);
					    u_xlat3.y = dot(unity_SHAg, u_xlat1);
					    u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat1.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat4 = u_xlat3 * u_xlat3 + u_xlat4;
					    u_xlat3 = u_xlat3 * u_xlat1.xxxx + u_xlat5;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_3_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    u_xlat0 = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_3_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    u_xlat0 = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat1.w = 0.0;
					    vs_TEXCOORD2 = u_xlat1.wwwx;
					    vs_TEXCOORD3 = u_xlat1.wwwy;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    vs_TEXCOORD4.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_11[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    u_xlat0 = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat3.xyz = vec3(u_xlat22) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat22 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat2 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat3.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat4 = u_xlat2 * u_xlat2 + u_xlat4;
					    u_xlat2 = u_xlat2 * u_xlat3.xxxx + u_xlat5;
					    u_xlat2 = u_xlat1 * u_xlat3.zzzz + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat4;
					    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat2 = u_xlat2 * u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat22 = u_xlat3.y * u_xlat3.y;
					    u_xlat22 = u_xlat3.x * u_xlat3.x + (-u_xlat22);
					    u_xlat3 = u_xlat3.yzzx * u_xlat3.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat22) + u_xlat4.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_11[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    u_xlat0 = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat1.w = 0.0;
					    vs_TEXCOORD2 = u_xlat1.wwwx;
					    vs_TEXCOORD3 = u_xlat1.wwwy;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat3 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat2.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat4 = u_xlat3 * u_xlat3 + u_xlat4;
					    u_xlat3 = u_xlat3 * u_xlat2.xxxx + u_xlat5;
					    u_xlat3 = u_xlat1 * u_xlat2.zzzz + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat4;
					    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat3 = u_xlat3 * u_xlat4;
					    u_xlat3 = max(u_xlat3, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat3.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
					    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat22 = u_xlat2.y * u_xlat2.y;
					    u_xlat22 = u_xlat2.x * u_xlat2.x + (-u_xlat22);
					    u_xlat2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat2);
					    u_xlat4.y = dot(unity_SHBg, u_xlat2);
					    u_xlat4.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat22) + u_xlat4.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD5.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_3_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    gl_Position = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_7[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_3;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[4];
						vec4 unity_IndirectSpecColor;
						vec4 unused_2_2[18];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat7;
					vec3 u_xlat9;
					float u_xlat15;
					float u_xlat16;
					bool u_xlatb16;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat16 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2.xyz = vec3(u_xlat16) * vs_TEXCOORD4.xyz;
					    u_xlatb16 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb16){
					        u_xlatb16 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat9.x = vs_TEXCOORD2.w;
					        u_xlat9.y = vs_TEXCOORD3.w;
					        u_xlat9.z = vs_TEXCOORD4.w;
					        u_xlat3.xyz = (bool(u_xlatb16)) ? u_xlat3.xyz : u_xlat9.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat16 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat17 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat16, u_xlat17);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat16 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					    u_xlat3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat3.xzw = vec3(u_xlat16) * _LightColor0.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_IndirectSpecColor.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat2.xyz, (-vs_TEXCOORD1.xyz));
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat7.x = u_xlat2.x * u_xlat2.x;
					    u_xlat7.x = u_xlat2.x * u_xlat7.x;
					    u_xlat2.x = u_xlat2.x * u_xlat7.x;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 + _Glossiness;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat7.xyz = vec3(u_xlat16) * u_xlat3.xzw;
					    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(u_xlat15);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat7.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[4];
						float _GlossMapScale;
						vec4 unused_0_6[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_3;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[4];
						vec4 unity_IndirectSpecColor;
						vec4 unused_2_2[18];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat8;
					float u_xlat9;
					vec3 u_xlat10;
					float u_xlat14;
					float u_xlat18;
					float u_xlat20;
					bool u_xlatb20;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat14 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat14 = min(u_xlat14, 1.0);
					    u_xlat14 = (-u_xlat14) + 1.0;
					    u_xlat14 = sqrt(u_xlat14);
					    u_xlat3.xyz = u_xlat2.yyy * vs_TEXCOORD3.xyz;
					    u_xlat2.xyw = vs_TEXCOORD2.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat14) + u_xlat2.xyw;
					    u_xlatb20 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb20){
					        u_xlatb20 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat10.x = vs_TEXCOORD2.w;
					        u_xlat10.y = vs_TEXCOORD3.w;
					        u_xlat10.z = vs_TEXCOORD4.w;
					        u_xlat3.xyz = (bool(u_xlatb20)) ? u_xlat3.xyz : u_xlat10.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat20 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat9 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat20, u_xlat9);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat20 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat3.xzw = vec3(u_xlat20) * _LightColor0.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * vs_TEXCOORD5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * unity_IndirectSpecColor.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat2.xyz, (-vs_TEXCOORD1.xyz));
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat8.x = u_xlat2.x * u_xlat2.x;
					    u_xlat8.x = u_xlat2.x * u_xlat8.x;
					    u_xlat2.x = u_xlat2.x * u_xlat8.x;
					    u_xlat18 = u_xlat1.w * _GlossMapScale + (-u_xlat18);
					    u_xlat18 = u_xlat18 + 1.0;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat8.xyz = vec3(u_xlat20) * u_xlat3.xzw;
					    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(u_xlat18);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat8.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_7[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_3;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[4];
						vec4 unity_IndirectSpecColor;
						vec4 unused_2_2[18];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat8;
					vec3 u_xlat10;
					float u_xlat18;
					float u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlatb19 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb19){
					        u_xlatb19 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat10.x = vs_TEXCOORD2.w;
					        u_xlat10.y = vs_TEXCOORD3.w;
					        u_xlat10.z = vs_TEXCOORD4.w;
					        u_xlat3.xyz = (bool(u_xlatb19)) ? u_xlat3.xyz : u_xlat10.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat19 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat20 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat19, u_xlat20);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat19 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat3.xzw = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * vs_TEXCOORD5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * unity_IndirectSpecColor.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat2.xyz, (-vs_TEXCOORD1.xyz));
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat8.x = u_xlat2.x * u_xlat2.x;
					    u_xlat8.x = u_xlat2.x * u_xlat8.x;
					    u_xlat2.x = u_xlat2.x * u_xlat8.x;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 + _Glossiness;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat8.xyz = vec3(u_xlat19) * u_xlat3.xzw;
					    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(u_xlat18);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat8.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _BumpScale;
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_8[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[4];
						vec4 unity_IndirectSpecColor;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					bool u_xlatb4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat9;
					vec3 u_xlat11;
					float u_xlat16;
					float u_xlat21;
					float u_xlat23;
					float u_xlat24;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat21 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat2.xy = u_xlat2.xy * vec2(_BumpScale);
					    u_xlat16 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat16 = min(u_xlat16, 1.0);
					    u_xlat16 = (-u_xlat16) + 1.0;
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat3.xyz = u_xlat2.yyy * vs_TEXCOORD3.xyz;
					    u_xlat2.xyw = vs_TEXCOORD2.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat16) + u_xlat2.xyw;
					    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat2.xyz = vec3(u_xlat23) * u_xlat2.xyz;
					    u_xlat23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat3.xyz = vec3(u_xlat23) * vs_TEXCOORD1.xyz;
					    u_xlat11.x = vs_TEXCOORD2.w;
					    u_xlat11.y = vs_TEXCOORD3.w;
					    u_xlat11.z = vs_TEXCOORD4.w;
					    u_xlat5.xyz = (-u_xlat11.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6.x = unity_MatrixV[0].z;
					    u_xlat6.y = unity_MatrixV[1].z;
					    u_xlat6.z = unity_MatrixV[2].z;
					    u_xlat24 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat5.xyz = u_xlat11.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat4.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat4.x = (-u_xlat24) + u_xlat4.x;
					    u_xlat24 = unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat24;
					    u_xlat24 = u_xlat24 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlatb4 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb4){
					        u_xlatb4 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb4)) ? u_xlat5.xyz : u_xlat11.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat11.x = u_xlat4.y * 0.25 + 0.75;
					        u_xlat5.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat11.x, u_xlat5.x);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat4.x = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat11.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat5 = texture(_ShadowMapTexture, u_xlat11.xy);
					    u_xlat4.x = u_xlat4.x + (-u_xlat5.x);
					    u_xlat24 = u_xlat24 * u_xlat4.x + u_xlat5.x;
					    u_xlat4 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = (-_OcclusionStrength) + 1.0;
					    u_xlat4.x = u_xlat4.y * _OcclusionStrength + u_xlat4.x;
					    u_xlat11.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * unity_IndirectSpecColor.xyz;
					    u_xlat24 = (-u_xlat1.w) * _GlossMapScale + 1.0;
					    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat23) + _WorldSpaceLightPos0.xyz;
					    u_xlat23 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat23 = max(u_xlat23, 0.00100000005);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat6.xyz = vec3(u_xlat23) * u_xlat6.xyz;
					    u_xlat23 = dot(u_xlat2.xyz, (-u_xlat3.xyz));
					    u_xlat2.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat9 = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat9 = dot(vec2(u_xlat9), vec2(u_xlat24));
					    u_xlat9 = u_xlat9 + -0.5;
					    u_xlat16 = (-u_xlat2.x) + 1.0;
					    u_xlat3.x = u_xlat16 * u_xlat16;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat16 = u_xlat16 * u_xlat3.x;
					    u_xlat16 = u_xlat9 * u_xlat16 + 1.0;
					    u_xlat23 = -abs(u_xlat23) + 1.0;
					    u_xlat3.x = u_xlat23 * u_xlat23;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat23 = u_xlat23 * u_xlat3.x;
					    u_xlat9 = u_xlat9 * u_xlat23 + 1.0;
					    u_xlat9 = u_xlat9 * u_xlat16;
					    u_xlat2.x = u_xlat2.x * u_xlat9;
					    u_xlat9 = u_xlat24 * u_xlat24;
					    u_xlat9 = max(u_xlat9, 0.00200000009);
					    u_xlat9 = u_xlat9 * 0.280000001;
					    u_xlat9 = (-u_xlat9) * u_xlat24 + 1.0;
					    u_xlat21 = u_xlat1.w * _GlossMapScale + (-u_xlat21);
					    u_xlat21 = u_xlat21 + 1.0;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat11.xyz;
					    u_xlat2.xyz = u_xlat5.xyz * vec3(u_xlat9);
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat23) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_8[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[4];
						vec4 unity_IndirectSpecColor;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat9;
					vec3 u_xlat11;
					float u_xlat16;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					float u_xlat24;
					bool u_xlatb24;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat21 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat22 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * vs_TEXCOORD4.xyz;
					    u_xlat22 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat3.xyz = vec3(u_xlat22) * vs_TEXCOORD1.xyz;
					    u_xlat11.x = vs_TEXCOORD2.w;
					    u_xlat11.y = vs_TEXCOORD3.w;
					    u_xlat11.z = vs_TEXCOORD4.w;
					    u_xlat5.xyz = (-u_xlat11.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6.x = unity_MatrixV[0].z;
					    u_xlat6.y = unity_MatrixV[1].z;
					    u_xlat6.z = unity_MatrixV[2].z;
					    u_xlat23 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat5.xyz = u_xlat11.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = (-u_xlat23) + u_xlat24;
					    u_xlat23 = unity_ShadowFadeCenterAndType.w * u_xlat24 + u_xlat23;
					    u_xlat23 = u_xlat23 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlatb24 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb24){
					        u_xlatb24 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb24)) ? u_xlat5.xyz : u_xlat11.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat24 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat11.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat24, u_xlat11.x);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat24 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat4 = texture(_ShadowMapTexture, u_xlat4.xy);
					    u_xlat24 = u_xlat24 + (-u_xlat4.x);
					    u_xlat23 = u_xlat23 * u_xlat24 + u_xlat4.x;
					    u_xlat4 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat24 = (-_OcclusionStrength) + 1.0;
					    u_xlat24 = u_xlat4.y * _OcclusionStrength + u_xlat24;
					    u_xlat4.xyz = vec3(u_xlat23) * _LightColor0.xyz;
					    u_xlat5.xyz = vec3(u_xlat24) * unity_IndirectSpecColor.xyz;
					    u_xlat23 = (-_Glossiness) + 1.0;
					    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat22 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat22 = max(u_xlat22, 0.00100000005);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat6.xyz = vec3(u_xlat22) * u_xlat6.xyz;
					    u_xlat22 = dot(u_xlat2.xyz, (-u_xlat3.xyz));
					    u_xlat2.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat9 = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat9 = dot(vec2(u_xlat9), vec2(u_xlat23));
					    u_xlat9 = u_xlat9 + -0.5;
					    u_xlat16 = (-u_xlat2.x) + 1.0;
					    u_xlat3.x = u_xlat16 * u_xlat16;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat16 = u_xlat16 * u_xlat3.x;
					    u_xlat16 = u_xlat9 * u_xlat16 + 1.0;
					    u_xlat22 = -abs(u_xlat22) + 1.0;
					    u_xlat3.x = u_xlat22 * u_xlat22;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat22 = u_xlat22 * u_xlat3.x;
					    u_xlat9 = u_xlat9 * u_xlat22 + 1.0;
					    u_xlat9 = u_xlat9 * u_xlat16;
					    u_xlat2.x = u_xlat2.x * u_xlat9;
					    u_xlat9 = u_xlat23 * u_xlat23;
					    u_xlat9 = max(u_xlat9, 0.00200000009);
					    u_xlat9 = u_xlat9 * 0.280000001;
					    u_xlat9 = (-u_xlat9) * u_xlat23 + 1.0;
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat21 = u_xlat21 + _Glossiness;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat2.xzw = u_xlat2.xxx * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat9);
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat22) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xzw + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _BumpScale;
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_8[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[4];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_7;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[4];
						vec4 unity_IndirectSpecColor;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					bool u_xlatb4;
					vec4 u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat14;
					bool u_xlatb14;
					float u_xlat20;
					vec2 u_xlat23;
					float u_xlat27;
					float u_xlat29;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat27 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat2.xy = u_xlat2.xy * vec2(_BumpScale);
					    u_xlat20 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat20 = min(u_xlat20, 1.0);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat20 = sqrt(u_xlat20);
					    u_xlat3.xyz = u_xlat2.yyy * vs_TEXCOORD3.xyz;
					    u_xlat2.xyw = vs_TEXCOORD2.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat20) + u_xlat2.xyw;
					    u_xlat29 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat29 = inversesqrt(u_xlat29);
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat12.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat13.x = vs_TEXCOORD2.w;
					    u_xlat13.y = vs_TEXCOORD3.w;
					    u_xlat13.z = vs_TEXCOORD4.w;
					    u_xlat5.xyz = (-u_xlat13.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6.x = unity_MatrixV[0].z;
					    u_xlat6.y = unity_MatrixV[1].z;
					    u_xlat6.z = unity_MatrixV[2].z;
					    u_xlat4.x = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat5.xyz = u_xlat13.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat5.x = (-u_xlat4.x) + u_xlat5.x;
					    u_xlat4.x = unity_ShadowFadeCenterAndType.w * u_xlat5.x + u_xlat4.x;
					    u_xlat4.x = u_xlat4.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlatb5 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb5){
					        u_xlatb14 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat14.xyz = (bool(u_xlatb14)) ? u_xlat6.xyz : u_xlat13.xyz;
					        u_xlat14.xyz = u_xlat14.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat14.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat14.x = u_xlat6.y * 0.25 + 0.75;
					        u_xlat23.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat6.x = max(u_xlat23.x, u_xlat14.x);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					    } else {
					        u_xlat6.x = float(1.0);
					        u_xlat6.y = float(1.0);
					        u_xlat6.z = float(1.0);
					        u_xlat6.w = float(1.0);
					    }
					    u_xlat14.x = dot(u_xlat6, unity_OcclusionMaskSelector);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat23.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat6 = texture(_ShadowMapTexture, u_xlat23.xy);
					    u_xlat14.x = u_xlat14.x + (-u_xlat6.x);
					    u_xlat4.x = u_xlat4.x * u_xlat14.x + u_xlat6.x;
					    u_xlat6 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat14.x = (-_OcclusionStrength) + 1.0;
					    u_xlat14.x = u_xlat6.y * _OcclusionStrength + u_xlat14.x;
					    u_xlat6.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    if(u_xlatb5){
					        u_xlatb4 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xzw = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xzw = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat5.xzw;
					        u_xlat5.xzw = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat5.xzw;
					        u_xlat5.xzw = u_xlat5.xzw + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb4)) ? u_xlat5.xzw : u_xlat13.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat13.x = u_xlat4.y * 0.25;
					        u_xlat5.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat23.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat13.x = max(u_xlat13.x, u_xlat5.x);
					        u_xlat4.x = min(u_xlat23.x, u_xlat13.x);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					        u_xlat5.xzw = u_xlat4.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat8 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					        u_xlat4.xyz = u_xlat4.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat2.w = 1.0;
					        u_xlat7.x = dot(u_xlat7, u_xlat2);
					        u_xlat7.y = dot(u_xlat8, u_xlat2);
					        u_xlat7.z = dot(u_xlat4, u_xlat2);
					    } else {
					        u_xlat2.w = 1.0;
					        u_xlat7.x = dot(unity_SHAr, u_xlat2);
					        u_xlat7.y = dot(unity_SHAg, u_xlat2);
					        u_xlat7.z = dot(unity_SHAb, u_xlat2);
					    }
					    u_xlat4.xyz = u_xlat7.xyz + vs_TEXCOORD5.xyz;
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat5.xzw = u_xlat14.xxx * unity_IndirectSpecColor.xyz;
					    u_xlat29 = (-u_xlat1.w) * _GlossMapScale + 1.0;
					    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat3.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat3.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat3.x = max(u_xlat3.x, 0.00100000005);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat3.x = dot(u_xlat2.xyz, (-u_xlat12.xyz));
					    u_xlat2.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat11 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat11 = dot(vec2(u_xlat11), vec2(u_xlat29));
					    u_xlat11 = u_xlat11 + -0.5;
					    u_xlat20 = (-u_xlat2.x) + 1.0;
					    u_xlat12.x = u_xlat20 * u_xlat20;
					    u_xlat12.x = u_xlat12.x * u_xlat12.x;
					    u_xlat20 = u_xlat20 * u_xlat12.x;
					    u_xlat20 = u_xlat11 * u_xlat20 + 1.0;
					    u_xlat3.x = -abs(u_xlat3.x) + 1.0;
					    u_xlat12.x = u_xlat3.x * u_xlat3.x;
					    u_xlat12.x = u_xlat12.x * u_xlat12.x;
					    u_xlat3.x = u_xlat3.x * u_xlat12.x;
					    u_xlat11 = u_xlat11 * u_xlat3.x + 1.0;
					    u_xlat11 = u_xlat11 * u_xlat20;
					    u_xlat2.x = u_xlat2.x * u_xlat11;
					    u_xlat11 = u_xlat29 * u_xlat29;
					    u_xlat11 = max(u_xlat11, 0.00200000009);
					    u_xlat11 = u_xlat11 * 0.280000001;
					    u_xlat11 = (-u_xlat11) * u_xlat29 + 1.0;
					    u_xlat27 = u_xlat1.w * _GlossMapScale + (-u_xlat27);
					    u_xlat27 = u_xlat27 + 1.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.xzw = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat2.xzw = u_xlat4.xyz * u_xlat14.xxx + u_xlat2.xzw;
					    u_xlat12.xyz = u_xlat5.xzw * vec3(u_xlat11);
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(u_xlat27);
					    u_xlat0.xyz = u_xlat3.xxx * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat12.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xzw + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_8[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[4];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_7;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[4];
						vec4 unity_IndirectSpecColor;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					bool u_xlatb4;
					vec4 u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat10;
					vec3 u_xlat12;
					vec3 u_xlat13;
					float u_xlat18;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					bool u_xlatb27;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat24 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat25 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * vs_TEXCOORD4.xyz;
					    u_xlat25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat3.xyz = vec3(u_xlat25) * vs_TEXCOORD1.xyz;
					    u_xlat12.x = vs_TEXCOORD2.w;
					    u_xlat12.y = vs_TEXCOORD3.w;
					    u_xlat12.z = vs_TEXCOORD4.w;
					    u_xlat5.xyz = (-u_xlat12.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6.x = unity_MatrixV[0].z;
					    u_xlat6.y = unity_MatrixV[1].z;
					    u_xlat6.z = unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat5.xyz = u_xlat12.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat4.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat4.x = (-u_xlat27) + u_xlat4.x;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlatb4 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb4){
					        u_xlatb5 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat13.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat13.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat13.xyz;
					        u_xlat13.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat13.xyz;
					        u_xlat13.xyz = u_xlat13.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat5.xyz = (bool(u_xlatb5)) ? u_xlat13.xyz : u_xlat12.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat5.yzw = u_xlat5.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat13.x = u_xlat5.y * 0.25 + 0.75;
					        u_xlat6.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat5.x = max(u_xlat13.x, u_xlat6.x);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					    } else {
					        u_xlat5.x = float(1.0);
					        u_xlat5.y = float(1.0);
					        u_xlat5.z = float(1.0);
					        u_xlat5.w = float(1.0);
					    }
					    u_xlat5.x = dot(u_xlat5, unity_OcclusionMaskSelector);
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat13.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat6 = texture(_ShadowMapTexture, u_xlat13.xy);
					    u_xlat5.x = u_xlat5.x + (-u_xlat6.x);
					    u_xlat27 = u_xlat27 * u_xlat5.x + u_xlat6.x;
					    u_xlat5 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat5.x = (-_OcclusionStrength) + 1.0;
					    u_xlat5.x = u_xlat5.y * _OcclusionStrength + u_xlat5.x;
					    u_xlat13.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    if(u_xlatb4){
					        u_xlatb27 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb27)) ? u_xlat6.xyz : u_xlat12.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat27 = u_xlat4.y * 0.25;
					        u_xlat12.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat6.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat27 = max(u_xlat27, u_xlat12.x);
					        u_xlat4.x = min(u_xlat6.x, u_xlat27);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					        u_xlat7.xyz = u_xlat4.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat7.xyz);
					        u_xlat4.xyz = u_xlat4.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat2.w = 1.0;
					        u_xlat6.x = dot(u_xlat6, u_xlat2);
					        u_xlat6.y = dot(u_xlat7, u_xlat2);
					        u_xlat6.z = dot(u_xlat4, u_xlat2);
					    } else {
					        u_xlat2.w = 1.0;
					        u_xlat6.x = dot(unity_SHAr, u_xlat2);
					        u_xlat6.y = dot(unity_SHAg, u_xlat2);
					        u_xlat6.z = dot(unity_SHAb, u_xlat2);
					    }
					    u_xlat4.xyz = u_xlat6.xyz + vs_TEXCOORD5.xyz;
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat6.xyz = u_xlat5.xxx * unity_IndirectSpecColor.xyz;
					    u_xlat26 = (-_Glossiness) + 1.0;
					    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;
					    u_xlat25 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat25 = max(u_xlat25, 0.00100000005);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat7.xyz = vec3(u_xlat25) * u_xlat7.xyz;
					    u_xlat25 = dot(u_xlat2.xyz, (-u_xlat3.xyz));
					    u_xlat2.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat10 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);
					    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
					    u_xlat10 = u_xlat10 * u_xlat10;
					    u_xlat10 = dot(vec2(u_xlat10), vec2(u_xlat26));
					    u_xlat10 = u_xlat10 + -0.5;
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat3.x = u_xlat18 * u_xlat18;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat18 = u_xlat18 * u_xlat3.x;
					    u_xlat18 = u_xlat10 * u_xlat18 + 1.0;
					    u_xlat25 = -abs(u_xlat25) + 1.0;
					    u_xlat3.x = u_xlat25 * u_xlat25;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat10 = u_xlat10 * u_xlat25 + 1.0;
					    u_xlat10 = u_xlat10 * u_xlat18;
					    u_xlat2.x = u_xlat2.x * u_xlat10;
					    u_xlat10 = u_xlat26 * u_xlat26;
					    u_xlat10 = max(u_xlat10, 0.00200000009);
					    u_xlat10 = u_xlat10 * 0.280000001;
					    u_xlat10 = (-u_xlat10) * u_xlat26 + 1.0;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 + _Glossiness;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat2.xzw = u_xlat2.xxx * u_xlat13.xyz;
					    u_xlat2.xzw = u_xlat4.xyz * u_xlat5.xxx + u_xlat2.xzw;
					    u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat10);
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xzw + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[4];
						float _GlossMapScale;
						vec4 unused_0_6[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_3;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[4];
						vec4 unity_IndirectSpecColor;
						vec4 unused_2_2[18];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat7;
					float u_xlat8;
					vec3 u_xlat9;
					float u_xlat12;
					float u_xlat15;
					float u_xlat17;
					bool u_xlatb17;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat15 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat3.xyz = u_xlat2.yyy * vs_TEXCOORD3.xyz;
					    u_xlat2.xyw = vs_TEXCOORD2.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat12) + u_xlat2.xyw;
					    u_xlatb17 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb17){
					        u_xlatb17 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat9.x = vs_TEXCOORD2.w;
					        u_xlat9.y = vs_TEXCOORD3.w;
					        u_xlat9.z = vs_TEXCOORD4.w;
					        u_xlat3.xyz = (bool(u_xlatb17)) ? u_xlat3.xyz : u_xlat9.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat17 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat8 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat17, u_xlat8);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat17 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					    u_xlat3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat3.xzw = vec3(u_xlat17) * _LightColor0.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_IndirectSpecColor.xyz;
					    u_xlat17 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat2.xyz, (-vs_TEXCOORD1.xyz));
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat7.x = u_xlat2.x * u_xlat2.x;
					    u_xlat7.x = u_xlat2.x * u_xlat7.x;
					    u_xlat2.x = u_xlat2.x * u_xlat7.x;
					    u_xlat15 = u_xlat1.w * _GlossMapScale + (-u_xlat15);
					    u_xlat15 = u_xlat15 + 1.0;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat7.xyz = vec3(u_xlat17) * u_xlat3.xzw;
					    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(u_xlat15);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat7.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_7[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_3;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[4];
						vec4 unity_IndirectSpecColor;
						vec4 unused_2_2[22];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat7;
					vec3 u_xlat9;
					float u_xlat15;
					float u_xlat16;
					bool u_xlatb16;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat15 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat16 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2.xyz = vec3(u_xlat16) * vs_TEXCOORD4.xyz;
					    u_xlatb16 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb16){
					        u_xlatb16 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat9.x = vs_TEXCOORD2.w;
					        u_xlat9.y = vs_TEXCOORD3.w;
					        u_xlat9.z = vs_TEXCOORD4.w;
					        u_xlat3.xyz = (bool(u_xlatb16)) ? u_xlat3.xyz : u_xlat9.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat16 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat17 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat16, u_xlat17);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat16 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					    u_xlat3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat3.xzw = vec3(u_xlat16) * _LightColor0.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_IndirectSpecColor.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat2.xyz, (-vs_TEXCOORD1.xyz));
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat7.x = u_xlat2.x * u_xlat2.x;
					    u_xlat7.x = u_xlat2.x * u_xlat7.x;
					    u_xlat2.x = u_xlat2.x * u_xlat7.x;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 + _Glossiness;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat7.xyz = vec3(u_xlat16) * u_xlat3.xzw;
					    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(u_xlat15);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat7.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "LIGHTPROBE_SH" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[4];
						float _GlossMapScale;
						vec4 unused_0_6[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_3;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[4];
						vec4 unity_IndirectSpecColor;
						vec4 unused_2_2[22];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat8;
					float u_xlat9;
					vec3 u_xlat10;
					float u_xlat14;
					float u_xlat18;
					float u_xlat20;
					bool u_xlatb20;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat14 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat14 = min(u_xlat14, 1.0);
					    u_xlat14 = (-u_xlat14) + 1.0;
					    u_xlat14 = sqrt(u_xlat14);
					    u_xlat3.xyz = u_xlat2.yyy * vs_TEXCOORD3.xyz;
					    u_xlat2.xyw = vs_TEXCOORD2.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat14) + u_xlat2.xyw;
					    u_xlatb20 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb20){
					        u_xlatb20 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat10.x = vs_TEXCOORD2.w;
					        u_xlat10.y = vs_TEXCOORD3.w;
					        u_xlat10.z = vs_TEXCOORD4.w;
					        u_xlat3.xyz = (bool(u_xlatb20)) ? u_xlat3.xyz : u_xlat10.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat20 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat9 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat20, u_xlat9);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat20 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat3.xzw = vec3(u_xlat20) * _LightColor0.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * vs_TEXCOORD5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * unity_IndirectSpecColor.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat2.xyz, (-vs_TEXCOORD1.xyz));
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat8.x = u_xlat2.x * u_xlat2.x;
					    u_xlat8.x = u_xlat2.x * u_xlat8.x;
					    u_xlat2.x = u_xlat2.x * u_xlat8.x;
					    u_xlat18 = u_xlat1.w * _GlossMapScale + (-u_xlat18);
					    u_xlat18 = u_xlat18 + 1.0;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat8.xyz = vec3(u_xlat20) * u_xlat3.xzw;
					    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(u_xlat18);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat8.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "LIGHTPROBE_SH" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						float _Glossiness;
						vec4 unused_0_7[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_3;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[4];
						vec4 unity_IndirectSpecColor;
						vec4 unused_2_2[22];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat8;
					vec3 u_xlat10;
					float u_xlat18;
					float u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlatb19 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb19){
					        u_xlatb19 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat10.x = vs_TEXCOORD2.w;
					        u_xlat10.y = vs_TEXCOORD3.w;
					        u_xlat10.z = vs_TEXCOORD4.w;
					        u_xlat3.xyz = (bool(u_xlatb19)) ? u_xlat3.xyz : u_xlat10.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat19 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat20 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat19, u_xlat20);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat19 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat3.xzw = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * vs_TEXCOORD5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * unity_IndirectSpecColor.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat2.xyz, (-vs_TEXCOORD1.xyz));
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat8.x = u_xlat2.x * u_xlat2.x;
					    u_xlat8.x = u_xlat2.x * u_xlat8.x;
					    u_xlat2.x = u_xlat2.x * u_xlat8.x;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 + _Glossiness;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat8.xyz = vec3(u_xlat19) * u_xlat3.xzw;
					    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(u_xlat18);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat8.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "SHADOWS_SCREEN" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _BumpScale;
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_8[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[4];
						vec4 unity_IndirectSpecColor;
						vec4 unused_4_2[8];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					bool u_xlatb4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat9;
					vec3 u_xlat11;
					float u_xlat16;
					float u_xlat21;
					float u_xlat23;
					float u_xlat24;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat21 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat2.xy = u_xlat2.xy * vec2(_BumpScale);
					    u_xlat16 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat16 = min(u_xlat16, 1.0);
					    u_xlat16 = (-u_xlat16) + 1.0;
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat3.xyz = u_xlat2.yyy * vs_TEXCOORD3.xyz;
					    u_xlat2.xyw = vs_TEXCOORD2.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat16) + u_xlat2.xyw;
					    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat2.xyz = vec3(u_xlat23) * u_xlat2.xyz;
					    u_xlat23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat3.xyz = vec3(u_xlat23) * vs_TEXCOORD1.xyz;
					    u_xlat11.x = vs_TEXCOORD2.w;
					    u_xlat11.y = vs_TEXCOORD3.w;
					    u_xlat11.z = vs_TEXCOORD4.w;
					    u_xlat5.xyz = (-u_xlat11.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6.x = unity_MatrixV[0].z;
					    u_xlat6.y = unity_MatrixV[1].z;
					    u_xlat6.z = unity_MatrixV[2].z;
					    u_xlat24 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat5.xyz = u_xlat11.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat4.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat4.x = (-u_xlat24) + u_xlat4.x;
					    u_xlat24 = unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat24;
					    u_xlat24 = u_xlat24 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlatb4 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb4){
					        u_xlatb4 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb4)) ? u_xlat5.xyz : u_xlat11.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat11.x = u_xlat4.y * 0.25 + 0.75;
					        u_xlat5.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat11.x, u_xlat5.x);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat4.x = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat11.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat5 = texture(_ShadowMapTexture, u_xlat11.xy);
					    u_xlat4.x = u_xlat4.x + (-u_xlat5.x);
					    u_xlat24 = u_xlat24 * u_xlat4.x + u_xlat5.x;
					    u_xlat4 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat4.x = (-_OcclusionStrength) + 1.0;
					    u_xlat4.x = u_xlat4.y * _OcclusionStrength + u_xlat4.x;
					    u_xlat11.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * unity_IndirectSpecColor.xyz;
					    u_xlat24 = (-u_xlat1.w) * _GlossMapScale + 1.0;
					    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat23) + _WorldSpaceLightPos0.xyz;
					    u_xlat23 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat23 = max(u_xlat23, 0.00100000005);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat6.xyz = vec3(u_xlat23) * u_xlat6.xyz;
					    u_xlat23 = dot(u_xlat2.xyz, (-u_xlat3.xyz));
					    u_xlat2.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat9 = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat9 = dot(vec2(u_xlat9), vec2(u_xlat24));
					    u_xlat9 = u_xlat9 + -0.5;
					    u_xlat16 = (-u_xlat2.x) + 1.0;
					    u_xlat3.x = u_xlat16 * u_xlat16;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat16 = u_xlat16 * u_xlat3.x;
					    u_xlat16 = u_xlat9 * u_xlat16 + 1.0;
					    u_xlat23 = -abs(u_xlat23) + 1.0;
					    u_xlat3.x = u_xlat23 * u_xlat23;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat23 = u_xlat23 * u_xlat3.x;
					    u_xlat9 = u_xlat9 * u_xlat23 + 1.0;
					    u_xlat9 = u_xlat9 * u_xlat16;
					    u_xlat2.x = u_xlat2.x * u_xlat9;
					    u_xlat9 = u_xlat24 * u_xlat24;
					    u_xlat9 = max(u_xlat9, 0.00200000009);
					    u_xlat9 = u_xlat9 * 0.280000001;
					    u_xlat9 = (-u_xlat9) * u_xlat24 + 1.0;
					    u_xlat21 = u_xlat1.w * _GlossMapScale + (-u_xlat21);
					    u_xlat21 = u_xlat21 + 1.0;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat11.xyz;
					    u_xlat2.xyz = u_xlat5.xyz * vec3(u_xlat9);
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat23) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "SHADOWS_SCREEN" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_8[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[4];
						vec4 unity_IndirectSpecColor;
						vec4 unused_4_2[8];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat9;
					vec3 u_xlat11;
					float u_xlat16;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					float u_xlat24;
					bool u_xlatb24;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat21 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat22 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * vs_TEXCOORD4.xyz;
					    u_xlat22 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat3.xyz = vec3(u_xlat22) * vs_TEXCOORD1.xyz;
					    u_xlat11.x = vs_TEXCOORD2.w;
					    u_xlat11.y = vs_TEXCOORD3.w;
					    u_xlat11.z = vs_TEXCOORD4.w;
					    u_xlat5.xyz = (-u_xlat11.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6.x = unity_MatrixV[0].z;
					    u_xlat6.y = unity_MatrixV[1].z;
					    u_xlat6.z = unity_MatrixV[2].z;
					    u_xlat23 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat5.xyz = u_xlat11.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = (-u_xlat23) + u_xlat24;
					    u_xlat23 = unity_ShadowFadeCenterAndType.w * u_xlat24 + u_xlat23;
					    u_xlat23 = u_xlat23 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlatb24 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb24){
					        u_xlatb24 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb24)) ? u_xlat5.xyz : u_xlat11.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat24 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat11.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat24, u_xlat11.x);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat24 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat4 = texture(_ShadowMapTexture, u_xlat4.xy);
					    u_xlat24 = u_xlat24 + (-u_xlat4.x);
					    u_xlat23 = u_xlat23 * u_xlat24 + u_xlat4.x;
					    u_xlat4 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat24 = (-_OcclusionStrength) + 1.0;
					    u_xlat24 = u_xlat4.y * _OcclusionStrength + u_xlat24;
					    u_xlat4.xyz = vec3(u_xlat23) * _LightColor0.xyz;
					    u_xlat5.xyz = vec3(u_xlat24) * unity_IndirectSpecColor.xyz;
					    u_xlat23 = (-_Glossiness) + 1.0;
					    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat22 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat22 = max(u_xlat22, 0.00100000005);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat6.xyz = vec3(u_xlat22) * u_xlat6.xyz;
					    u_xlat22 = dot(u_xlat2.xyz, (-u_xlat3.xyz));
					    u_xlat2.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat9 = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat9 = dot(vec2(u_xlat9), vec2(u_xlat23));
					    u_xlat9 = u_xlat9 + -0.5;
					    u_xlat16 = (-u_xlat2.x) + 1.0;
					    u_xlat3.x = u_xlat16 * u_xlat16;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat16 = u_xlat16 * u_xlat3.x;
					    u_xlat16 = u_xlat9 * u_xlat16 + 1.0;
					    u_xlat22 = -abs(u_xlat22) + 1.0;
					    u_xlat3.x = u_xlat22 * u_xlat22;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat22 = u_xlat22 * u_xlat3.x;
					    u_xlat9 = u_xlat9 * u_xlat22 + 1.0;
					    u_xlat9 = u_xlat9 * u_xlat16;
					    u_xlat2.x = u_xlat2.x * u_xlat9;
					    u_xlat9 = u_xlat23 * u_xlat23;
					    u_xlat9 = max(u_xlat9, 0.00200000009);
					    u_xlat9 = u_xlat9 * 0.280000001;
					    u_xlat9 = (-u_xlat9) * u_xlat23 + 1.0;
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat21 = u_xlat21 + _Glossiness;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat2.xzw = u_xlat2.xxx * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat9);
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat22) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xzw + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _BumpScale;
						float _GlossMapScale;
						float _OcclusionStrength;
						vec4 unused_0_8[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[4];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_7;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[4];
						vec4 unity_IndirectSpecColor;
						vec4 unused_4_2[8];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					bool u_xlatb4;
					vec4 u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					float u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat14;
					bool u_xlatb14;
					float u_xlat20;
					vec2 u_xlat23;
					float u_xlat27;
					float u_xlat29;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat27 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat2.xy = u_xlat2.xy * vec2(_BumpScale);
					    u_xlat20 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat20 = min(u_xlat20, 1.0);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat20 = sqrt(u_xlat20);
					    u_xlat3.xyz = u_xlat2.yyy * vs_TEXCOORD3.xyz;
					    u_xlat2.xyw = vs_TEXCOORD2.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat20) + u_xlat2.xyw;
					    u_xlat29 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat29 = inversesqrt(u_xlat29);
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat12.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat13.x = vs_TEXCOORD2.w;
					    u_xlat13.y = vs_TEXCOORD3.w;
					    u_xlat13.z = vs_TEXCOORD4.w;
					    u_xlat5.xyz = (-u_xlat13.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6.x = unity_MatrixV[0].z;
					    u_xlat6.y = unity_MatrixV[1].z;
					    u_xlat6.z = unity_MatrixV[2].z;
					    u_xlat4.x = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat5.xyz = u_xlat13.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat5.x = (-u_xlat4.x) + u_xlat5.x;
					    u_xlat4.x = unity_ShadowFadeCenterAndType.w * u_xlat5.x + u_xlat4.x;
					    u_xlat4.x = u_xlat4.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlatb5 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb5){
					        u_xlatb14 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat14.xyz = (bool(u_xlatb14)) ? u_xlat6.xyz : u_xlat13.xyz;
					        u_xlat14.xyz = u_xlat14.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat14.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat14.x = u_xlat6.y * 0.25 + 0.75;
					        u_xlat23.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat6.x = max(u_xlat23.x, u_xlat14.x);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					    } else {
					        u_xlat6.x = float(1.0);
					        u_xlat6.y = float(1.0);
					        u_xlat6.z = float(1.0);
					        u_xlat6.w = float(1.0);
					    }
					    u_xlat14.x = dot(u_xlat6, unity_OcclusionMaskSelector);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat23.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat6 = texture(_ShadowMapTexture, u_xlat23.xy);
					    u_xlat14.x = u_xlat14.x + (-u_xlat6.x);
					    u_xlat4.x = u_xlat4.x * u_xlat14.x + u_xlat6.x;
					    u_xlat6 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat14.x = (-_OcclusionStrength) + 1.0;
					    u_xlat14.x = u_xlat6.y * _OcclusionStrength + u_xlat14.x;
					    u_xlat6.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    if(u_xlatb5){
					        u_xlatb4 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xzw = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xzw = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat5.xzw;
					        u_xlat5.xzw = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat5.xzw;
					        u_xlat5.xzw = u_xlat5.xzw + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb4)) ? u_xlat5.xzw : u_xlat13.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat13.x = u_xlat4.y * 0.25;
					        u_xlat5.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat23.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat13.x = max(u_xlat13.x, u_xlat5.x);
					        u_xlat4.x = min(u_xlat23.x, u_xlat13.x);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					        u_xlat5.xzw = u_xlat4.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat8 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					        u_xlat4.xyz = u_xlat4.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat2.w = 1.0;
					        u_xlat7.x = dot(u_xlat7, u_xlat2);
					        u_xlat7.y = dot(u_xlat8, u_xlat2);
					        u_xlat7.z = dot(u_xlat4, u_xlat2);
					    } else {
					        u_xlat2.w = 1.0;
					        u_xlat7.x = dot(unity_SHAr, u_xlat2);
					        u_xlat7.y = dot(unity_SHAg, u_xlat2);
					        u_xlat7.z = dot(unity_SHAb, u_xlat2);
					    }
					    u_xlat4.xyz = u_xlat7.xyz + vs_TEXCOORD5.xyz;
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat5.xzw = u_xlat14.xxx * unity_IndirectSpecColor.xyz;
					    u_xlat29 = (-u_xlat1.w) * _GlossMapScale + 1.0;
					    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat3.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat3.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat3.x = max(u_xlat3.x, 0.00100000005);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat3.x = dot(u_xlat2.xyz, (-u_xlat12.xyz));
					    u_xlat2.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat11 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat11 = dot(vec2(u_xlat11), vec2(u_xlat29));
					    u_xlat11 = u_xlat11 + -0.5;
					    u_xlat20 = (-u_xlat2.x) + 1.0;
					    u_xlat12.x = u_xlat20 * u_xlat20;
					    u_xlat12.x = u_xlat12.x * u_xlat12.x;
					    u_xlat20 = u_xlat20 * u_xlat12.x;
					    u_xlat20 = u_xlat11 * u_xlat20 + 1.0;
					    u_xlat3.x = -abs(u_xlat3.x) + 1.0;
					    u_xlat12.x = u_xlat3.x * u_xlat3.x;
					    u_xlat12.x = u_xlat12.x * u_xlat12.x;
					    u_xlat3.x = u_xlat3.x * u_xlat12.x;
					    u_xlat11 = u_xlat11 * u_xlat3.x + 1.0;
					    u_xlat11 = u_xlat11 * u_xlat20;
					    u_xlat2.x = u_xlat2.x * u_xlat11;
					    u_xlat11 = u_xlat29 * u_xlat29;
					    u_xlat11 = max(u_xlat11, 0.00200000009);
					    u_xlat11 = u_xlat11 * 0.280000001;
					    u_xlat11 = (-u_xlat11) * u_xlat29 + 1.0;
					    u_xlat27 = u_xlat1.w * _GlossMapScale + (-u_xlat27);
					    u_xlat27 = u_xlat27 + 1.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.xzw = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat2.xzw = u_xlat4.xyz * u_xlat14.xxx + u_xlat2.xzw;
					    u_xlat12.xyz = u_xlat5.xzw * vec3(u_xlat11);
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(u_xlat27);
					    u_xlat0.xyz = u_xlat3.xxx * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat12.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xzw + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						float _Glossiness;
						float _OcclusionStrength;
						vec4 unused_0_8[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[4];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_7;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[4];
						vec4 unity_IndirectSpecColor;
						vec4 unused_4_2[8];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					bool u_xlatb4;
					vec4 u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat10;
					vec3 u_xlat12;
					vec3 u_xlat13;
					float u_xlat18;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					bool u_xlatb27;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat24 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat25 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * vs_TEXCOORD4.xyz;
					    u_xlat25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat3.xyz = vec3(u_xlat25) * vs_TEXCOORD1.xyz;
					    u_xlat12.x = vs_TEXCOORD2.w;
					    u_xlat12.y = vs_TEXCOORD3.w;
					    u_xlat12.z = vs_TEXCOORD4.w;
					    u_xlat5.xyz = (-u_xlat12.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6.x = unity_MatrixV[0].z;
					    u_xlat6.y = unity_MatrixV[1].z;
					    u_xlat6.z = unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat5.xyz = u_xlat12.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat4.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat4.x = (-u_xlat27) + u_xlat4.x;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlatb4 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb4){
					        u_xlatb5 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat13.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat13.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat13.xyz;
					        u_xlat13.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat13.xyz;
					        u_xlat13.xyz = u_xlat13.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat5.xyz = (bool(u_xlatb5)) ? u_xlat13.xyz : u_xlat12.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat5.yzw = u_xlat5.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat13.x = u_xlat5.y * 0.25 + 0.75;
					        u_xlat6.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat5.x = max(u_xlat13.x, u_xlat6.x);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					    } else {
					        u_xlat5.x = float(1.0);
					        u_xlat5.y = float(1.0);
					        u_xlat5.z = float(1.0);
					        u_xlat5.w = float(1.0);
					    }
					    u_xlat5.x = dot(u_xlat5, unity_OcclusionMaskSelector);
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					    u_xlat13.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat6 = texture(_ShadowMapTexture, u_xlat13.xy);
					    u_xlat5.x = u_xlat5.x + (-u_xlat6.x);
					    u_xlat27 = u_xlat27 * u_xlat5.x + u_xlat6.x;
					    u_xlat5 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat5.x = (-_OcclusionStrength) + 1.0;
					    u_xlat5.x = u_xlat5.y * _OcclusionStrength + u_xlat5.x;
					    u_xlat13.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    if(u_xlatb4){
					        u_xlatb27 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb27)) ? u_xlat6.xyz : u_xlat12.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat27 = u_xlat4.y * 0.25;
					        u_xlat12.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat6.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat27 = max(u_xlat27, u_xlat12.x);
					        u_xlat4.x = min(u_xlat6.x, u_xlat27);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					        u_xlat7.xyz = u_xlat4.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat7.xyz);
					        u_xlat4.xyz = u_xlat4.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat2.w = 1.0;
					        u_xlat6.x = dot(u_xlat6, u_xlat2);
					        u_xlat6.y = dot(u_xlat7, u_xlat2);
					        u_xlat6.z = dot(u_xlat4, u_xlat2);
					    } else {
					        u_xlat2.w = 1.0;
					        u_xlat6.x = dot(unity_SHAr, u_xlat2);
					        u_xlat6.y = dot(unity_SHAg, u_xlat2);
					        u_xlat6.z = dot(unity_SHAb, u_xlat2);
					    }
					    u_xlat4.xyz = u_xlat6.xyz + vs_TEXCOORD5.xyz;
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat6.xyz = u_xlat5.xxx * unity_IndirectSpecColor.xyz;
					    u_xlat26 = (-_Glossiness) + 1.0;
					    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;
					    u_xlat25 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat25 = max(u_xlat25, 0.00100000005);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat7.xyz = vec3(u_xlat25) * u_xlat7.xyz;
					    u_xlat25 = dot(u_xlat2.xyz, (-u_xlat3.xyz));
					    u_xlat2.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat10 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);
					    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
					    u_xlat10 = u_xlat10 * u_xlat10;
					    u_xlat10 = dot(vec2(u_xlat10), vec2(u_xlat26));
					    u_xlat10 = u_xlat10 + -0.5;
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat3.x = u_xlat18 * u_xlat18;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat18 = u_xlat18 * u_xlat3.x;
					    u_xlat18 = u_xlat10 * u_xlat18 + 1.0;
					    u_xlat25 = -abs(u_xlat25) + 1.0;
					    u_xlat3.x = u_xlat25 * u_xlat25;
					    u_xlat3.x = u_xlat3.x * u_xlat3.x;
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat10 = u_xlat10 * u_xlat25 + 1.0;
					    u_xlat10 = u_xlat10 * u_xlat18;
					    u_xlat2.x = u_xlat2.x * u_xlat10;
					    u_xlat10 = u_xlat26 * u_xlat26;
					    u_xlat10 = max(u_xlat10, 0.00200000009);
					    u_xlat10 = u_xlat10 * 0.280000001;
					    u_xlat10 = (-u_xlat10) * u_xlat26 + 1.0;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 + _Glossiness;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat2.xzw = u_xlat2.xxx * u_xlat13.xyz;
					    u_xlat2.xzw = u_xlat4.xyz * u_xlat5.xxx + u_xlat2.xzw;
					    u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat10);
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xzw + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[4];
						float _GlossMapScale;
						vec4 unused_0_6[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[45];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_3;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[4];
						vec4 unity_IndirectSpecColor;
						vec4 unused_2_2[22];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _OcclusionMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat7;
					float u_xlat8;
					vec3 u_xlat9;
					float u_xlat12;
					float u_xlat15;
					float u_xlat17;
					bool u_xlatb17;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = _Color.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat15 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat3.xyz = u_xlat2.yyy * vs_TEXCOORD3.xyz;
					    u_xlat2.xyw = vs_TEXCOORD2.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat12) + u_xlat2.xyw;
					    u_xlatb17 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb17){
					        u_xlatb17 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat9.x = vs_TEXCOORD2.w;
					        u_xlat9.y = vs_TEXCOORD3.w;
					        u_xlat9.z = vs_TEXCOORD4.w;
					        u_xlat3.xyz = (bool(u_xlatb17)) ? u_xlat3.xyz : u_xlat9.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat17 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat8 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat17, u_xlat8);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat17 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					    u_xlat3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
					    u_xlat3.xzw = vec3(u_xlat17) * _LightColor0.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_IndirectSpecColor.xyz;
					    u_xlat17 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat2.xyz, (-vs_TEXCOORD1.xyz));
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat7.x = u_xlat2.x * u_xlat2.x;
					    u_xlat7.x = u_xlat2.x * u_xlat7.x;
					    u_xlat2.x = u_xlat2.x * u_xlat7.x;
					    u_xlat15 = u_xlat1.w * _GlossMapScale + (-u_xlat15);
					    u_xlat15 = u_xlat15 + 1.0;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat7.xyz = vec3(u_xlat17) * u_xlat3.xzw;
					    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(u_xlat15);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat7.xyz + u_xlat0.xyz;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "FORWARD_DELTA"
			LOD 150
			Tags { "LIGHTMODE" = "FORWARDADD" "PerformanceChecks" = "False" "RenderType" = "Opaque" }
			Blend Zero One, Zero One
			ZWrite Off
			GpuProgramID 430453
			Program "vp" {
				SubProgram "d3d11 " {
					Keywords { "POINT" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3.x = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1 = unity_ObjectToWorld[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD4.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = unity_WorldToLight[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat1.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3.x = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.yzx * u_xlat2.zxy;
					    u_xlat0.xyz = u_xlat2.yzx * u_xlat0.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlatb1 = _UVSec==0.0;
					    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    u_xlat1.w = 0.0;
					    vs_TEXCOORD2 = u_xlat1.wwwx;
					    vs_TEXCOORD3 = u_xlat1.wwwy;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD4.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat6;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat6 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat6);
					    u_xlat3.x = cos(u_xlat6);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1 = unity_ObjectToWorld[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    vs_TEXCOORD1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = u_xlat1.yyyy * unity_WorldToLight[1];
					    u_xlat0 = unity_WorldToLight[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_WorldToLight[2] * u_xlat1.zzzz + u_xlat0;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3.x = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1 = unity_ObjectToWorld[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD4.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_WorldToLight[1];
					    u_xlat0 = unity_WorldToLight[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_WorldToLight[2] * u_xlat1.zzzz + u_xlat0;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat6;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat6 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat6);
					    u_xlat3.x = cos(u_xlat6);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1 = unity_ObjectToWorld[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    vs_TEXCOORD1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.xyz = u_xlat1.yyy * unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = unity_WorldToLight[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat1.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3.x = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1 = unity_ObjectToWorld[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD4.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = unity_WorldToLight[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat1.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec2 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat6;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat6 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat6);
					    u_xlat3.x = cos(u_xlat6);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1 = unity_ObjectToWorld[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    vs_TEXCOORD1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat2.x;
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat0.yzx * u_xlat3.zxy;
					    u_xlat0.xyz = u_xlat3.yzx * u_xlat0.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD3.w = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat2.z;
					    u_xlat0.xy = u_xlat1.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec2 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					float u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3.x = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1 = unity_ObjectToWorld[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    u_xlat2.w = 0.0;
					    vs_TEXCOORD2 = u_xlat2.wwwx;
					    vs_TEXCOORD3 = u_xlat2.wwwy;
					    vs_TEXCOORD4.w = u_xlat2.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD4.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat6;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat6 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat6);
					    u_xlat3.x = cos(u_xlat6);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1 = unity_ObjectToWorld[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    u_xlatb2 = _UVSec==0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    vs_TEXCOORD1.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    vs_TEXCOORD4.xyz = u_xlat3.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.xyz = u_xlat1.yyy * unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = unity_WorldToLight[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat1.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "POINT" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					float u_xlat13;
					float u_xlat24;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat2;
					    u_xlat3 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat3 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat3;
					    u_xlat3 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat3;
					    u_xlat3 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat3;
					    u_xlat4 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat4;
					    u_xlat4.xyz = u_xlat4.xyz + (-_WorldCenter.xyz);
					    u_xlat5.x = dot(u_xlat4.xz, u_xlat4.xz);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat13 = u_xlat5.x / _WorldRadius;
					    u_xlat6.x = sin(u_xlat13);
					    u_xlat7 = cos(u_xlat13);
					    u_xlat5.x = u_xlat6.x / u_xlat5.x;
					    u_xlat6.y = u_xlat7;
					    u_xlat6.xz = u_xlat4.xz * u_xlat5.xx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat4.yyy + _WorldCenter.xyz;
					    u_xlat5 = u_xlat4.yyyy * unity_WorldToObject[1];
					    u_xlat5 = unity_WorldToObject[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = unity_WorldToObject[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat4 = unity_WorldToObject[3] * u_xlat4.wwww + u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * unity_ObjectToWorld[1];
					    u_xlat5 = unity_ObjectToWorld[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = unity_ObjectToWorld[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat6 = u_xlat5 + unity_ObjectToWorld[3];
					    u_xlat5 = unity_ObjectToWorld[3] * u_xlat4.wwww + u_xlat5;
					    u_xlat3 = u_xlat3 * u_xlat6.yyyy;
					    u_xlat2 = u_xlat2 * u_xlat6.xxxx + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat6.zzzz + u_xlat2;
					    gl_Position = u_xlat0 * u_xlat6.wwww + u_xlat1;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat4.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat4.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat4.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat4.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    vs_TEXCOORD1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    vs_TEXCOORD4.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = unity_WorldToLight[0].xyz * u_xlat5.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat5.zzz + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat5.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    gl_Position = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.yzx * u_xlat2.zxy;
					    u_xlat0.xyz = u_xlat2.yzx * u_xlat0.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat11;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat2;
					    u_xlat3 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat3 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat3;
					    u_xlat3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat3;
					    u_xlat3.xyz = u_xlat3.xyz + (-_WorldCenter.xyz);
					    u_xlat4.x = dot(u_xlat3.xz, u_xlat3.xz);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat11 = u_xlat4.x / _WorldRadius;
					    u_xlat5.x = sin(u_xlat11);
					    u_xlat6 = cos(u_xlat11);
					    u_xlat4.x = u_xlat5.x / u_xlat4.x;
					    u_xlat5.y = u_xlat6;
					    u_xlat5.xz = u_xlat3.xz * u_xlat4.xx;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat3.yyy + _WorldCenter.xyz;
					    u_xlat4 = u_xlat3.yyyy * unity_WorldToObject[1];
					    u_xlat4 = unity_WorldToObject[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToObject[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat3 = unity_WorldToObject[3] * u_xlat3.wwww + u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * u_xlat3.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * u_xlat3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat2 * u_xlat4.yyyy;
					    u_xlat1 = u_xlat1 * u_xlat4.xxxx + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4.zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat1;
					    gl_Position = u_xlat1 * u_xlat4.wwww + u_xlat0;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat3.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    u_xlat1.w = 0.0;
					    vs_TEXCOORD2 = u_xlat1.wwwx;
					    vs_TEXCOORD3 = u_xlat1.wwwy;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    vs_TEXCOORD4.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "SPOT" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					float u_xlat13;
					float u_xlat24;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat2;
					    u_xlat3 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat3 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat3;
					    u_xlat3 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat3;
					    u_xlat3 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat3;
					    u_xlat4 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat4;
					    u_xlat4.xyz = u_xlat4.xyz + (-_WorldCenter.xyz);
					    u_xlat5.x = dot(u_xlat4.xz, u_xlat4.xz);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat13 = u_xlat5.x / _WorldRadius;
					    u_xlat6.x = sin(u_xlat13);
					    u_xlat7 = cos(u_xlat13);
					    u_xlat5.x = u_xlat6.x / u_xlat5.x;
					    u_xlat6.y = u_xlat7;
					    u_xlat6.xz = u_xlat4.xz * u_xlat5.xx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat4.yyy + _WorldCenter.xyz;
					    u_xlat5 = u_xlat4.yyyy * unity_WorldToObject[1];
					    u_xlat5 = unity_WorldToObject[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = unity_WorldToObject[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat4 = unity_WorldToObject[3] * u_xlat4.wwww + u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * unity_ObjectToWorld[1];
					    u_xlat5 = unity_ObjectToWorld[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = unity_ObjectToWorld[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat6 = u_xlat5 + unity_ObjectToWorld[3];
					    u_xlat5 = unity_ObjectToWorld[3] * u_xlat4.wwww + u_xlat5;
					    u_xlat3 = u_xlat3 * u_xlat6.yyyy;
					    u_xlat2 = u_xlat2 * u_xlat6.xxxx + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat6.zzzz + u_xlat2;
					    gl_Position = u_xlat0 * u_xlat6.wwww + u_xlat1;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat4.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat4.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat4.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat4.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    vs_TEXCOORD1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0 = u_xlat5.yyyy * unity_WorldToLight[1];
					    u_xlat0 = unity_WorldToLight[0] * u_xlat5.xxxx + u_xlat0;
					    u_xlat0 = unity_WorldToLight[2] * u_xlat5.zzzz + u_xlat0;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat5.wwww + u_xlat0;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "SPOT" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					float u_xlat13;
					float u_xlat24;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat2;
					    u_xlat3 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat3 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat3;
					    u_xlat3 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat3;
					    u_xlat3 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat3;
					    u_xlat4 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat4;
					    u_xlat4.xyz = u_xlat4.xyz + (-_WorldCenter.xyz);
					    u_xlat5.x = dot(u_xlat4.xz, u_xlat4.xz);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat13 = u_xlat5.x / _WorldRadius;
					    u_xlat6.x = sin(u_xlat13);
					    u_xlat7 = cos(u_xlat13);
					    u_xlat5.x = u_xlat6.x / u_xlat5.x;
					    u_xlat6.y = u_xlat7;
					    u_xlat6.xz = u_xlat4.xz * u_xlat5.xx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat4.yyy + _WorldCenter.xyz;
					    u_xlat5 = u_xlat4.yyyy * unity_WorldToObject[1];
					    u_xlat5 = unity_WorldToObject[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = unity_WorldToObject[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat4 = unity_WorldToObject[3] * u_xlat4.wwww + u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * unity_ObjectToWorld[1];
					    u_xlat5 = unity_ObjectToWorld[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = unity_ObjectToWorld[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat6 = u_xlat5 + unity_ObjectToWorld[3];
					    u_xlat5 = unity_ObjectToWorld[3] * u_xlat4.wwww + u_xlat5;
					    u_xlat3 = u_xlat3 * u_xlat6.yyyy;
					    u_xlat2 = u_xlat2 * u_xlat6.xxxx + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat6.zzzz + u_xlat2;
					    gl_Position = u_xlat0 * u_xlat6.wwww + u_xlat1;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat4.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat4.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat4.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat4.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    vs_TEXCOORD1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    vs_TEXCOORD4.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat0 = u_xlat5.yyyy * unity_WorldToLight[1];
					    u_xlat0 = unity_WorldToLight[0] * u_xlat5.xxxx + u_xlat0;
					    u_xlat0 = unity_WorldToLight[2] * u_xlat5.zzzz + u_xlat0;
					    vs_TEXCOORD6 = unity_WorldToLight[3] * u_xlat5.wwww + u_xlat0;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "POINT_COOKIE" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					float u_xlat13;
					float u_xlat24;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat2;
					    u_xlat3 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat3 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat3;
					    u_xlat3 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat3;
					    u_xlat3 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat3;
					    u_xlat4 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat4;
					    u_xlat4.xyz = u_xlat4.xyz + (-_WorldCenter.xyz);
					    u_xlat5.x = dot(u_xlat4.xz, u_xlat4.xz);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat13 = u_xlat5.x / _WorldRadius;
					    u_xlat6.x = sin(u_xlat13);
					    u_xlat7 = cos(u_xlat13);
					    u_xlat5.x = u_xlat6.x / u_xlat5.x;
					    u_xlat6.y = u_xlat7;
					    u_xlat6.xz = u_xlat4.xz * u_xlat5.xx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat4.yyy + _WorldCenter.xyz;
					    u_xlat5 = u_xlat4.yyyy * unity_WorldToObject[1];
					    u_xlat5 = unity_WorldToObject[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = unity_WorldToObject[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat4 = unity_WorldToObject[3] * u_xlat4.wwww + u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * unity_ObjectToWorld[1];
					    u_xlat5 = unity_ObjectToWorld[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = unity_ObjectToWorld[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat6 = u_xlat5 + unity_ObjectToWorld[3];
					    u_xlat5 = unity_ObjectToWorld[3] * u_xlat4.wwww + u_xlat5;
					    u_xlat3 = u_xlat3 * u_xlat6.yyyy;
					    u_xlat2 = u_xlat2 * u_xlat6.xxxx + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat6.zzzz + u_xlat2;
					    gl_Position = u_xlat0 * u_xlat6.wwww + u_xlat1;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat4.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat4.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat4.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat4.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    vs_TEXCOORD1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.xyz = u_xlat5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = unity_WorldToLight[0].xyz * u_xlat5.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat5.zzz + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat5.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "POINT_COOKIE" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					float u_xlat13;
					float u_xlat24;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat2;
					    u_xlat3 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat3 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat3;
					    u_xlat3 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat3;
					    u_xlat3 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat3;
					    u_xlat4 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat4;
					    u_xlat4.xyz = u_xlat4.xyz + (-_WorldCenter.xyz);
					    u_xlat5.x = dot(u_xlat4.xz, u_xlat4.xz);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat13 = u_xlat5.x / _WorldRadius;
					    u_xlat6.x = sin(u_xlat13);
					    u_xlat7 = cos(u_xlat13);
					    u_xlat5.x = u_xlat6.x / u_xlat5.x;
					    u_xlat6.y = u_xlat7;
					    u_xlat6.xz = u_xlat4.xz * u_xlat5.xx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat4.yyy + _WorldCenter.xyz;
					    u_xlat5 = u_xlat4.yyyy * unity_WorldToObject[1];
					    u_xlat5 = unity_WorldToObject[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = unity_WorldToObject[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat4 = unity_WorldToObject[3] * u_xlat4.wwww + u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * unity_ObjectToWorld[1];
					    u_xlat5 = unity_ObjectToWorld[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = unity_ObjectToWorld[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat6 = u_xlat5 + unity_ObjectToWorld[3];
					    u_xlat5 = unity_ObjectToWorld[3] * u_xlat4.wwww + u_xlat5;
					    u_xlat3 = u_xlat3 * u_xlat6.yyyy;
					    u_xlat2 = u_xlat2 * u_xlat6.xxxx + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat6.zzzz + u_xlat2;
					    gl_Position = u_xlat0 * u_xlat6.wwww + u_xlat1;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat4.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat4.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat4.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat4.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    vs_TEXCOORD1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.w = 0.0;
					    vs_TEXCOORD2 = u_xlat0.wwwx;
					    vs_TEXCOORD3 = u_xlat0.wwwy;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    vs_TEXCOORD4.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = unity_WorldToLight[0].xyz * u_xlat5.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat5.zzz + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat5.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "FIRSTPERSONVIEW" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec2 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					float u_xlat13;
					float u_xlat24;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat2;
					    u_xlat3 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat3 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat3;
					    u_xlat3 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat3;
					    u_xlat3 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat3;
					    u_xlat4 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat4;
					    u_xlat4.xyz = u_xlat4.xyz + (-_WorldCenter.xyz);
					    u_xlat5.x = dot(u_xlat4.xz, u_xlat4.xz);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat13 = u_xlat5.x / _WorldRadius;
					    u_xlat6.x = sin(u_xlat13);
					    u_xlat7 = cos(u_xlat13);
					    u_xlat5.x = u_xlat6.x / u_xlat5.x;
					    u_xlat6.y = u_xlat7;
					    u_xlat6.xz = u_xlat4.xz * u_xlat5.xx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat4.yyy + _WorldCenter.xyz;
					    u_xlat5 = u_xlat4.yyyy * unity_WorldToObject[1];
					    u_xlat5 = unity_WorldToObject[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = unity_WorldToObject[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat4 = unity_WorldToObject[3] * u_xlat4.wwww + u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * unity_ObjectToWorld[1];
					    u_xlat5 = unity_ObjectToWorld[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = unity_ObjectToWorld[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat6 = u_xlat5 + unity_ObjectToWorld[3];
					    u_xlat5 = unity_ObjectToWorld[3] * u_xlat4.wwww + u_xlat5;
					    u_xlat3 = u_xlat3 * u_xlat6.yyyy;
					    u_xlat2 = u_xlat2 * u_xlat6.xxxx + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat6.zzzz + u_xlat2;
					    gl_Position = u_xlat0 * u_xlat6.wwww + u_xlat1;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat4.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat4.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat4.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat4.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    vs_TEXCOORD1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.yzx * u_xlat2.zxy;
					    u_xlat0.xyz = u_xlat2.yzx * u_xlat0.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat0.xy = u_xlat5.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat5.xx + u_xlat0.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat5.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = unity_WorldToLight[3].xy * u_xlat5.ww + u_xlat0.xy;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "FIRSTPERSONVIEW" "_ALPHABLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec2 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					float u_xlat13;
					float u_xlat24;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat2;
					    u_xlat3 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat3 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat3;
					    u_xlat3 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat3;
					    u_xlat3 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat3;
					    u_xlat4 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat4;
					    u_xlat4.xyz = u_xlat4.xyz + (-_WorldCenter.xyz);
					    u_xlat5.x = dot(u_xlat4.xz, u_xlat4.xz);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat13 = u_xlat5.x / _WorldRadius;
					    u_xlat6.x = sin(u_xlat13);
					    u_xlat7 = cos(u_xlat13);
					    u_xlat5.x = u_xlat6.x / u_xlat5.x;
					    u_xlat6.y = u_xlat7;
					    u_xlat6.xz = u_xlat4.xz * u_xlat5.xx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat4.yyy + _WorldCenter.xyz;
					    u_xlat5 = u_xlat4.yyyy * unity_WorldToObject[1];
					    u_xlat5 = unity_WorldToObject[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = unity_WorldToObject[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat4 = unity_WorldToObject[3] * u_xlat4.wwww + u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * unity_ObjectToWorld[1];
					    u_xlat5 = unity_ObjectToWorld[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = unity_ObjectToWorld[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat6 = u_xlat5 + unity_ObjectToWorld[3];
					    u_xlat5 = unity_ObjectToWorld[3] * u_xlat4.wwww + u_xlat5;
					    u_xlat3 = u_xlat3 * u_xlat6.yyyy;
					    u_xlat2 = u_xlat2 * u_xlat6.xxxx + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat6.zzzz + u_xlat2;
					    gl_Position = u_xlat0 * u_xlat6.wwww + u_xlat1;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat4.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat4.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat4.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat4.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    vs_TEXCOORD1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    u_xlat1.w = 0.0;
					    vs_TEXCOORD2 = u_xlat1.wwwx;
					    vs_TEXCOORD3 = u_xlat1.wwwy;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    vs_TEXCOORD4.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat0.xy = u_xlat5.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat5.xx + u_xlat0.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat5.zz + u_xlat0.xy;
					    vs_TEXCOORD6.xy = unity_WorldToLight[3].xy * u_xlat5.ww + u_xlat0.xy;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "POINT" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 _DetailAlbedoMap_ST;
						vec4 unused_0_3;
						float _UVSec;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_TANGENT0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					float u_xlat13;
					float u_xlat24;
					void main()
					{
					    u_xlat0 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat0 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat0;
					    u_xlat0 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat0;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat2;
					    u_xlat3 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat3 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat3;
					    u_xlat3 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat3;
					    u_xlat3 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat3;
					    u_xlat4 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat4 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat4;
					    u_xlat4 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat4;
					    u_xlat4.xyz = u_xlat4.xyz + (-_WorldCenter.xyz);
					    u_xlat5.x = dot(u_xlat4.xz, u_xlat4.xz);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat13 = u_xlat5.x / _WorldRadius;
					    u_xlat6.x = sin(u_xlat13);
					    u_xlat7 = cos(u_xlat13);
					    u_xlat5.x = u_xlat6.x / u_xlat5.x;
					    u_xlat6.y = u_xlat7;
					    u_xlat6.xz = u_xlat4.xz * u_xlat5.xx;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat4.yyy + _WorldCenter.xyz;
					    u_xlat5 = u_xlat4.yyyy * unity_WorldToObject[1];
					    u_xlat5 = unity_WorldToObject[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = unity_WorldToObject[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat4 = unity_WorldToObject[3] * u_xlat4.wwww + u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * unity_ObjectToWorld[1];
					    u_xlat5 = unity_ObjectToWorld[0] * u_xlat4.xxxx + u_xlat5;
					    u_xlat5 = unity_ObjectToWorld[2] * u_xlat4.zzzz + u_xlat5;
					    u_xlat6 = u_xlat5 + unity_ObjectToWorld[3];
					    u_xlat5 = unity_ObjectToWorld[3] * u_xlat4.wwww + u_xlat5;
					    u_xlat3 = u_xlat3 * u_xlat6.yyyy;
					    u_xlat2 = u_xlat2 * u_xlat6.xxxx + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat6.zzzz + u_xlat2;
					    gl_Position = u_xlat0 * u_xlat6.wwww + u_xlat1;
					    u_xlatb0 = _UVSec==0.0;
					    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
					    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = u_xlat4.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * u_xlat4.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat4.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * u_xlat4.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    vs_TEXCOORD1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
					    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD3.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    u_xlat0.xyz = u_xlat5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = unity_WorldToLight[0].xyz * u_xlat5.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat5.zzz + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = unity_WorldToLight[3].xyz * u_xlat5.www + u_xlat0.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					Keywords { "POINT" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						vec4 unused_0_6[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_8[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat12 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat2.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb12 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb12){
					        u_xlatb12 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat3.xyz = (bool(u_xlatb12)) ? u_xlat3.xyz : vs_TEXCOORD5.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat12 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat13 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat12, u_xlat13);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat12 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2 = texture(_LightTexture0, vec2(u_xlat13));
					    u_xlat12 = u_xlat12 * u_xlat2.x;
					    u_xlat2.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[8];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat12 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat5.xyz = u_xlat1.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = vs_TEXCOORD2.xyz * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat1.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlatb12 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb12){
					        u_xlatb12 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat2.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat2.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat2.xyz;
					        u_xlat2.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat2.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat2.xyz = (bool(u_xlatb12)) ? u_xlat2.xyz : vs_TEXCOORD5.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat12 = u_xlat2.y * 0.25 + 0.75;
					        u_xlat13 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat2.x = max(u_xlat12, u_xlat13);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					    } else {
					        u_xlat2.x = float(1.0);
					        u_xlat2.y = float(1.0);
					        u_xlat2.z = float(1.0);
					        u_xlat2.w = float(1.0);
					    }
					    u_xlat12 = dot(u_xlat2, unity_OcclusionMaskSelector);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						vec4 unused_0_6[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat12 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD4.xyz;
					    u_xlatb12 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb12){
					        u_xlatb12 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat2.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat2.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat2.xyz;
					        u_xlat2.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat2.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat2.xyz = (bool(u_xlatb12)) ? u_xlat2.xyz : vs_TEXCOORD5.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat12 = u_xlat2.y * 0.25 + 0.75;
					        u_xlat13 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat2.x = max(u_xlat12, u_xlat13);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					    } else {
					        u_xlat2.x = float(1.0);
					        u_xlat2.y = float(1.0);
					        u_xlat2.z = float(1.0);
					        u_xlat2.w = float(1.0);
					    }
					    u_xlat12 = dot(u_xlat2, unity_OcclusionMaskSelector);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[6];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat12 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat5.xyz = u_xlat1.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = vs_TEXCOORD2.xyz * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat1.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat2 = vs_TEXCOORD5.yyyy * unity_WorldToLight[1];
					    u_xlat2 = unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat2;
					    u_xlat2 = unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat2;
					    u_xlat2 = u_xlat2 + unity_WorldToLight[3];
					    u_xlatb12 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb12){
					        u_xlatb12 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat3.xyz = (bool(u_xlatb12)) ? u_xlat3.xyz : vs_TEXCOORD5.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat12 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat13 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat12, u_xlat13);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat12 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlatb13 = 0.0<u_xlat2.z;
					    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat3.xy = u_xlat2.xy / u_xlat2.ww;
					    u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
					    u_xlat3 = texture(_LightTexture0, u_xlat3.xy);
					    u_xlat13 = u_xlat13 * u_xlat3.w;
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2 = texture(_LightTextureB0, u_xlat2.xx);
					    u_xlat13 = u_xlat13 * u_xlat2.x;
					    u_xlat12 = u_xlat12 * u_xlat13;
					    u_xlat2.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						vec4 unused_0_6[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_8[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat12 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD4.xyz;
					    u_xlat2 = vs_TEXCOORD5.yyyy * unity_WorldToLight[1];
					    u_xlat2 = unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat2;
					    u_xlat2 = unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat2;
					    u_xlat2 = u_xlat2 + unity_WorldToLight[3];
					    u_xlatb12 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb12){
					        u_xlatb12 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat3.xyz = (bool(u_xlatb12)) ? u_xlat3.xyz : vs_TEXCOORD5.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat12 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat13 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat12, u_xlat13);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat12 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlatb13 = 0.0<u_xlat2.z;
					    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat3.xy = u_xlat2.xy / u_xlat2.ww;
					    u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
					    u_xlat3 = texture(_LightTexture0, u_xlat3.xy);
					    u_xlat13 = u_xlat13 * u_xlat3.w;
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2 = texture(_LightTextureB0, u_xlat2.xx);
					    u_xlat13 = u_xlat13 * u_xlat2.x;
					    u_xlat12 = u_xlat12 * u_xlat13;
					    u_xlat2.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[6];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat12 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat5.xyz = u_xlat1.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = vs_TEXCOORD2.xyz * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat1.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat2.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat2.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb12 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb12){
					        u_xlatb12 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat3.xyz = (bool(u_xlatb12)) ? u_xlat3.xyz : vs_TEXCOORD5.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat12 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat13 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat12, u_xlat13);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat12 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3 = texture(_LightTextureB0, vec2(u_xlat13));
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xyz);
					    u_xlat13 = u_xlat2.w * u_xlat3.x;
					    u_xlat12 = u_xlat12 * u_xlat13;
					    u_xlat2.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						vec4 unused_0_6[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_8[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat12 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat2.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb12 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb12){
					        u_xlatb12 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat3.xyz = (bool(u_xlatb12)) ? u_xlat3.xyz : vs_TEXCOORD5.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat12 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat13 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat12, u_xlat13);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat12 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3 = texture(_LightTextureB0, vec2(u_xlat13));
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xyz);
					    u_xlat13 = u_xlat2.w * u_xlat3.x;
					    u_xlat12 = u_xlat12 * u_xlat13;
					    u_xlat2.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[6];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat12 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat5.xyz = u_xlat1.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = vs_TEXCOORD2.xyz * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat1.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.yy * unity_WorldToLight[1].xy;
					    u_xlat2.xy = unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat2.xy;
					    u_xlat2.xy = unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + unity_WorldToLight[3].xy;
					    u_xlatb12 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb12){
					        u_xlatb12 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat3.xyz = (bool(u_xlatb12)) ? u_xlat3.xyz : vs_TEXCOORD5.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat12 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat13 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat12, u_xlat13);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat12 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlat12 = u_xlat12 * u_xlat2.w;
					    u_xlat2.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						vec4 unused_0_6[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_8[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat12 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD4.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.yy * unity_WorldToLight[1].xy;
					    u_xlat2.xy = unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat2.xy;
					    u_xlat2.xy = unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + unity_WorldToLight[3].xy;
					    u_xlatb12 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb12){
					        u_xlatb12 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat3.xyz = (bool(u_xlatb12)) ? u_xlat3.xyz : vs_TEXCOORD5.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat12 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat13 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat12, u_xlat13);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat12 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlat12 = u_xlat12 * u_xlat2.w;
					    u_xlat2.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[6];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat12 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat5.xyz = u_xlat1.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = vs_TEXCOORD2.xyz * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat1.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat2.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat2.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb12 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb12){
					        u_xlatb12 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat3.xyz = (bool(u_xlatb12)) ? u_xlat3.xyz : vs_TEXCOORD5.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat12 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat13 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat12, u_xlat13);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat12 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2 = texture(_LightTexture0, vec2(u_xlat13));
					    u_xlat12 = u_xlat12 * u_xlat2.x;
					    u_xlat2.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "POINT" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						vec4 unused_0_6[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_8[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat12 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat2.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb12 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb12){
					        u_xlatb12 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat3.xyz = (bool(u_xlatb12)) ? u_xlat3.xyz : vs_TEXCOORD5.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat12 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat13 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat12, u_xlat13);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat12 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2 = texture(_LightTexture0, vec2(u_xlat13));
					    u_xlat12 = u_xlat12 * u_xlat2.x;
					    u_xlat2.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[8];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat12 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat5.xyz = u_xlat1.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = vs_TEXCOORD2.xyz * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat1.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlatb12 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb12){
					        u_xlatb12 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat2.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat2.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat2.xyz;
					        u_xlat2.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat2.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat2.xyz = (bool(u_xlatb12)) ? u_xlat2.xyz : vs_TEXCOORD5.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat12 = u_xlat2.y * 0.25 + 0.75;
					        u_xlat13 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat2.x = max(u_xlat12, u_xlat13);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					    } else {
					        u_xlat2.x = float(1.0);
					        u_xlat2.y = float(1.0);
					        u_xlat2.z = float(1.0);
					        u_xlat2.w = float(1.0);
					    }
					    u_xlat12 = dot(u_xlat2, unity_OcclusionMaskSelector);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FIRSTPERSONVIEW" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						vec4 unused_0_6[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat12 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD4.xyz;
					    u_xlatb12 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb12){
					        u_xlatb12 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat2.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat2.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat2.xyz;
					        u_xlat2.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat2.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat2.xyz = (bool(u_xlatb12)) ? u_xlat2.xyz : vs_TEXCOORD5.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat12 = u_xlat2.y * 0.25 + 0.75;
					        u_xlat13 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat2.x = max(u_xlat12, u_xlat13);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					    } else {
					        u_xlat2.x = float(1.0);
					        u_xlat2.y = float(1.0);
					        u_xlat2.z = float(1.0);
					        u_xlat2.w = float(1.0);
					    }
					    u_xlat12 = dot(u_xlat2, unity_OcclusionMaskSelector);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "SPOT" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[6];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat12 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat5.xyz = u_xlat1.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = vs_TEXCOORD2.xyz * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat1.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat2 = vs_TEXCOORD5.yyyy * unity_WorldToLight[1];
					    u_xlat2 = unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat2;
					    u_xlat2 = unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat2;
					    u_xlat2 = u_xlat2 + unity_WorldToLight[3];
					    u_xlatb12 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb12){
					        u_xlatb12 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat3.xyz = (bool(u_xlatb12)) ? u_xlat3.xyz : vs_TEXCOORD5.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat12 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat13 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat12, u_xlat13);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat12 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlatb13 = 0.0<u_xlat2.z;
					    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat3.xy = u_xlat2.xy / u_xlat2.ww;
					    u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
					    u_xlat3 = texture(_LightTexture0, u_xlat3.xy);
					    u_xlat13 = u_xlat13 * u_xlat3.w;
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2 = texture(_LightTextureB0, u_xlat2.xx);
					    u_xlat13 = u_xlat13 * u_xlat2.x;
					    u_xlat12 = u_xlat12 * u_xlat13;
					    u_xlat2.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "SPOT" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						vec4 unused_0_6[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_8[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat12 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD4.xyz;
					    u_xlat2 = vs_TEXCOORD5.yyyy * unity_WorldToLight[1];
					    u_xlat2 = unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat2;
					    u_xlat2 = unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat2;
					    u_xlat2 = u_xlat2 + unity_WorldToLight[3];
					    u_xlatb12 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb12){
					        u_xlatb12 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat3.xyz = (bool(u_xlatb12)) ? u_xlat3.xyz : vs_TEXCOORD5.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat12 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat13 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat12, u_xlat13);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat12 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlatb13 = 0.0<u_xlat2.z;
					    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat3.xy = u_xlat2.xy / u_xlat2.ww;
					    u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
					    u_xlat3 = texture(_LightTexture0, u_xlat3.xy);
					    u_xlat13 = u_xlat13 * u_xlat3.w;
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2 = texture(_LightTextureB0, u_xlat2.xx);
					    u_xlat13 = u_xlat13 * u_xlat2.x;
					    u_xlat12 = u_xlat12 * u_xlat13;
					    u_xlat2.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "POINT_COOKIE" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[6];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat12 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat5.xyz = u_xlat1.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = vs_TEXCOORD2.xyz * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat1.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat2.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat2.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb12 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb12){
					        u_xlatb12 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat3.xyz = (bool(u_xlatb12)) ? u_xlat3.xyz : vs_TEXCOORD5.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat12 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat13 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat12, u_xlat13);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat12 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3 = texture(_LightTextureB0, vec2(u_xlat13));
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xyz);
					    u_xlat13 = u_xlat2.w * u_xlat3.x;
					    u_xlat12 = u_xlat12 * u_xlat13;
					    u_xlat2.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "POINT_COOKIE" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						vec4 unused_0_6[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_8[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat12 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat2.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb12 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb12){
					        u_xlatb12 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat3.xyz = (bool(u_xlatb12)) ? u_xlat3.xyz : vs_TEXCOORD5.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat12 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat13 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat12, u_xlat13);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat12 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3 = texture(_LightTextureB0, vec2(u_xlat13));
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xyz);
					    u_xlat13 = u_xlat2.w * u_xlat3.x;
					    u_xlat12 = u_xlat12 * u_xlat13;
					    u_xlat2.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "FIRSTPERSONVIEW" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[6];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat12 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat5.xyz = u_xlat1.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = vs_TEXCOORD2.xyz * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat1.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.yy * unity_WorldToLight[1].xy;
					    u_xlat2.xy = unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat2.xy;
					    u_xlat2.xy = unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + unity_WorldToLight[3].xy;
					    u_xlatb12 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb12){
					        u_xlatb12 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat3.xyz = (bool(u_xlatb12)) ? u_xlat3.xyz : vs_TEXCOORD5.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat12 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat13 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat12, u_xlat13);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat12 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlat12 = u_xlat12 * u_xlat2.w;
					    u_xlat2.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "FIRSTPERSONVIEW" "_ALPHABLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[3];
						float _Metallic;
						vec4 unused_0_6[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_8[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat12 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD4.xyz;
					    u_xlat2.xy = vs_TEXCOORD5.yy * unity_WorldToLight[1].xy;
					    u_xlat2.xy = unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat2.xy;
					    u_xlat2.xy = unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + unity_WorldToLight[3].xy;
					    u_xlatb12 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb12){
					        u_xlatb12 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat3.xyz = (bool(u_xlatb12)) ? u_xlat3.xyz : vs_TEXCOORD5.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat12 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat13 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat12, u_xlat13);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat12 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlat12 = u_xlat12 * u_xlat2.w;
					    u_xlat2.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "POINT" "_ALPHABLEND_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[6];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[46];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MetallicGlossMap;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * _Color.w;
					    u_xlat1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat12 = (-u_xlat1.x) * 0.779083729 + 0.779083729;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat5.xyz = u_xlat1.yyy * vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = vs_TEXCOORD2.xyz * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat1.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat2.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat2.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb12 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb12){
					        u_xlatb12 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD5.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat3.xyz = (bool(u_xlatb12)) ? u_xlat3.xyz : vs_TEXCOORD5.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat12 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat13 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat12, u_xlat13);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat12 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2 = texture(_LightTexture0, vec2(u_xlat13));
					    u_xlat12 = u_xlat12 * u_xlat2.x;
					    u_xlat2.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w;
					    u_xlat3.y = vs_TEXCOORD3.w;
					    u_xlat3.z = vs_TEXCOORD4.w;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "ShadowCaster"
			LOD 150
			Tags { "LIGHTMODE" = "SHADOWCASTER" "PerformanceChecks" = "False" "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" }
			GpuProgramID 519381
			Program "vp" {
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_DEPTH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_2_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat8;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * unity_LightShadowBias.z;
					    u_xlat1.xyz = (-u_xlat2.xyz) * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlatb13 = unity_LightShadowBias.z!=0.0;
					    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
					    u_xlat1.x = min(u_xlat1.x, 0.0);
					    u_xlat1.x = max(u_xlat1.x, -1.0);
					    u_xlat8 = u_xlat0.z + u_xlat1.x;
					    u_xlat1.x = min(u_xlat0.w, u_xlat8);
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.x = (-u_xlat8) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat8;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_CUBE" "_METALLICGLOSSMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_2_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * unity_LightShadowBias.z;
					    u_xlat1.xyz = (-u_xlat2.xyz) * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlatb13 = unity_LightShadowBias.z!=0.0;
					    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = min(u_xlat0.w, u_xlat0.z);
					    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat0.z;
					    gl_Position.xyw = u_xlat0.xyw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_2_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * unity_LightShadowBias.z;
					    u_xlat1.xyz = (-u_xlat2.xyz) * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlatb13 = unity_LightShadowBias.z!=0.0;
					    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = min(u_xlat0.w, u_xlat0.z);
					    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat0.z;
					    gl_Position.xyw = u_xlat0.xyw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_DEPTH" "_METALLICGLOSSMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_2_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat8;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * unity_LightShadowBias.z;
					    u_xlat1.xyz = (-u_xlat2.xyz) * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlatb13 = unity_LightShadowBias.z!=0.0;
					    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
					    u_xlat1.x = min(u_xlat1.x, 0.0);
					    u_xlat1.x = max(u_xlat1.x, -1.0);
					    u_xlat8 = u_xlat0.z + u_xlat1.x;
					    u_xlat1.x = min(u_xlat0.w, u_xlat8);
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.x = (-u_xlat8) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat8;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "SHADOWS_DEPTH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_2_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat8;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * unity_LightShadowBias.z;
					    u_xlat1.xyz = (-u_xlat2.xyz) * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlatb13 = unity_LightShadowBias.z!=0.0;
					    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.xxxx + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat2;
					    u_xlat0 = u_xlat2 * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
					    u_xlat1.x = min(u_xlat1.x, 0.0);
					    u_xlat1.x = max(u_xlat1.x, -1.0);
					    u_xlat8 = u_xlat0.z + u_xlat1.x;
					    u_xlat1.x = min(u_xlat0.w, u_xlat8);
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.x = (-u_xlat8) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat8;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "SHADOWS_CUBE" "_METALLICGLOSSMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_2_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * unity_LightShadowBias.z;
					    u_xlat1.xyz = (-u_xlat2.xyz) * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlatb13 = unity_LightShadowBias.z!=0.0;
					    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.xxxx + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat2;
					    u_xlat0 = u_xlat2 * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = min(u_xlat0.w, u_xlat0.z);
					    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat0.z;
					    gl_Position.xyw = u_xlat0.xyw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_2_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * unity_LightShadowBias.z;
					    u_xlat1.xyz = (-u_xlat2.xyz) * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlatb13 = unity_LightShadowBias.z!=0.0;
					    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.xxxx + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat2;
					    u_xlat0 = u_xlat2 * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = min(u_xlat0.w, u_xlat0.z);
					    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat0.z;
					    gl_Position.xyw = u_xlat0.xyw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "SHADOWS_DEPTH" "_METALLICGLOSSMAP" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						float _WorldRadius;
						vec4 _WorldCenter;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_2_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 _firstPersonProjectionMatrix;
						vec4 unused_4_2[4];
						mat4x4 unity_MatrixV;
						vec4 unused_4_4[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat5;
					float u_xlat8;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.xyz = u_xlat0.xyz + (-_WorldCenter.xyz);
					    u_xlat1.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat5 = u_xlat1.x / _WorldRadius;
					    u_xlat2.x = sin(u_xlat5);
					    u_xlat3 = cos(u_xlat5);
					    u_xlat1.x = u_xlat2.x / u_xlat1.x;
					    u_xlat2.y = u_xlat3;
					    u_xlat2.xz = u_xlat0.xz * u_xlat1.xx;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.yyy + _WorldCenter.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToObject[1];
					    u_xlat1 = unity_WorldToObject[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToObject[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_WorldToObject[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * unity_LightShadowBias.z;
					    u_xlat1.xyz = (-u_xlat2.xyz) * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlatb13 = unity_LightShadowBias.z!=0.0;
					    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = _firstPersonProjectionMatrix[1] * unity_MatrixV[1].yyyy;
					    u_xlat1 = _firstPersonProjectionMatrix[0] * unity_MatrixV[1].xxxx + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[2] * unity_MatrixV[1].zzzz + u_xlat1;
					    u_xlat1 = _firstPersonProjectionMatrix[3] * unity_MatrixV[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[0].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[0].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[0].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.xxxx + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[2].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[2].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[2].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = _firstPersonProjectionMatrix[1] * unity_MatrixV[3].yyyy;
					    u_xlat2 = _firstPersonProjectionMatrix[0] * unity_MatrixV[3].xxxx + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[2] * unity_MatrixV[3].zzzz + u_xlat2;
					    u_xlat2 = _firstPersonProjectionMatrix[3] * unity_MatrixV[3].wwww + u_xlat2;
					    u_xlat0 = u_xlat2 * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
					    u_xlat1.x = min(u_xlat1.x, 0.0);
					    u_xlat1.x = max(u_xlat1.x, -1.0);
					    u_xlat8 = u_xlat0.z + u_xlat1.x;
					    u_xlat1.x = min(u_xlat0.w, u_xlat8);
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.x = (-u_xlat8) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat8;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_DEPTH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_CUBE" "_METALLICGLOSSMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_DEPTH" "_METALLICGLOSSMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "SHADOWS_DEPTH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "SHADOWS_CUBE" "_METALLICGLOSSMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FIRSTPERSONVIEW" "SHADOWS_DEPTH" "_METALLICGLOSSMAP" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
			}
		}
	}
	Fallback "VertexLit"
	CustomEditor "StandardShaderGUI"
}